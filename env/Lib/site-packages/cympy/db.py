# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Database module.
Contains functions and classes for working with CYME databases.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_db', [dirname(__file__)])
        except ImportError:
            import _db
            return _db
        if fp is not None:
            try:
                _mod = imp.load_module('_db', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _db = swig_import_helper()
    del swig_import_helper
else:
    import _db
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err

def Connect(*args) -> "void" :
  """Connect(ConnectionInformation ConnectionInformation)"""
  return _db.Connect(*args)

def Disconnect() -> "void" :
  """Disconnect()"""
  return _db.Disconnect()

def Update() -> "void" :
  """Update()"""
  return _db.Update()

def IsConnected() -> "bool" :
  """IsConnected() -> bool"""
  return _db.IsConnected()

def GetCurrentConnection() -> "ConnectionInformation *" :
  """GetCurrentConnection() -> ConnectionInformation"""
  return _db.GetCurrentConnection()

def ListConnections() -> "std::list< ConnectionInformation >" :
  """ListConnections() -> std::list< ConnectionInformation >"""
  return _db.ListConnections()

def ListNetworks(*args) -> "std::list< CYMString >" :
  """
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" ), CYMString Group2RegEx=_T( ".*" ), CYMString Group3RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" ), CYMString Group2RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All) -> std::list< CYMString >
    ListNetworks() -> std::list< CYMString >
    """
  return _db.ListNetworks(*args)

def ImportXML(*args) -> "void" :
  """ImportXML(CYMString FilePath)"""
  return _db.ImportXML(*args)

def ImportASCII(*args) -> "void" :
  """
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ), CYMString MeterDemandsFilePath=_T( "" ), 
        CYMString TCCFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ), CYMString MeterDemandsFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ))
    ImportASCII(CYMString NetworkFilePath)
    """
  return _db.ImportASCII(*args)

def ExportXML(*args) -> "void" :
  """ExportXML(CYMString FilePath)"""
  return _db.ExportXML(*args)

def ExportASCII(*args) -> "void" :
  """
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ), CYMString MeterDemandsFilePath=_T( "" ), 
        CYMString TCCFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ), CYMString MeterDemandsFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ), 
        CYMString CapacitorStatusFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ), CYMString ReliabilityFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ), 
        CYMString MapFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ), CYMString LoadFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath, CYMString EquipmentFilePath=_T( "" ))
    ExportASCII(CYMString NetworkFilePath)
    """
  return _db.ExportASCII(*args)
class DataSource(_object):
    """Proxy of C++ DataSource class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _db.delete_DataSource
    __del__ = lambda self : None;
    __str__ = lambda self: "DataSource"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
DataSource_swigregister = _db.DataSource_swigregister
DataSource_swigregister(DataSource)

class MDBDataSource(DataSource):
    """Proxy of C++ MDBDataSource class"""
    __swig_setmethods__ = {}
    for _s in [DataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDBDataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MDBDataSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(MDBDataSource self, CYMString Path) -> MDBDataSource
        __init__(MDBDataSource self) -> MDBDataSource
        """
        this = _db.new_MDBDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _db.delete_MDBDataSource
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Path + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Path"] = _db.MDBDataSource_Path_set
    __swig_getmethods__["Path"] = _db.MDBDataSource_Path_get
    if _newclass:Path = _swig_property(_db.MDBDataSource_Path_get, _db.MDBDataSource_Path_set)
MDBDataSource_swigregister = _db.MDBDataSource_swigregister
MDBDataSource_swigregister(MDBDataSource)

class OracleDataSource(DataSource):
    """Proxy of C++ OracleDataSource class"""
    __swig_setmethods__ = {}
    for _s in [DataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OracleDataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OracleDataSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(OracleDataSource self, CYMString ServiceName, CYMString SchemaName, CYMString UserID, CYMString Password) -> OracleDataSource
        __init__(OracleDataSource self) -> OracleDataSource
        """
        this = _db.new_OracleDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _db.delete_OracleDataSource
    __del__ = lambda self : None;
    __str__ = lambda self: "(ServiceName: '" + self.ServiceName + "', SchemaName: '" + self.SchemaName + "', UserID: '" + self.UserID + "', Password: '" + self.Password + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["ServiceName"] = _db.OracleDataSource_ServiceName_set
    __swig_getmethods__["ServiceName"] = _db.OracleDataSource_ServiceName_get
    if _newclass:ServiceName = _swig_property(_db.OracleDataSource_ServiceName_get, _db.OracleDataSource_ServiceName_set)
    __swig_setmethods__["SchemaName"] = _db.OracleDataSource_SchemaName_set
    __swig_getmethods__["SchemaName"] = _db.OracleDataSource_SchemaName_get
    if _newclass:SchemaName = _swig_property(_db.OracleDataSource_SchemaName_get, _db.OracleDataSource_SchemaName_set)
    __swig_setmethods__["UserID"] = _db.OracleDataSource_UserID_set
    __swig_getmethods__["UserID"] = _db.OracleDataSource_UserID_get
    if _newclass:UserID = _swig_property(_db.OracleDataSource_UserID_get, _db.OracleDataSource_UserID_set)
    __swig_setmethods__["Password"] = _db.OracleDataSource_Password_set
    __swig_getmethods__["Password"] = _db.OracleDataSource_Password_get
    if _newclass:Password = _swig_property(_db.OracleDataSource_Password_get, _db.OracleDataSource_Password_set)
OracleDataSource_swigregister = _db.OracleDataSource_swigregister
OracleDataSource_swigregister(OracleDataSource)

class SQLServerDataSource(DataSource):
    """Proxy of C++ SQLServerDataSource class"""
    __swig_setmethods__ = {}
    for _s in [DataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SQLServerDataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [DataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SQLServerDataSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SQLServerDataSource self, CYMString DatabaseName, CYMString ServerName, CYMString UserID, CYMString Password, 
            bool WindowsAuthentication) -> SQLServerDataSource
        __init__(SQLServerDataSource self) -> SQLServerDataSource
        """
        this = _db.new_SQLServerDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _db.delete_SQLServerDataSource
    __del__ = lambda self : None;
    __str__ = lambda self: "(DatabaseName: '" + self.DatabaseName + "', ServerName: '" + self.ServerName + "', UserID: '" + self.UserID + "', WindowsAuthentication: " + str(self.WindowsAuthentication) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["DatabaseName"] = _db.SQLServerDataSource_DatabaseName_set
    __swig_getmethods__["DatabaseName"] = _db.SQLServerDataSource_DatabaseName_get
    if _newclass:DatabaseName = _swig_property(_db.SQLServerDataSource_DatabaseName_get, _db.SQLServerDataSource_DatabaseName_set)
    __swig_setmethods__["ServerName"] = _db.SQLServerDataSource_ServerName_set
    __swig_getmethods__["ServerName"] = _db.SQLServerDataSource_ServerName_get
    if _newclass:ServerName = _swig_property(_db.SQLServerDataSource_ServerName_get, _db.SQLServerDataSource_ServerName_set)
    __swig_setmethods__["UserID"] = _db.SQLServerDataSource_UserID_set
    __swig_getmethods__["UserID"] = _db.SQLServerDataSource_UserID_get
    if _newclass:UserID = _swig_property(_db.SQLServerDataSource_UserID_get, _db.SQLServerDataSource_UserID_set)
    __swig_setmethods__["Password"] = _db.SQLServerDataSource_Password_set
    __swig_getmethods__["Password"] = _db.SQLServerDataSource_Password_get
    if _newclass:Password = _swig_property(_db.SQLServerDataSource_Password_get, _db.SQLServerDataSource_Password_set)
    __swig_setmethods__["WindowsAuthentication"] = _db.SQLServerDataSource_WindowsAuthentication_set
    __swig_getmethods__["WindowsAuthentication"] = _db.SQLServerDataSource_WindowsAuthentication_get
    if _newclass:WindowsAuthentication = _swig_property(_db.SQLServerDataSource_WindowsAuthentication_get, _db.SQLServerDataSource_WindowsAuthentication_set)
SQLServerDataSource_swigregister = _db.SQLServerDataSource_swigregister
SQLServerDataSource_swigregister(SQLServerDataSource)

class ConnectionInformation(_object):
    """Proxy of C++ ConnectionInformation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionInformation, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _db.delete_ConnectionInformation
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "', Equipment: " + str(self.Equipment) + ", Network: " + str(self.Network) + ", Project: " + str(self.Project) + ", LoadProfile: " + str(self.LoadProfile) + ", Billing: " + str(self.Billing) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __init__(self, *args): 
        """
        __init__(ConnectionInformation self, CYMString Name) -> ConnectionInformation
        __init__(ConnectionInformation self) -> ConnectionInformation
        __init__(ConnectionInformation self, ConnectionInformation reference) -> ConnectionInformation
        """
        this = _db.new_ConnectionInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def _GetEquipment(self) -> "DataSource const *" :
        """_GetEquipment(ConnectionInformation self) -> DataSource"""
        return _db.ConnectionInformation__GetEquipment(self)

    def _SetEquipment(self, *args) -> "void" :
        """_SetEquipment(ConnectionInformation self, DataSource pDataSource)"""
        return _db.ConnectionInformation__SetEquipment(self, *args)

    def _GetNetwork(self) -> "DataSource const *" :
        """_GetNetwork(ConnectionInformation self) -> DataSource"""
        return _db.ConnectionInformation__GetNetwork(self)

    def _SetNetwork(self, *args) -> "void" :
        """_SetNetwork(ConnectionInformation self, DataSource pDataSource)"""
        return _db.ConnectionInformation__SetNetwork(self, *args)

    def _GetProject(self) -> "DataSource const *" :
        """_GetProject(ConnectionInformation self) -> DataSource"""
        return _db.ConnectionInformation__GetProject(self)

    def _SetProject(self, *args) -> "void" :
        """_SetProject(ConnectionInformation self, DataSource pDataSource)"""
        return _db.ConnectionInformation__SetProject(self, *args)

    def _GetLoadProfile(self) -> "DataSource const *" :
        """_GetLoadProfile(ConnectionInformation self) -> DataSource"""
        return _db.ConnectionInformation__GetLoadProfile(self)

    def _SetLoadProfile(self, *args) -> "void" :
        """_SetLoadProfile(ConnectionInformation self, DataSource pDataSource)"""
        return _db.ConnectionInformation__SetLoadProfile(self, *args)

    def _GetBilling(self) -> "DataSource const *" :
        """_GetBilling(ConnectionInformation self) -> DataSource"""
        return _db.ConnectionInformation__GetBilling(self)

    def _SetBilling(self, *args) -> "void" :
        """_SetBilling(ConnectionInformation self, DataSource pDataSource)"""
        return _db.ConnectionInformation__SetBilling(self, *args)

    __swig_setmethods__["Name"] = _db.ConnectionInformation_Name_set
    __swig_getmethods__["Name"] = _db.ConnectionInformation_Name_get
    if _newclass:Name = _swig_property(_db.ConnectionInformation_Name_get, _db.ConnectionInformation_Name_set)
    __swig_getmethods__["Equipment"] = _GetEquipment
    __swig_setmethods__["Equipment"] = _SetEquipment
    if _newclass: Equipment = property(_GetEquipment, _SetEquipment)

    __swig_getmethods__["Network"] = _GetNetwork
    __swig_setmethods__["Network"] = _SetNetwork
    if _newclass: Network = property(_GetNetwork, _SetNetwork)

    __swig_getmethods__["Project"] = _GetProject
    __swig_setmethods__["Project"] = _SetProject
    if _newclass: Project = property(_GetProject, _SetProject)

    __swig_getmethods__["LoadProfile"] = _GetLoadProfile
    __swig_setmethods__["LoadProfile"] = _SetLoadProfile
    if _newclass: LoadProfile = property(_GetLoadProfile, _SetLoadProfile)

    __swig_getmethods__["Billing"] = _GetBilling
    __swig_setmethods__["Billing"] = _SetBilling
    if _newclass: Billing = property(_GetBilling, _SetBilling)

ConnectionInformation_swigregister = _db.ConnectionInformation_swigregister
ConnectionInformation_swigregister(ConnectionInformation)

# This file is compatible with both classic and new-style classes.


