# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Enums module. Contains all the enumerated values.
You can use either the name or the integer value of the enum.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_enums', [dirname(__file__)])
        except ImportError:
            import _enums
            return _enums
        if fp is not None:
            try:
                _mod = imp.load_module('_enums', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _enums = swig_import_helper()
    del swig_import_helper
else:
    import _enums
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class AbnormalConditionType(_object):
    """Proxy of C++ AbnormalConditionType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbnormalConditionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbnormalConditionType, name)
    __repr__ = _swig_repr
    All = _enums.AbnormalConditionType_All
    Invalid = _enums.AbnormalConditionType_Invalid
    Overload = _enums.AbnormalConditionType_Overload
    LowVoltage = _enums.AbnormalConditionType_LowVoltage
    HighVoltage = _enums.AbnormalConditionType_HighVoltage
    MinimumFault = _enums.AbnormalConditionType_MinimumFault
    InterruptingRatingLLL = _enums.AbnormalConditionType_InterruptingRatingLLL
    InterruptingRatingLLLG = _enums.AbnormalConditionType_InterruptingRatingLLLG
    InterruptingRatingLL = _enums.AbnormalConditionType_InterruptingRatingLL
    InterruptingRatingLLG = _enums.AbnormalConditionType_InterruptingRatingLLG
    InterruptingRatingLG = _enums.AbnormalConditionType_InterruptingRatingLG
    def __init__(self): 
        """__init__(AbnormalConditionType self) -> AbnormalConditionType"""
        this = _enums.new_AbnormalConditionType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_AbnormalConditionType
    __del__ = lambda self : None;
AbnormalConditionType_swigregister = _enums.AbnormalConditionType_swigregister
AbnormalConditionType_swigregister(AbnormalConditionType)

class Color(_object):
    """Proxy of C++ Color class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    White = _enums.Color_White
    Black = _enums.Color_Black
    Red = _enums.Color_Red
    Green = _enums.Color_Green
    Blue = _enums.Color_Blue
    Yellow = _enums.Color_Yellow
    def __init__(self): 
        """__init__(Color self) -> Color"""
        this = _enums.new_Color()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_Color
    __del__ = lambda self : None;
Color_swigregister = _enums.Color_swigregister
Color_swigregister(Color)

class DeviceType(_object):
    """Proxy of C++ DeviceType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceType, name)
    __repr__ = _swig_repr
    Unknown = _enums.DeviceType_Unknown
    AllDevices = _enums.DeviceType_AllDevices
    Regulator = _enums.DeviceType_Regulator
    Transformer = _enums.DeviceType_Transformer
    Breaker = _enums.DeviceType_Breaker
    LVCB = _enums.DeviceType_LVCB
    Recloser = _enums.DeviceType_Recloser
    Sectionalizer = _enums.DeviceType_Sectionalizer
    Switch = _enums.DeviceType_Switch
    Fuse = _enums.DeviceType_Fuse
    SeriesCapacitor = _enums.DeviceType_SeriesCapacitor
    SeriesReactor = _enums.DeviceType_SeriesReactor
    Underground = _enums.DeviceType_Underground
    OverheadLine = _enums.DeviceType_OverheadLine
    OverheadLineUnbalanced = _enums.DeviceType_OverheadLineUnbalanced
    OverheadByPhase = _enums.DeviceType_OverheadByPhase
    SpotLoad = _enums.DeviceType_SpotLoad
    DistributedLoad = _enums.DeviceType_DistributedLoad
    ShuntCapacitor = _enums.DeviceType_ShuntCapacitor
    ShuntReactor = _enums.DeviceType_ShuntReactor
    Miscellaneous = _enums.DeviceType_Miscellaneous
    ArcFurnace = _enums.DeviceType_ArcFurnace
    CTypeFilter = _enums.DeviceType_CTypeFilter
    DoubleTunedFilter = _enums.DeviceType_DoubleTunedFilter
    HighPassFilter = _enums.DeviceType_HighPassFilter
    IdealConverter = _enums.DeviceType_IdealConverter
    NonIdealConverter = _enums.DeviceType_NonIdealConverter
    ShuntFrequencySource = _enums.DeviceType_ShuntFrequencySource
    SeriesFrequencySource = _enums.DeviceType_SeriesFrequencySource
    SingleTunedFilter = _enums.DeviceType_SingleTunedFilter
    InductionGenerator = _enums.DeviceType_InductionGenerator
    SynchronousGenerator = _enums.DeviceType_SynchronousGenerator
    InductionMotor = _enums.DeviceType_InductionMotor
    SynchronousMotor = _enums.DeviceType_SynchronousMotor
    ThreeWindingTransformer = _enums.DeviceType_ThreeWindingTransformer
    TransformerByPhase = _enums.DeviceType_TransformerByPhase
    ElectronicConverterGenerator = _enums.DeviceType_ElectronicConverterGenerator
    Source = _enums.DeviceType_Source
    NetworkEquivalent = _enums.DeviceType_NetworkEquivalent
    Wecs = _enums.DeviceType_Wecs
    GroundingTransformer = _enums.DeviceType_GroundingTransformer
    Photovoltaic = _enums.DeviceType_Photovoltaic
    MicroTurbine = _enums.DeviceType_MicroTurbine
    Sofc = _enums.DeviceType_Sofc
    AutoTransformer = _enums.DeviceType_AutoTransformer
    ThreeWindingAutoTransformer = _enums.DeviceType_ThreeWindingAutoTransformer
    SVC = _enums.DeviceType_SVC
    ShuntParallelRLCBranch = _enums.DeviceType_ShuntParallelRLCBranch
    ShuntRLCBranch = _enums.DeviceType_ShuntRLCBranch
    SeriesParallelRLCBranch = _enums.DeviceType_SeriesParallelRLCBranch
    SeriesRLCBranch = _enums.DeviceType_SeriesRLCBranch
    ShuntFrequencyDependentBranch = _enums.DeviceType_ShuntFrequencyDependentBranch
    SeriesFrequencyDependentBranch = _enums.DeviceType_SeriesFrequencyDependentBranch
    ShuntMutuallyCoupled3phBranch = _enums.DeviceType_ShuntMutuallyCoupled3phBranch
    SeriesMutuallyCoupled3phBranch = _enums.DeviceType_SeriesMutuallyCoupled3phBranch
    NetworkProtector = _enums.DeviceType_NetworkProtector
    Busway = _enums.DeviceType_Busway
    Upfc = _enums.DeviceType_Upfc
    PhaseShifterTransformer = _enums.DeviceType_PhaseShifterTransformer
    Statcom = _enums.DeviceType_Statcom
    SwitchableShuntBank = _enums.DeviceType_SwitchableShuntBank
    DcLink = _enums.DeviceType_DcLink
    VariableFrequencyDrive = _enums.DeviceType_VariableFrequencyDrive
    RegulatorByPhase = _enums.DeviceType_RegulatorByPhase
    DoubleCircuitLine = _enums.DeviceType_DoubleCircuitLine
    Charger = _enums.DeviceType_Charger
    DCUPS = _enums.DeviceType_DCUPS
    DCMotor = _enums.DeviceType_DCMotor
    Battery = _enums.DeviceType_Battery
    DCDCConverter = _enums.DeviceType_DCDCConverter
    DCCable = _enums.DeviceType_DCCable
    DCLoad = _enums.DeviceType_DCLoad
    DCImpedance = _enums.DeviceType_DCImpedance
    DCLVCB = _enums.DeviceType_DCLVCB
    DCFuse = _enums.DeviceType_DCFuse
    DCSwitch = _enums.DeviceType_DCSwitch
    BESS = _enums.DeviceType_BESS
    def __init__(self): 
        """__init__(DeviceType self) -> DeviceType"""
        this = _enums.new_DeviceType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_DeviceType
    __del__ = lambda self : None;
DeviceType_swigregister = _enums.DeviceType_swigregister
DeviceType_swigregister(DeviceType)

class EquipmentType(_object):
    """Proxy of C++ EquipmentType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquipmentType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EquipmentType, name)
    __repr__ = _swig_repr
    Unknown = _enums.EquipmentType_Unknown
    SwitchingProtectingDevice = _enums.EquipmentType_SwitchingProtectingDevice
    Substation = _enums.EquipmentType_Substation
    Transformer = _enums.EquipmentType_Transformer
    Regulator = _enums.EquipmentType_Regulator
    Switch = _enums.EquipmentType_Switch
    Sectionalizer = _enums.EquipmentType_Sectionalizer
    Fuse = _enums.EquipmentType_Fuse
    Recloser = _enums.EquipmentType_Recloser
    Breaker = _enums.EquipmentType_Breaker
    LVCB = _enums.EquipmentType_LVCB
    MiscellaneousSwitchingProtectingDevice = _enums.EquipmentType_MiscellaneousSwitchingProtectingDevice
    SeriesCapacitor = _enums.EquipmentType_SeriesCapacitor
    SeriesReactor = _enums.EquipmentType_SeriesReactor
    ShuntCapacitor = _enums.EquipmentType_ShuntCapacitor
    ShuntReactor = _enums.EquipmentType_ShuntReactor
    Conductor = _enums.EquipmentType_Conductor
    Cable = _enums.EquipmentType_Cable
    OverheadLine = _enums.EquipmentType_OverheadLine
    OverheadLineUnbalanced = _enums.EquipmentType_OverheadLineUnbalanced
    OverheadSpacingOfConductor = _enums.EquipmentType_OverheadSpacingOfConductor
    Miscellaneous = _enums.EquipmentType_Miscellaneous
    ArcFurnace = _enums.EquipmentType_ArcFurnace
    CTypeFilter = _enums.EquipmentType_CTypeFilter
    DoubleTunedFilter = _enums.EquipmentType_DoubleTunedFilter
    HighPassFilter = _enums.EquipmentType_HighPassFilter
    IdealConverter = _enums.EquipmentType_IdealConverter
    NonIdealConverter = _enums.EquipmentType_NonIdealConverter
    FrequencySource = _enums.EquipmentType_FrequencySource
    SingleTunedFilter = _enums.EquipmentType_SingleTunedFilter
    SynchronousGenerator = _enums.EquipmentType_SynchronousGenerator
    InductionGenerator = _enums.EquipmentType_InductionGenerator
    ElectronicConverterGenerator = _enums.EquipmentType_ElectronicConverterGenerator
    InductionMotor = _enums.EquipmentType_InductionMotor
    SynchronousMotor = _enums.EquipmentType_SynchronousMotor
    ThreeWindingTransformer = _enums.EquipmentType_ThreeWindingTransformer
    UDM = _enums.EquipmentType_UDM
    Wecs = _enums.EquipmentType_Wecs
    WindModel = _enums.EquipmentType_WindModel
    GroundingTransformer = _enums.EquipmentType_GroundingTransformer
    MicroTurbine = _enums.EquipmentType_MicroTurbine
    Photovoltaic = _enums.EquipmentType_Photovoltaic
    Sofc = _enums.EquipmentType_Sofc
    InsolationModel = _enums.EquipmentType_InsolationModel
    AutoTransformer = _enums.EquipmentType_AutoTransformer
    ThreeWindingAutoTransformer = _enums.EquipmentType_ThreeWindingAutoTransformer
    SVC = _enums.EquipmentType_SVC
    NetworkProtector = _enums.EquipmentType_NetworkProtector
    GenerateCostCurveModel = _enums.EquipmentType_GenerateCostCurveModel
    Busway = _enums.EquipmentType_Busway
    PhaseShiftTransformer = _enums.EquipmentType_PhaseShiftTransformer
    VariableFrequencyDrive = _enums.EquipmentType_VariableFrequencyDrive
    GenerationCurveModel = _enums.EquipmentType_GenerationCurveModel
    MotorCurveModel = _enums.EquipmentType_MotorCurveModel
    LoadCurveModel = _enums.EquipmentType_LoadCurveModel
    DoubleCircuitSpacing = _enums.EquipmentType_DoubleCircuitSpacing
    Charger = _enums.EquipmentType_Charger
    DCUPS = _enums.EquipmentType_DCUPS
    DCMotor = _enums.EquipmentType_DCMotor
    Battery = _enums.EquipmentType_Battery
    DCDCConverter = _enums.EquipmentType_DCDCConverter
    DCCable = _enums.EquipmentType_DCCable
    DCLVCB = _enums.EquipmentType_DCLVCB
    DCFuse = _enums.EquipmentType_DCFuse
    DCSwitch = _enums.EquipmentType_DCSwitch
    PythonDeviceScript = _enums.EquipmentType_PythonDeviceScript
    ConductorMaterial = _enums.EquipmentType_ConductorMaterial
    InsulationMaterial = _enums.EquipmentType_InsulationMaterial
    ConverterControl = _enums.EquipmentType_ConverterControl
    BESS = _enums.EquipmentType_BESS
    def __init__(self): 
        """__init__(EquipmentType self) -> EquipmentType"""
        this = _enums.new_EquipmentType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_EquipmentType
    __del__ = lambda self : None;
EquipmentType_swigregister = _enums.EquipmentType_swigregister
EquipmentType_swigregister(EquipmentType)

class ItemType(_object):
    """Proxy of C++ ItemType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItemType, name)
    __repr__ = _swig_repr
    All = _enums.ItemType_All
    Unknown = _enums.ItemType_Unknown
    Section = _enums.ItemType_Section
    Multipoints = _enums.ItemType_Multipoints
    Failures = _enums.ItemType_Failures
    Conductor = _enums.ItemType_Conductor
    Substation = _enums.ItemType_Substation
    Regulator = _enums.ItemType_Regulator
    Transformer = _enums.ItemType_Transformer
    Motor = _enums.ItemType_Motor
    Generator = _enums.ItemType_Generator
    Cable = _enums.ItemType_Cable
    Overhead = _enums.ItemType_Overhead
    OverheadLine = _enums.ItemType_OverheadLine
    OverheadLineUnbalanced = _enums.ItemType_OverheadLineUnbalanced
    OverheadByPhase = _enums.ItemType_OverheadByPhase
    Breaker = _enums.ItemType_Breaker
    LVCB = _enums.ItemType_LVCB
    Recloser = _enums.ItemType_Recloser
    Sectionalizer = _enums.ItemType_Sectionalizer
    Switch = _enums.ItemType_Switch
    Fuse = _enums.ItemType_Fuse
    SeriesCapacitor = _enums.ItemType_SeriesCapacitor
    SeriesReactor = _enums.ItemType_SeriesReactor
    Capacitor = _enums.ItemType_Capacitor
    Load = _enums.ItemType_Load
    SpotLoad = _enums.ItemType_SpotLoad
    DistributedLoad = _enums.ItemType_DistributedLoad
    LockDistributedLoad = _enums.ItemType_LockDistributedLoad
    LockSpotLoad = _enums.ItemType_LockSpotLoad
    LockLoad = _enums.ItemType_LockLoad
    Meter = _enums.ItemType_Meter
    DisconnectSpotLoad = _enums.ItemType_DisconnectSpotLoad
    DisconnectDistributedLoad = _enums.ItemType_DisconnectDistributedLoad
    ShuntCapacitor = _enums.ItemType_ShuntCapacitor
    ShuntReactor = _enums.ItemType_ShuntReactor
    Miscellaneous = _enums.ItemType_Miscellaneous
    ArcFurnace = _enums.ItemType_ArcFurnace
    CTypeFilter = _enums.ItemType_CTypeFilter
    DoubleTunedFilter = _enums.ItemType_DoubleTunedFilter
    HighPassFilter = _enums.ItemType_HighPassFilter
    IdealConverter = _enums.ItemType_IdealConverter
    NonIdealConverter = _enums.ItemType_NonIdealConverter
    ShuntFrequencySource = _enums.ItemType_ShuntFrequencySource
    SeriesFrequencySource = _enums.ItemType_SeriesFrequencySource
    SingleTunedFilter = _enums.ItemType_SingleTunedFilter
    InductionGenerator = _enums.ItemType_InductionGenerator
    SynchronousGenerator = _enums.ItemType_SynchronousGenerator
    InductionMotor = _enums.ItemType_InductionMotor
    SynchronousMotor = _enums.ItemType_SynchronousMotor
    ThreeWindingTransformer = _enums.ItemType_ThreeWindingTransformer
    TransformerByPhase = _enums.ItemType_TransformerByPhase
    ElectronicConverterGenerator = _enums.ItemType_ElectronicConverterGenerator
    NetworkEquivalent = _enums.ItemType_NetworkEquivalent
    Node = _enums.ItemType_Node
    Bus = _enums.ItemType_Bus
    UDM = _enums.ItemType_UDM
    Wecs = _enums.ItemType_Wecs
    WindModel = _enums.ItemType_WindModel
    GroundingTransformer = _enums.ItemType_GroundingTransformer
    MicroTurbine = _enums.ItemType_MicroTurbine
    Sofc = _enums.ItemType_Sofc
    Photovoltaic = _enums.ItemType_Photovoltaic
    PotentialTransformer = _enums.ItemType_PotentialTransformer
    CurrentTransformer = _enums.ItemType_CurrentTransformer
    VoltageRelay = _enums.ItemType_VoltageRelay
    FrequencyRelay = _enums.ItemType_FrequencyRelay
    OverCurrentRelay = _enums.ItemType_OverCurrentRelay
    MotorRelay = _enums.ItemType_MotorRelay
    AutoTransformer = _enums.ItemType_AutoTransformer
    ThreeWindingAutoTransformer = _enums.ItemType_ThreeWindingAutoTransformer
    SVC = _enums.ItemType_SVC
    ShuntRLCBranch = _enums.ItemType_ShuntRLCBranch
    SeriesRLCBranch = _enums.ItemType_SeriesRLCBranch
    ShuntParallelRLCBranch = _enums.ItemType_ShuntParallelRLCBranch
    SeriesParallelRLCBranch = _enums.ItemType_SeriesParallelRLCBranch
    ShuntFrequencyDependentBranch = _enums.ItemType_ShuntFrequencyDependentBranch
    SeriesFrequencyDependentBranch = _enums.ItemType_SeriesFrequencyDependentBranch
    ShuntMutuallyCoupled3phBranch = _enums.ItemType_ShuntMutuallyCoupled3phBranch
    SeriesMutuallyCoupled3phBranch = _enums.ItemType_SeriesMutuallyCoupled3phBranch
    GenericUDM = _enums.ItemType_GenericUDM
    LoadSheddingRelayUDM = _enums.ItemType_LoadSheddingRelayUDM
    NetworkProtector = _enums.ItemType_NetworkProtector
    Busway = _enums.ItemType_Busway
    PhaseShifterTransformer = _enums.ItemType_PhaseShifterTransformer
    Statcom = _enums.ItemType_Statcom
    Upfc = _enums.ItemType_Upfc
    ImpedanceRelayUDM = _enums.ItemType_ImpedanceRelayUDM
    DcLink = _enums.ItemType_DcLink
    SwitchableShuntBank = _enums.ItemType_SwitchableShuntBank
    VariableFrequencyDrive = _enums.ItemType_VariableFrequencyDrive
    RegulatorByPhase = _enums.ItemType_RegulatorByPhase
    DoubleCircuitLine = _enums.ItemType_DoubleCircuitLine
    Charger = _enums.ItemType_Charger
    DCUPS = _enums.ItemType_DCUPS
    DCMotor = _enums.ItemType_DCMotor
    Battery = _enums.ItemType_Battery
    DCDCConverter = _enums.ItemType_DCDCConverter
    DCCable = _enums.ItemType_DCCable
    DCLoad = _enums.ItemType_DCLoad
    DCImpedance = _enums.ItemType_DCImpedance
    DCLVCB = _enums.ItemType_DCLVCB
    DCFuse = _enums.ItemType_DCFuse
    DCSwitch = _enums.ItemType_DCSwitch
    CentralizedCapacitorControlSystem = _enums.ItemType_CentralizedCapacitorControlSystem
    VoltageMeter = _enums.ItemType_VoltageMeter
    DistanceRelay = _enums.ItemType_DistanceRelay
    BESS = _enums.ItemType_BESS
    FaultIndicator = _enums.ItemType_FaultIndicator
    CustomerLoad = _enums.ItemType_CustomerLoad
    def __init__(self): 
        """__init__(ItemType self) -> ItemType"""
        this = _enums.new_ItemType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ItemType
    __del__ = lambda self : None;
ItemType_swigregister = _enums.ItemType_swigregister
ItemType_swigregister(ItemType)

class KeywordDisplayType(_object):
    """Proxy of C++ KeywordDisplayType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeywordDisplayType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeywordDisplayType, name)
    __repr__ = _swig_repr
    Unknown = _enums.KeywordDisplayType_Unknown
    Abs = _enums.KeywordDisplayType_Abs
    Real = _enums.KeywordDisplayType_Real
    Imag = _enums.KeywordDisplayType_Imag
    Conj = _enums.KeywordDisplayType_Conj
    Complex = _enums.KeywordDisplayType_Complex
    def __init__(self): 
        """__init__(KeywordDisplayType self) -> KeywordDisplayType"""
        this = _enums.new_KeywordDisplayType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_KeywordDisplayType
    __del__ = lambda self : None;
KeywordDisplayType_swigregister = _enums.KeywordDisplayType_swigregister
KeywordDisplayType_swigregister(KeywordDisplayType)

class LineConfiguration(_object):
    """Proxy of C++ LineConfiguration class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LineConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LineConfiguration, name)
    __repr__ = _swig_repr
    Cable = _enums.LineConfiguration_Cable
    OverheadLineBalanced = _enums.LineConfiguration_OverheadLineBalanced
    OverheadLineUnbalanced = _enums.LineConfiguration_OverheadLineUnbalanced
    ByPhaseConfiguration = _enums.LineConfiguration_ByPhaseConfiguration
    def __init__(self): 
        """__init__(LineConfiguration self) -> LineConfiguration"""
        this = _enums.new_LineConfiguration()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_LineConfiguration
    __del__ = lambda self : None;
LineConfiguration_swigregister = _enums.LineConfiguration_swigregister
LineConfiguration_swigregister(LineConfiguration)

class LoadNetworkOption(_object):
    """Proxy of C++ LoadNetworkOption class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadNetworkOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadNetworkOption, name)
    __repr__ = _swig_repr
    AllDependencies = _enums.LoadNetworkOption_AllDependencies
    MinimumDependencies = _enums.LoadNetworkOption_MinimumDependencies
    NoDependencies = _enums.LoadNetworkOption_NoDependencies
    def __init__(self): 
        """__init__(LoadNetworkOption self) -> LoadNetworkOption"""
        this = _enums.new_LoadNetworkOption()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_LoadNetworkOption
    __del__ = lambda self : None;
LoadNetworkOption_swigregister = _enums.LoadNetworkOption_swigregister
LoadNetworkOption_swigregister(LoadNetworkOption)

class LoadType(_object):
    """Proxy of C++ LoadType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadType, name)
    __repr__ = _swig_repr
    Spot = _enums.LoadType_Spot
    Distributed = _enums.LoadType_Distributed
    def __init__(self): 
        """__init__(LoadType self) -> LoadType"""
        this = _enums.new_LoadType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_LoadType
    __del__ = lambda self : None;
LoadType_swigregister = _enums.LoadType_swigregister
LoadType_swigregister(LoadType)

class LoadValueType(_object):
    """Proxy of C++ LoadValueType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadValueType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadValueType, name)
    __repr__ = _swig_repr
    KVA_PF = _enums.LoadValueType_KVA_PF
    AMP_PF = _enums.LoadValueType_AMP_PF
    KW_PF = _enums.LoadValueType_KW_PF
    KW_KVAR = _enums.LoadValueType_KW_KVAR
    def __init__(self): 
        """__init__(LoadValueType self) -> LoadValueType"""
        this = _enums.new_LoadValueType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_LoadValueType
    __del__ = lambda self : None;
LoadValueType_swigregister = _enums.LoadValueType_swigregister
LoadValueType_swigregister(LoadValueType)

class Location(_object):
    """Proxy of C++ CymPyLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr
    FirstAvailable = _enums.Location_FirstAvailable
    From = _enums.Location_From
    Middle = _enums.Location_Middle
    To = _enums.Location_To
    def __init__(self): 
        """__init__(CymPyLocation self) -> Location"""
        this = _enums.new_Location()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_Location
    __del__ = lambda self : None;
Location_swigregister = _enums.Location_swigregister
Location_swigregister(Location)

class IterationOption(_object):
    """Proxy of C++ IterationOption class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterationOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IterationOption, name)
    __repr__ = _swig_repr
    NotOriented = _enums.IterationOption_NotOriented
    Downstream = _enums.IterationOption_Downstream
    Upstream = _enums.IterationOption_Upstream
    AllOrientation = _enums.IterationOption_AllOrientation
    LevelOrder = _enums.IterationOption_LevelOrder
    DistanceOrder = _enums.IterationOption_DistanceOrder
    ByPhase = _enums.IterationOption_ByPhase
    IgnorePhaseMerging = _enums.IterationOption_IgnorePhaseMerging
    def __init__(self): 
        """__init__(IterationOption self) -> IterationOption"""
        this = _enums.new_IterationOption()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_IterationOption
    __del__ = lambda self : None;
IterationOption_swigregister = _enums.IterationOption_swigregister
IterationOption_swigregister(IterationOption)

class IterationRestriction(_object):
    """Proxy of C++ IterationRestriction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IterationRestriction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IterationRestriction, name)
    __repr__ = _swig_repr
    NoRestriction = _enums.IterationRestriction_NoRestriction
    SameTopo = _enums.IterationRestriction_SameTopo
    SameStruct = _enums.IterationRestriction_SameStruct
    ConnectedPhase = _enums.IterationRestriction_ConnectedPhase
    DisconnectedPhase = _enums.IterationRestriction_DisconnectedPhase
    StopOnOpen = _enums.IterationRestriction_StopOnOpen
    IncludeTieTopo = _enums.IterationRestriction_IncludeTieTopo
    IncludeInterTopo = _enums.IterationRestriction_IncludeInterTopo
    StayOnMain = _enums.IterationRestriction_StayOnMain
    ByPassCommonPhase = _enums.IterationRestriction_ByPassCommonPhase
    def __init__(self): 
        """__init__(IterationRestriction self) -> IterationRestriction"""
        this = _enums.new_IterationRestriction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_IterationRestriction
    __del__ = lambda self : None;
IterationRestriction_swigregister = _enums.IterationRestriction_swigregister
IterationRestriction_swigregister(IterationRestriction)

class NetworkType(_object):
    """Proxy of C++ NetworkType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkType, name)
    __repr__ = _swig_repr
    All = _enums.NetworkType_All
    Feeder = _enums.NetworkType_Feeder
    Substation = _enums.NetworkType_Substation
    SecondaryNetwork = _enums.NetworkType_SecondaryNetwork
    TransmissionLine = _enums.NetworkType_TransmissionLine
    GeneralNetwork = _enums.NetworkType_GeneralNetwork
    LowVoltageNetwork = _enums.NetworkType_LowVoltageNetwork
    DCNetwork = _enums.NetworkType_DCNetwork
    def __init__(self): 
        """__init__(NetworkType self) -> NetworkType"""
        this = _enums.new_NetworkType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_NetworkType
    __del__ = lambda self : None;
NetworkType_swigregister = _enums.NetworkType_swigregister
NetworkType_swigregister(NetworkType)

class NodeType(_object):
    """Proxy of C++ NodeType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeType, name)
    __repr__ = _swig_repr
    All = _enums.NodeType_All
    Node = _enums.NodeType_Node
    Tie = _enums.NodeType_Tie
    Bus = _enums.NodeType_Bus
    Loop = _enums.NodeType_Loop
    PhaseMerging = _enums.NodeType_PhaseMerging
    Interconnection = _enums.NodeType_Interconnection
    SourceNode = _enums.NodeType_SourceNode
    Shunt = _enums.NodeType_Shunt
    Stub = _enums.NodeType_Stub
    Unconnected = _enums.NodeType_Unconnected
    DifferentWires = _enums.NodeType_DifferentWires
    def __init__(self): 
        """__init__(NodeType self) -> NodeType"""
        this = _enums.new_NodeType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_NodeType
    __del__ = lambda self : None;
NodeType_swigregister = _enums.NodeType_swigregister
NodeType_swigregister(NodeType)

class Phase(_object):
    """Proxy of C++ PyPhase class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Phase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Phase, name)
    __repr__ = _swig_repr
    All = _enums.Phase_All
    PhaseNone = _enums.Phase_PhaseNone
    A = _enums.Phase_A
    B = _enums.Phase_B
    C = _enums.Phase_C
    AB = _enums.Phase_AB
    AC = _enums.Phase_AC
    BC = _enums.Phase_BC
    ABC = _enums.Phase_ABC
    def __init__(self): 
        """__init__(PyPhase self) -> Phase"""
        this = _enums.new_Phase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_Phase
    __del__ = lambda self : None;
Phase_swigregister = _enums.Phase_swigregister
Phase_swigregister(Phase)

class ReportCellType(_object):
    """Proxy of C++ ReportCellType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportCellType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportCellType, name)
    __repr__ = _swig_repr
    IntCell = _enums.ReportCellType_IntCell
    FloatCell = _enums.ReportCellType_FloatCell
    BooleanCell = _enums.ReportCellType_BooleanCell
    StringCell = _enums.ReportCellType_StringCell
    CommandCell = _enums.ReportCellType_CommandCell
    NodeCell = _enums.ReportCellType_NodeCell
    SectionCell = _enums.ReportCellType_SectionCell
    DeviceCell = _enums.ReportCellType_DeviceCell
    NetworkCell = _enums.ReportCellType_NetworkCell
    def __init__(self): 
        """__init__(ReportCellType self) -> ReportCellType"""
        this = _enums.new_ReportCellType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ReportCellType
    __del__ = lambda self : None;
ReportCellType_swigregister = _enums.ReportCellType_swigregister
ReportCellType_swigregister(ReportCellType)

class ReportModeType(_object):
    """Proxy of C++ ReportModeType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportModeType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportModeType, name)
    __repr__ = _swig_repr
    AsDefined = _enums.ReportModeType_AsDefined
    CYMESpreadsheet = _enums.ReportModeType_CYMESpreadsheet
    XML = _enums.ReportModeType_XML
    MSExcel = _enums.ReportModeType_MSExcel
    MSAccess = _enums.ReportModeType_MSAccess
    HTML = _enums.ReportModeType_HTML
    def __init__(self): 
        """__init__(ReportModeType self) -> ReportModeType"""
        this = _enums.new_ReportModeType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ReportModeType
    __del__ = lambda self : None;
ReportModeType_swigregister = _enums.ReportModeType_swigregister
ReportModeType_swigregister(ReportModeType)

class SectionState(_object):
    """Proxy of C++ SectionState class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SectionState, name)
    __repr__ = _swig_repr
    All = _enums.SectionState_All
    Disconnected = _enums.SectionState_Disconnected
    Isolated = _enums.SectionState_Isolated
    def __init__(self): 
        """__init__(SectionState self) -> SectionState"""
        this = _enums.new_SectionState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_SectionState
    __del__ = lambda self : None;
SectionState_swigregister = _enums.SectionState_swigregister
SectionState_swigregister(SectionState)

class Severity(_object):
    """Proxy of C++ Severity class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Severity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Severity, name)
    __repr__ = _swig_repr
    All = _enums.Severity_All
    Information = _enums.Severity_Information
    Warning = _enums.Severity_Warning
    Error = _enums.Severity_Error
    Hint = _enums.Severity_Hint
    def __init__(self): 
        """__init__(Severity self) -> Severity"""
        this = _enums.new_Severity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_Severity
    __del__ = lambda self : None;
Severity_swigregister = _enums.Severity_swigregister
Severity_swigregister(Severity)

class SimulationType(_object):
    """Proxy of C++ SimulationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationType, name)
    __repr__ = _swig_repr
    Unknown = _enums.SimulationType_Unknown
    LoadFlow = _enums.SimulationType_LoadFlow
    ShortCircuitConventional = _enums.SimulationType_ShortCircuitConventional
    ShortCircuitANSI = _enums.SimulationType_ShortCircuitANSI
    ShortCircuitIEC = _enums.SimulationType_ShortCircuitIEC
    LoadAllocation = _enums.SimulationType_LoadAllocation
    VVO = _enums.SimulationType_VVO
    Harmonic = _enums.SimulationType_Harmonic
    RAM = _enums.SimulationType_RAM
    CAM = _enums.SimulationType_CAM
    ArcFlash = _enums.SimulationType_ArcFlash
    OPF = _enums.SimulationType_OPF
    CapacitorPlacement = _enums.SimulationType_CapacitorPlacement
    DynamicMotorStart = _enums.SimulationType_DynamicMotorStart
    LockedRotor = _enums.SimulationType_LockedRotor
    MaximumStartSize = _enums.SimulationType_MaximumStartSize
    LoadFlowWithProfiles = _enums.SimulationType_LoadFlowWithProfiles
    EquipmentRatingVerification = _enums.SimulationType_EquipmentRatingVerification
    DCArcFlash = _enums.SimulationType_DCArcFlash
    FaultLocator = _enums.SimulationType_FaultLocator
    MinimumFault = _enums.SimulationType_MinimumFault
    ProtectiveDeviceAnalysis = _enums.SimulationType_ProtectiveDeviceAnalysis
    DistributionStateEstimator = _enums.SimulationType_DistributionStateEstimator
    ShortCircuitIEC61363 = _enums.SimulationType_ShortCircuitIEC61363
    VoltageSag = _enums.SimulationType_VoltageSag
    DCShortCircuit = _enums.SimulationType_DCShortCircuit
    DCLoadFlow = _enums.SimulationType_DCLoadFlow
    NetworkConfigurationOptimization = _enums.SimulationType_NetworkConfigurationOptimization
    SimultaneousFault = _enums.SimulationType_SimultaneousFault
    EnergyConfinement = _enums.SimulationType_EnergyConfinement
    InstantaneousProtection = _enums.SimulationType_InstantaneousProtection
    TransientStability = _enums.SimulationType_TransientStability
    IntegrationCapacityAnalysis = _enums.SimulationType_IntegrationCapacityAnalysis
    DERImpactEvaluation = _enums.SimulationType_DERImpactEvaluation
    def __init__(self): 
        """__init__(SimulationType self) -> SimulationType"""
        this = _enums.new_SimulationType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_SimulationType
    __del__ = lambda self : None;
SimulationType_swigregister = _enums.SimulationType_swigregister
SimulationType_swigregister(SimulationType)

class StudyState(_object):
    """Proxy of C++ StudyState class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StudyState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StudyState, name)
    __repr__ = _swig_repr
    Unknown = _enums.StudyState_Unknown
    Closed = _enums.StudyState_Closed
    Open = _enums.StudyState_Open
    def __init__(self): 
        """__init__(StudyState self) -> StudyState"""
        this = _enums.new_StudyState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_StudyState
    __del__ = lambda self : None;
StudyState_swigregister = _enums.StudyState_swigregister
StudyState_swigregister(StudyState)

class ArcFlashMode(_object):
    """Proxy of C++ ArcFlashMode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcFlashMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArcFlashMode, name)
    __repr__ = _swig_repr
    Distribution = _enums.ArcFlashMode_Distribution
    Industrial = _enums.ArcFlashMode_Industrial
    def __init__(self): 
        """__init__(ArcFlashMode self) -> ArcFlashMode"""
        this = _enums.new_ArcFlashMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ArcFlashMode
    __del__ = lambda self : None;
ArcFlashMode_swigregister = _enums.ArcFlashMode_swigregister
ArcFlashMode_swigregister(ArcFlashMode)

class ImageFormat(_object):
    """Proxy of C++ ImageFormat class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageFormat, name)
    __repr__ = _swig_repr
    Bmp = _enums.ImageFormat_Bmp
    Jpeg = _enums.ImageFormat_Jpeg
    Png = _enums.ImageFormat_Png
    def __init__(self): 
        """__init__(ImageFormat self) -> ImageFormat"""
        this = _enums.new_ImageFormat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ImageFormat
    __del__ = lambda self : None;
ImageFormat_swigregister = _enums.ImageFormat_swigregister
ImageFormat_swigregister(ImageFormat)

class InstrumentType(_object):
    """Proxy of C++ InstrumentType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstrumentType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstrumentType, name)
    __repr__ = _swig_repr
    Unknown = _enums.InstrumentType_Unknown
    AllInstruments = _enums.InstrumentType_AllInstruments
    PotentialTransformer = _enums.InstrumentType_PotentialTransformer
    CurrentTransformer = _enums.InstrumentType_CurrentTransformer
    VoltageRelay = _enums.InstrumentType_VoltageRelay
    FrequencyRelay = _enums.InstrumentType_FrequencyRelay
    OverCurrentRelay = _enums.InstrumentType_OverCurrentRelay
    MotorRelay = _enums.InstrumentType_MotorRelay
    GenericUDM = _enums.InstrumentType_GenericUDM
    LoadSheddingRelayUDM = _enums.InstrumentType_LoadSheddingRelayUDM
    ImpedanceRelayUDM = _enums.InstrumentType_ImpedanceRelayUDM
    CentralizedCapacitorControlSystem = _enums.InstrumentType_CentralizedCapacitorControlSystem
    VoltageMeter = _enums.InstrumentType_VoltageMeter
    DistanceRelay = _enums.InstrumentType_DistanceRelay
    FaultIndicator = _enums.InstrumentType_FaultIndicator
    def __init__(self): 
        """__init__(InstrumentType self) -> InstrumentType"""
        this = _enums.new_InstrumentType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_InstrumentType
    __del__ = lambda self : None;
InstrumentType_swigregister = _enums.InstrumentType_swigregister
InstrumentType_swigregister(InstrumentType)

class GrowthFactorMethod(_object):
    """Proxy of C++ GrowthFactorMethod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrowthFactorMethod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GrowthFactorMethod, name)
    __repr__ = _swig_repr
    General = _enums.GrowthFactorMethod_General
    UserDefined = _enums.GrowthFactorMethod_UserDefined
    def __init__(self): 
        """__init__(GrowthFactorMethod self) -> GrowthFactorMethod"""
        this = _enums.new_GrowthFactorMethod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_GrowthFactorMethod
    __del__ = lambda self : None;
GrowthFactorMethod_swigregister = _enums.GrowthFactorMethod_swigregister
GrowthFactorMethod_swigregister(GrowthFactorMethod)

class GeneralGrowthPeriod(_object):
    """Proxy of C++ GeneralGrowthPeriod class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeneralGrowthPeriod, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeneralGrowthPeriod, name)
    __repr__ = _swig_repr
    Total = _enums.GeneralGrowthPeriod_Total
    PerYear = _enums.GeneralGrowthPeriod_PerYear
    def __init__(self): 
        """__init__(GeneralGrowthPeriod self) -> GeneralGrowthPeriod"""
        this = _enums.new_GeneralGrowthPeriod()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_GeneralGrowthPeriod
    __del__ = lambda self : None;
GeneralGrowthPeriod_swigregister = _enums.GeneralGrowthPeriod_swigregister
GeneralGrowthPeriod_swigregister(GeneralGrowthPeriod)

class EquivalentCalculationType(_object):
    """Proxy of C++ EquivalentCalculationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquivalentCalculationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EquivalentCalculationType, name)
    __repr__ = _swig_repr
    EntireDatabase = _enums.EquivalentCalculationType_EntireDatabase
    MemoryNetwork = _enums.EquivalentCalculationType_MemoryNetwork
    def __init__(self): 
        """__init__(EquivalentCalculationType self) -> EquivalentCalculationType"""
        this = _enums.new_EquivalentCalculationType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_EquivalentCalculationType
    __del__ = lambda self : None;
EquivalentCalculationType_swigregister = _enums.EquivalentCalculationType_swigregister
EquivalentCalculationType_swigregister(EquivalentCalculationType)

class FaultType(_object):
    """Proxy of C++ PyFaultType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaultType, name)
    __repr__ = _swig_repr
    LLL = _enums.FaultType_LLL
    LLG = _enums.FaultType_LLG
    LL = _enums.FaultType_LL
    LG = _enums.FaultType_LG
    LLLG = _enums.FaultType_LLLG
    OnePhaseOpen = _enums.FaultType_OnePhaseOpen
    TwoPhasesOpen = _enums.FaultType_TwoPhasesOpen
    AsymmetricalImpedance = _enums.FaultType_AsymmetricalImpedance
    ALL_ShuntFault = _enums.FaultType_ALL_ShuntFault
    ALL_SeriesFault = _enums.FaultType_ALL_SeriesFault
    ALL = _enums.FaultType_ALL
    InterCircuitNone = _enums.FaultType_InterCircuitNone
    def __init__(self): 
        """__init__(PyFaultType self) -> FaultType"""
        this = _enums.new_FaultType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_FaultType
    __del__ = lambda self : None;
FaultType_swigregister = _enums.FaultType_swigregister
FaultType_swigregister(FaultType)

class ExportOLDType(_object):
    """Proxy of C++ ExportOLDType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExportOLDType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExportOLDType, name)
    __repr__ = _swig_repr
    AutoCAD_2013_DXF = _enums.ExportOLDType_AutoCAD_2013_DXF
    AutoCAD_2013_DWG = _enums.ExportOLDType_AutoCAD_2013_DWG
    AutoCAD_2010_DXF = _enums.ExportOLDType_AutoCAD_2010_DXF
    AutoCAD_2010_DWG = _enums.ExportOLDType_AutoCAD_2010_DWG
    AutoCAD_2007_DXF = _enums.ExportOLDType_AutoCAD_2007_DXF
    AutoCAD_2007_DWG = _enums.ExportOLDType_AutoCAD_2007_DWG
    AutoCAD_2004_DXF = _enums.ExportOLDType_AutoCAD_2004_DXF
    AutoCAD_2004_DWG = _enums.ExportOLDType_AutoCAD_2004_DWG
    AutoCAD_2000_DXF = _enums.ExportOLDType_AutoCAD_2000_DXF
    AutoCAD_2000_DWG = _enums.ExportOLDType_AutoCAD_2000_DWG
    AutoCAD_R14_DXF = _enums.ExportOLDType_AutoCAD_R14_DXF
    AutoCAD_R14_DWG = _enums.ExportOLDType_AutoCAD_R14_DWG
    AutoCAD_R13_DXF = _enums.ExportOLDType_AutoCAD_R13_DXF
    AutoCAD_R13_DWG = _enums.ExportOLDType_AutoCAD_R13_DWG
    KML = _enums.ExportOLDType_KML
    KMZ = _enums.ExportOLDType_KMZ
    PDF = _enums.ExportOLDType_PDF
    SHP = _enums.ExportOLDType_SHP
    SVG = _enums.ExportOLDType_SVG
    SVGZ = _enums.ExportOLDType_SVGZ
    def __init__(self): 
        """__init__(ExportOLDType self) -> ExportOLDType"""
        this = _enums.new_ExportOLDType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ExportOLDType
    __del__ = lambda self : None;
ExportOLDType_swigregister = _enums.ExportOLDType_swigregister
ExportOLDType_swigregister(ExportOLDType)

class SectionOrientationMode(_object):
    """Proxy of C++ SectionOrientationMode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionOrientationMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SectionOrientationMode, name)
    __repr__ = _swig_repr
    NoOrientation = _enums.SectionOrientationMode_NoOrientation
    UseDefaultLength = _enums.SectionOrientationMode_UseDefaultLength
    UseCustomLength = _enums.SectionOrientationMode_UseCustomLength
    def __init__(self): 
        """__init__(SectionOrientationMode self) -> SectionOrientationMode"""
        this = _enums.new_SectionOrientationMode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_SectionOrientationMode
    __del__ = lambda self : None;
SectionOrientationMode_swigregister = _enums.SectionOrientationMode_swigregister
SectionOrientationMode_swigregister(SectionOrientationMode)

class ConversionType(_object):
    """Proxy of C++ ConversionType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConversionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConversionType, name)
    __repr__ = _swig_repr
    Device = _enums.ConversionType_Device
    Item = _enums.ConversionType_Item
    Instrument = _enums.ConversionType_Instrument
    Equipment = _enums.ConversionType_Equipment
    def __init__(self): 
        """__init__(ConversionType self) -> ConversionType"""
        this = _enums.new_ConversionType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ConversionType
    __del__ = lambda self : None;
ConversionType_swigregister = _enums.ConversionType_swigregister
ConversionType_swigregister(ConversionType)

class DeleteSectionOption(_object):
    """Proxy of C++ DeleteSectionOption class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeleteSectionOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeleteSectionOption, name)
    __repr__ = _swig_repr
    SectionOnly = _enums.DeleteSectionOption_SectionOnly
    DeleteDownstream = _enums.DeleteSectionOption_DeleteDownstream
    ReconnectDownstream = _enums.DeleteSectionOption_ReconnectDownstream
    def __init__(self): 
        """__init__(DeleteSectionOption self) -> DeleteSectionOption"""
        this = _enums.new_DeleteSectionOption()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_DeleteSectionOption
    __del__ = lambda self : None;
DeleteSectionOption_swigregister = _enums.DeleteSectionOption_swigregister
DeleteSectionOption_swigregister(DeleteSectionOption)

class FaultLocationType(_object):
    """Proxy of C++ FaultLocationType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultLocationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaultLocationType, name)
    __repr__ = _swig_repr
    Shunt = _enums.FaultLocationType_Shunt
    Series = _enums.FaultLocationType_Series
    InterCircuits = _enums.FaultLocationType_InterCircuits
    def __init__(self): 
        """__init__(FaultLocationType self) -> FaultLocationType"""
        this = _enums.new_FaultLocationType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_FaultLocationType
    __del__ = lambda self : None;
FaultLocationType_swigregister = _enums.FaultLocationType_swigregister
FaultLocationType_swigregister(FaultLocationType)

class OutageType(_object):
    """Proxy of C++ PyOutageType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutageType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutageType, name)
    __repr__ = _swig_repr
    Substation = _enums.OutageType_Substation
    Feeder = _enums.OutageType_Feeder
    Section = _enums.OutageType_Section
    SwitchingDevices = _enums.OutageType_SwitchingDevices
    Fuse = _enums.OutageType_Fuse
    Recloser = _enums.OutageType_Recloser
    Sectionalizer = _enums.OutageType_Sectionalizer
    Breaker = _enums.OutageType_Breaker
    LVCB = _enums.OutageType_LVCB
    TwoWindingTransformer = _enums.OutageType_TwoWindingTransformer
    ThreeWindingTransformer = _enums.OutageType_ThreeWindingTransformer
    def __init__(self): 
        """__init__(PyOutageType self) -> OutageType"""
        this = _enums.new_OutageType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_OutageType
    __del__ = lambda self : None;
OutageType_swigregister = _enums.OutageType_swigregister
OutageType_swigregister(OutageType)

class OutageState(_object):
    """Proxy of C++ PyOutageState class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutageState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutageState, name)
    __repr__ = _swig_repr
    InvalidOutageState = _enums.OutageState_InvalidOutageState
    PartialRestoration = _enums.OutageState_PartialRestoration
    CompleteRestoration = _enums.OutageState_CompleteRestoration
    def __init__(self): 
        """__init__(PyOutageState self) -> OutageState"""
        this = _enums.new_OutageState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_OutageState
    __del__ = lambda self : None;
OutageState_swigregister = _enums.OutageState_swigregister
OutageState_swigregister(OutageState)

class FlagLevel(_object):
    """Proxy of C++ FlagLevel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlagLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FlagLevel, name)
    __repr__ = _swig_repr
    Custom = _enums.FlagLevel_Custom
    Level1 = _enums.FlagLevel_Level1
    Level2 = _enums.FlagLevel_Level2
    Level3 = _enums.FlagLevel_Level3
    Level4 = _enums.FlagLevel_Level4
    Level5 = _enums.FlagLevel_Level5
    def __init__(self): 
        """__init__(FlagLevel self) -> FlagLevel"""
        this = _enums.new_FlagLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_FlagLevel
    __del__ = lambda self : None;
FlagLevel_swigregister = _enums.FlagLevel_swigregister
FlagLevel_swigregister(FlagLevel)

class StageType(_object):
    """Proxy of C++ StageType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StageType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StageType, name)
    __repr__ = _swig_repr
    Normal = _enums.StageType_Normal
    Stage1 = _enums.StageType_Stage1
    Stage2 = _enums.StageType_Stage2
    def __init__(self): 
        """__init__(StageType self) -> StageType"""
        this = _enums.new_StageType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_StageType
    __del__ = lambda self : None;
StageType_swigregister = _enums.StageType_swigregister
StageType_swigregister(StageType)

class DataValidationOption(_object):
    """Proxy of C++ DataValidationOption class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataValidationOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataValidationOption, name)
    __repr__ = _swig_repr
    NoValidation = _enums.DataValidationOption_NoValidation
    AllowChangePrimaryKey = _enums.DataValidationOption_AllowChangePrimaryKey
    CreateSubObjects = _enums.DataValidationOption_CreateSubObjects
    Default = _enums.DataValidationOption_Default
    def __init__(self): 
        """__init__(DataValidationOption self) -> DataValidationOption"""
        this = _enums.new_DataValidationOption()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_DataValidationOption
    __del__ = lambda self : None;
DataValidationOption_swigregister = _enums.DataValidationOption_swigregister
DataValidationOption_swigregister(DataValidationOption)

class PhaseType(_object):
    """Proxy of C++ PyPhaseType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhaseType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PhaseType, name)
    __repr__ = _swig_repr
    SinglePhase = _enums.PhaseType_SinglePhase
    ThreePhase = _enums.PhaseType_ThreePhase
    def __init__(self): 
        """__init__(PyPhaseType self) -> PhaseType"""
        this = _enums.new_PhaseType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_PhaseType
    __del__ = lambda self : None;
PhaseType_swigregister = _enums.PhaseType_swigregister
PhaseType_swigregister(PhaseType)

class SymbolStatus(_object):
    """Proxy of C++ SymbolStatus class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolStatus, name)
    __repr__ = _swig_repr
    Undefined = _enums.SymbolStatus_Undefined
    Open = _enums.SymbolStatus_Open
    Close = _enums.SymbolStatus_Close
    def __init__(self): 
        """__init__(SymbolStatus self) -> SymbolStatus"""
        this = _enums.new_SymbolStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_SymbolStatus
    __del__ = lambda self : None;
SymbolStatus_swigregister = _enums.SymbolStatus_swigregister
SymbolStatus_swigregister(SymbolStatus)

class SwitchStatus(_object):
    """Proxy of C++ SwitchStatus class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchStatus, name)
    __repr__ = _swig_repr
    Open = _enums.SwitchStatus_Open
    Closed = _enums.SwitchStatus_Closed
    def __init__(self): 
        """__init__(SwitchStatus self) -> SwitchStatus"""
        this = _enums.new_SwitchStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_SwitchStatus
    __del__ = lambda self : None;
SwitchStatus_swigregister = _enums.SwitchStatus_swigregister
SwitchStatus_swigregister(SwitchStatus)

class ChartAnalysisContext(_object):
    """Proxy of C++ ChartAnalysisContext class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChartAnalysisContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChartAnalysisContext, name)
    __repr__ = _swig_repr
    Undefined = _enums.ChartAnalysisContext_Undefined
    LoadFlow = _enums.ChartAnalysisContext_LoadFlow
    DCLoadFlow = _enums.ChartAnalysisContext_DCLoadFlow
    ShortCircuit = _enums.ChartAnalysisContext_ShortCircuit
    DCShortCircuit = _enums.ChartAnalysisContext_DCShortCircuit
    DistributionStateEstimator = _enums.ChartAnalysisContext_DistributionStateEstimator
    ShortCircuitIEC61363 = _enums.ChartAnalysisContext_ShortCircuitIEC61363
    Harmonic = _enums.ChartAnalysisContext_Harmonic
    TransientStability = _enums.ChartAnalysisContext_TransientStability
    DynamicMotorStart = _enums.ChartAnalysisContext_DynamicMotorStart
    VoltageStability = _enums.ChartAnalysisContext_VoltageStability
    LongTermDynamics = _enums.ChartAnalysisContext_LongTermDynamics
    VoltVarOptimization = _enums.ChartAnalysisContext_VoltVarOptimization
    ArcFlash = _enums.ChartAnalysisContext_ArcFlash
    DCArcFlash = _enums.ChartAnalysisContext_DCArcFlash
    IntegrationCapacity = _enums.ChartAnalysisContext_IntegrationCapacity
    EPRIDrive = _enums.ChartAnalysisContext_EPRIDrive
    def __init__(self): 
        """__init__(ChartAnalysisContext self) -> ChartAnalysisContext"""
        this = _enums.new_ChartAnalysisContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ChartAnalysisContext
    __del__ = lambda self : None;
ChartAnalysisContext_swigregister = _enums.ChartAnalysisContext_swigregister
ChartAnalysisContext_swigregister(ChartAnalysisContext)

class UnitCategory(_object):
    """Proxy of C++ UnitCategory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitCategory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitCategory, name)
    __repr__ = _swig_repr
    Undefined = _enums.UnitCategory_Undefined
    Length = _enums.UnitCategory_Length
    Impedance = _enums.UnitCategory_Impedance
    LinearImpedance = _enums.UnitCategory_LinearImpedance
    Inductance = _enums.UnitCategory_Inductance
    LinearInductance = _enums.UnitCategory_LinearInductance
    Admittance = _enums.UnitCategory_Admittance
    LinearAdmittance = _enums.UnitCategory_LinearAdmittance
    Capacitance = _enums.UnitCategory_Capacitance
    Resistivity = _enums.UnitCategory_Resistivity
    Voltage = _enums.UnitCategory_Voltage
    VoltageLL = _enums.UnitCategory_VoltageLL
    VoltageLN = _enums.UnitCategory_VoltageLN
    Current = _enums.UnitCategory_Current
    ActivePower = _enums.UnitCategory_ActivePower
    ReactivePower = _enums.UnitCategory_ReactivePower
    ApparentPower = _enums.UnitCategory_ApparentPower
    PerUnit = _enums.UnitCategory_PerUnit
    Percentage = _enums.UnitCategory_Percentage
    Time = _enums.UnitCategory_Time
    Speed = _enums.UnitCategory_Speed
    Temperature = _enums.UnitCategory_Temperature
    Torque = _enums.UnitCategory_Torque
    Inertia = _enums.UnitCategory_Inertia
    Frequency = _enums.UnitCategory_Frequency
    TorsionConstant = _enums.UnitCategory_TorsionConstant
    InterruptionPerYear = _enums.UnitCategory_InterruptionPerYear
    Angle = _enums.UnitCategory_Angle
    Currency = _enums.UnitCategory_Currency
    LinearInterruptionPerYear = _enums.UnitCategory_LinearInterruptionPerYear
    Consumption = _enums.UnitCategory_Consumption
    Insolation = _enums.UnitCategory_Insolation
    Area = _enums.UnitCategory_Area
    Charge = _enums.UnitCategory_Charge
    Energy = _enums.UnitCategory_Energy
    PercentagePerTime = _enums.UnitCategory_PercentagePerTime
    ControlRatio = _enums.UnitCategory_ControlRatio
    def __init__(self): 
        """__init__(UnitCategory self) -> UnitCategory"""
        this = _enums.new_UnitCategory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_UnitCategory
    __del__ = lambda self : None;
UnitCategory_swigregister = _enums.UnitCategory_swigregister
UnitCategory_swigregister(UnitCategory)

class UnitType(_object):
    """Proxy of C++ UnitType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitType, name)
    __repr__ = _swig_repr
    Custom = _enums.UnitType_Custom
    Undefined = _enums.UnitType_Undefined
    Length = _enums.UnitType_Length
    SmallLength_mm = _enums.UnitType_SmallLength_mm
    SmallLength_cm = _enums.UnitType_SmallLength_cm
    Length_m = _enums.UnitType_Length_m
    MediumLength_m = _enums.UnitType_MediumLength_m
    LongLength_km = _enums.UnitType_LongLength_km
    Impedance = _enums.UnitType_Impedance
    Admittance_uS = _enums.UnitType_Admittance_uS
    Capacitance_uF = _enums.UnitType_Capacitance_uF
    Impedance_mOhms = _enums.UnitType_Impedance_mOhms
    Inductance_mH = _enums.UnitType_Inductance_mH
    Impedance_ohms = _enums.UnitType_Impedance_ohms
    Admittance_S = _enums.UnitType_Admittance_S
    LinearAdmittance_uSkm = _enums.UnitType_LinearAdmittance_uSkm
    LinearInductance_mHkm = _enums.UnitType_LinearInductance_mHkm
    LinearImpedance_ohmskm = _enums.UnitType_LinearImpedance_ohmskm
    E8Ohm_m = _enums.UnitType_E8Ohm_m
    Ohm_m = _enums.UnitType_Ohm_m
    Voltage = _enums.UnitType_Voltage
    Voltage_V = _enums.UnitType_Voltage_V
    Voltage_kV = _enums.UnitType_Voltage_kV
    Voltage_VLL = _enums.UnitType_Voltage_VLL
    Voltage_kVLL = _enums.UnitType_Voltage_kVLL
    Voltage_VLN = _enums.UnitType_Voltage_VLN
    Voltage_kVLN = _enums.UnitType_Voltage_kVLN
    CurrentPower = _enums.UnitType_CurrentPower
    Current_Amps = _enums.UnitType_Current_Amps
    Current_kA = _enums.UnitType_Current_kA
    RealPower_W = _enums.UnitType_RealPower_W
    RealPower_kW = _enums.UnitType_RealPower_kW
    RealPower_MW = _enums.UnitType_RealPower_MW
    ReactivePower_var = _enums.UnitType_ReactivePower_var
    ReactivePower_kVAR = _enums.UnitType_ReactivePower_kVAR
    ReactivePower_MVAR = _enums.UnitType_ReactivePower_MVAR
    ApparentPower_kVA = _enums.UnitType_ApparentPower_kVA
    ApparentPower_MVA = _enums.UnitType_ApparentPower_MVA
    LinearActivePower_WattsPerMeter = _enums.UnitType_LinearActivePower_WattsPerMeter
    Power_hp = _enums.UnitType_Power_hp
    FirstPercentage = _enums.UnitType_FirstPercentage
    PerUnit_pu = _enums.UnitType_PerUnit_pu
    Percentage = _enums.UnitType_Percentage
    PowerFactor = _enums.UnitType_PowerFactor
    Time = _enums.UnitType_Time
    MilliSeconds_ms = _enums.UnitType_MilliSeconds_ms
    Cycle_cycle = _enums.UnitType_Cycle_cycle
    Seconds_s = _enums.UnitType_Seconds_s
    Minutes_min = _enums.UnitType_Minutes_min
    Hours_h = _enums.UnitType_Hours_h
    Frequency_Hz = _enums.UnitType_Frequency_Hz
    Misc = _enums.UnitType_Misc
    Temperature_C = _enums.UnitType_Temperature_C
    Torque_Nm = _enums.UnitType_Torque_Nm
    Inertia_kgm2 = _enums.UnitType_Inertia_kgm2
    Speed_ms = _enums.UnitType_Speed_ms
    RotationSpeed_RPM = _enums.UnitType_RotationSpeed_RPM
    NmPerRad = _enums.UnitType_NmPerRad
    Money_Dollar = _enums.UnitType_Money_Dollar
    Money_kDollar = _enums.UnitType_Money_kDollar
    Money_MDollar = _enums.UnitType_Money_MDollar
    Angle_Degree = _enums.UnitType_Angle_Degree
    Rate_InterPerYear = _enums.UnitType_Rate_InterPerYear
    Rate_InterPerYearPerKm = _enums.UnitType_Rate_InterPerYearPerKm
    Insolation_Wm2 = _enums.UnitType_Insolation_Wm2
    CircularArea_mm2 = _enums.UnitType_CircularArea_mm2
    Charge_Ah = _enums.UnitType_Charge_Ah
    Consumption_kWh = _enums.UnitType_Consumption_kWh
    ConnectedCapacity_kVA = _enums.UnitType_ConnectedCapacity_kVA
    Energy_kJ = _enums.UnitType_Energy_kJ
    PercentPerYear = _enums.UnitType_PercentPerYear
    ControlRatio_VoltPerHz = _enums.UnitType_ControlRatio_VoltPerHz
    def __init__(self): 
        """__init__(UnitType self) -> UnitType"""
        this = _enums.new_UnitType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_UnitType
    __del__ = lambda self : None;
UnitType_swigregister = _enums.UnitType_swigregister
UnitType_swigregister(UnitType)

class ProtectionType(_object):
    """Proxy of C++ ProtectionType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtectionType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProtectionType, name)
    __repr__ = _swig_repr
    Phase = _enums.ProtectionType_Phase
    Ground = _enums.ProtectionType_Ground
    PhaseFast = _enums.ProtectionType_PhaseFast
    PhaseSlow = _enums.ProtectionType_PhaseSlow
    GroundFast = _enums.ProtectionType_GroundFast
    GroundSlow = _enums.ProtectionType_GroundSlow
    PhaseAndGround = _enums.ProtectionType_PhaseAndGround
    def __init__(self): 
        """__init__(ProtectionType self) -> ProtectionType"""
        this = _enums.new_ProtectionType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ProtectionType
    __del__ = lambda self : None;
ProtectionType_swigregister = _enums.ProtectionType_swigregister
ProtectionType_swigregister(ProtectionType)

class ParameterType(_object):
    """Proxy of C++ ParameterType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterType, name)
    __repr__ = _swig_repr
    Text = _enums.ParameterType_Text
    Numeric = _enums.ParameterType_Numeric
    Boolean = _enums.ParameterType_Boolean
    FilePath = _enums.ParameterType_FilePath
    def __init__(self): 
        """__init__(ParameterType self) -> ParameterType"""
        this = _enums.new_ParameterType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _enums.delete_ParameterType
    __del__ = lambda self : None;
ParameterType_swigregister = _enums.ParameterType_swigregister
ParameterType_swigregister(ParameterType)

# This file is compatible with both classic and new-style classes.


