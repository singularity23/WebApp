# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Utilities module.
Contains utility functions of general use.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_utils', [dirname(__file__)])
        except ImportError:
            import _utils
            return _utils
        if fp is not None:
            try:
                _mod = imp.load_module('_utils', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _utils = swig_import_helper()
    del swig_import_helper
else:
    import _utils
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err

def DoesNodeIDExist(*args) -> "BOOL" :
  """DoesNodeIDExist(CYMString NodeID) -> BOOL"""
  return _utils.DoesNodeIDExist(*args)

def DoesSectionIDExist(*args) -> "BOOL" :
  """DoesSectionIDExist(CYMString SectionID) -> BOOL"""
  return _utils.DoesSectionIDExist(*args)

def DoesDeviceNumberExist(*args) -> "BOOL" :
  """DoesDeviceNumberExist(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> BOOL"""
  return _utils.DoesDeviceNumberExist(*args)

def GenerateNodeID(*args) -> "CYMString" :
  """
    GenerateNodeID(CYMString NetworkID=_T( "" )) -> CYMString
    GenerateNodeID() -> CYMString
    """
  return _utils.GenerateNodeID(*args)

def GenerateHeadNodeID(*args) -> "CYMString" :
  """
    GenerateHeadNodeID(CYMString NetworkID=_T( "" )) -> CYMString
    GenerateHeadNodeID() -> CYMString
    """
  return _utils.GenerateHeadNodeID(*args)

def GenerateSectionID(*args) -> "CYMString" :
  """
    GenerateSectionID(CYMString NetworkID=_T( "" )) -> CYMString
    GenerateSectionID() -> CYMString
    """
  return _utils.GenerateSectionID(*args)

def GenerateDeviceNumber(*args) -> "CYMString" :
  """
    GenerateDeviceNumber(DeviceType::DeviceTypeEnum DeviceType, CYMString DeviceNumber=_T( "" )) -> CYMString
    GenerateDeviceNumber(DeviceType::DeviceTypeEnum DeviceType) -> CYMString
    """
  return _utils.GenerateDeviceNumber(*args)

def HasAbnormalCondition(*args) -> "void" :
  """HasAbnormalCondition(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)"""
  return _utils.HasAbnormalCondition(*args)

def rgb(*args) -> "int" :
  """rgb(unsigned int R, unsigned int G, unsigned int B) -> int"""
  return _utils.rgb(*args)

def xstr(*args) -> "CYMString" :
  """xstr(CYMString Text) -> CYMString"""
  return _utils.xstr(*args)

def ConvertType(*args) -> "int" :
  """ConvertType(int EnumValue, ConversionType::ConversionTypeEnum ValueType, ConversionType::ConversionTypeEnum ConvertType) -> int"""
  return _utils.ConvertType(*args)

def ConvertFromGPS(*args) -> "double *, double *" :
  """ConvertFromGPS(double Longitude, double Latitude)"""
  return _utils.ConvertFromGPS(*args)

def ConvertToGPS(*args) -> "double *, double *" :
  """ConvertToGPS(double X, double Y)"""
  return _utils.ConvertToGPS(*args)
# This file is compatible with both classic and new-style classes.


