# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Study module.
Provides access to the classes and functions needed to load a study
and to access and manipulate objects in the currently loaded networks.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_study', [dirname(__file__)])
        except ImportError:
            import _study
            return _study
        if fp is not None:
            try:
                _mod = imp.load_module('_study', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _study = swig_import_helper()
    del swig_import_helper
else:
    import _study
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err
class _CymPyDataObj(_object):
    """Proxy of C++ _CymPyDataObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CymPyDataObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _CymPyDataObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _study.delete__CymPyDataObj
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    def GetObjType(self) -> "CYMString" :
        """GetObjType(_CymPyDataObj self) -> CYMString"""
        return _study._CymPyDataObj_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(_CymPyDataObj self, CYMString PropertyID) -> CYMString"""
        return _study._CymPyDataObj_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(_CymPyDataObj self, CYMString Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, double Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, int Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, bool Value, CYMString PropertyID)
        """
        return _study._CymPyDataObj_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(_CymPyDataObj self, CYMString KeywordID) -> CYMString"""
        return _study._CymPyDataObj_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(_CymPyDataObj self, CYMString Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, double Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, int Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, bool Value, CYMString KeywordID)
        """
        return _study._CymPyDataObj_SetUDD(self, *args)

_CymPyDataObj_swigregister = _study._CymPyDataObj_swigregister
_CymPyDataObj_swigregister(_CymPyDataObj)

class AbnormalCondition(_object):
    """Proxy of C++ AbnormalCondition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbnormalCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbnormalCondition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(AbnormalCondition self) -> AbnormalCondition"""
        this = _study.new_AbnormalCondition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_AbnormalCondition
    __del__ = lambda self : None;
    __str__ = lambda self: "Type: " + str(self.Type) + ", ID: '" + self.ID + "', ItemType: " + str(self.ItemType)
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_getmethods__["Type"] = _study.AbnormalCondition_Type_get
    if _newclass:Type = _swig_property(_study.AbnormalCondition_Type_get)
    __swig_getmethods__["ID"] = _study.AbnormalCondition_ID_get
    if _newclass:ID = _swig_property(_study.AbnormalCondition_ID_get)
    __swig_getmethods__["ItemType"] = _study.AbnormalCondition_ItemType_get
    if _newclass:ItemType = _swig_property(_study.AbnormalCondition_ItemType_get)
    __swig_getmethods__["NetworkID"] = _study.AbnormalCondition_NetworkID_get
    if _newclass:NetworkID = _swig_property(_study.AbnormalCondition_NetworkID_get)
AbnormalCondition_swigregister = _study.AbnormalCondition_swigregister
AbnormalCondition_swigregister(AbnormalCondition)

class Load(_object):
    """Proxy of C++ Load class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Load, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Load, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Load self) -> Load"""
        this = _study.new_Load()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Load
    __del__ = lambda self : None;
    __str__ = lambda self: "(DeviceNumber: '" + self.DeviceNumber + "', Type: " + str(self.Type) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Load self, Load rObj) -> bool"""
        return _study.Load___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Load self, Load rObj) -> bool"""
        return _study.Load___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Load self) -> CYMString"""
        return _study.Load_GetObjType(self)

    def ListCustomers(self) -> "std::list< CYMString >" :
        """ListCustomers(Load self) -> std::list< CYMString >"""
        return _study.Load_ListCustomers(self)

    def DeleteCustomerLoad(self, *args) -> "void" :
        """DeleteCustomerLoad(Load self, CYMString CustomerNumber)"""
        return _study.Load_DeleteCustomerLoad(self, *args)

    def AddCustomerLoad(self, *args) -> "void" :
        """AddCustomerLoad(Load self, CYMString CustomerNumber)"""
        return _study.Load_AddCustomerLoad(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """
        GetValue(Load self, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, CYMString LoadModelID=_T( "DEFAULT" )) -> CYMString
        GetValue(Load self, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase) -> CYMString
        """
        return _study.Load_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Load self, CYMString Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, CYMString Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, double Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, double Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, int Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, int Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, bool Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, bool Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        """
        return _study.Load_SetValue(self, *args)

    def SetPhaseType(self, *args) -> "void" :
        """SetPhaseType(Load self, PyPhaseType::PyPhaseTypeEnum PhaseType)"""
        return _study.Load_SetPhaseType(self, *args)

    def GetPhaseType(self) -> "PyPhaseType::PyPhaseTypeEnum" :
        """GetPhaseType(Load self) -> PyPhaseType::PyPhaseTypeEnum"""
        return _study.Load_GetPhaseType(self)

    __swig_getmethods__["Type"] = _study.Load_Type_get
    if _newclass:Type = _swig_property(_study.Load_Type_get)
    __swig_getmethods__["DeviceNumber"] = _study.Load_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_study.Load_DeviceNumber_get)
Load_swigregister = _study.Load_swigregister
Load_swigregister(Load)

class Device(_CymPyDataObj):
    """Proxy of C++ Device class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Device self) -> Device"""
        this = _study.new_Device()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Device
    __del__ = lambda self : None;
    __str__ = lambda self: "(DeviceNumber: '" + self.DeviceNumber + "', DeviceType: " + str(self.DeviceType) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Device self, Device rObj) -> bool"""
        return _study.Device___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Device self, Device rObj) -> bool"""
        return _study.Device___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Device self, CYMString PropertyID) -> CYMString"""
        return _study.Device_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Device self, CYMString PropertyID) -> int"""
        return _study.Device_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Device self, CYMString Value, CYMString PropertyID)
        SetValue(Device self, double Value, CYMString PropertyID)
        SetValue(Device self, int Value, CYMString PropertyID)
        SetValue(Device self, bool Value, CYMString PropertyID)
        """
        return _study.Device_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Device self, CYMString KeywordID) -> CYMString"""
        return _study.Device_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Device self, CYMString Value, CYMString KeywordID)
        SetUDD(Device self, double Value, CYMString KeywordID)
        SetUDD(Device self, int Value, CYMString KeywordID)
        SetUDD(Device self, bool Value, CYMString KeywordID)
        """
        return _study.Device_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Device self) -> CYMString"""
        return _study.Device_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Device self) -> bool"""
        return _study.Device_IsModified(self)

    __swig_getmethods__["DeviceNumber"] = _study.Device_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_study.Device_DeviceNumber_get)
    __swig_getmethods__["DeviceType"] = _study.Device_DeviceType_get
    if _newclass:DeviceType = _swig_property(_study.Device_DeviceType_get)
    __swig_getmethods__["SectionID"] = _study.Device_SectionID_get
    if _newclass:SectionID = _swig_property(_study.Device_SectionID_get)
    __swig_getmethods__["NetworkID"] = _study.Device_NetworkID_get
    if _newclass:NetworkID = _swig_property(_study.Device_NetworkID_get)
    __swig_getmethods__["EquipmentID"] = _study.Device_EquipmentID_get
    if _newclass:EquipmentID = _swig_property(_study.Device_EquipmentID_get)
    __swig_getmethods__["EquipmentType"] = _study.Device_EquipmentType_get
    if _newclass:EquipmentType = _swig_property(_study.Device_EquipmentType_get)
    __swig_getmethods__["Location"] = _study.Device_Location_get
    if _newclass:Location = _swig_property(_study.Device_Location_get)
Device_swigregister = _study.Device_swigregister
Device_swigregister(Device)

class LoadValue(_object):
    """Proxy of C++ LoadValue class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(LoadValue self, double Value1, double Value2) -> LoadValue
        __init__(LoadValue self) -> LoadValue
        """
        this = _study.new_LoadValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_LoadValue
    __del__ = lambda self : None;
    __str__ = lambda self: "Value1: '" + str(self.Value1) + "', Value2: '" + str(self.Value2) + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Value1"] = _study.LoadValue_Value1_set
    __swig_getmethods__["Value1"] = _study.LoadValue_Value1_get
    if _newclass:Value1 = _swig_property(_study.LoadValue_Value1_get, _study.LoadValue_Value1_set)
    __swig_setmethods__["Value2"] = _study.LoadValue_Value2_set
    __swig_getmethods__["Value2"] = _study.LoadValue_Value2_get
    if _newclass:Value2 = _swig_property(_study.LoadValue_Value2_get, _study.LoadValue_Value2_set)
LoadValue_swigregister = _study.LoadValue_swigregister
LoadValue_swigregister(LoadValue)

class Meter(_object):
    """Proxy of C++ Meter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Meter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Meter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Meter self) -> Meter"""
        this = _study.new_Meter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Meter
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Connected"] = _study.Meter_Connected_set
    __swig_getmethods__["Connected"] = _study.Meter_Connected_get
    if _newclass:Connected = _swig_property(_study.Meter_Connected_get, _study.Meter_Connected_set)
    __swig_setmethods__["IsTotalDemand"] = _study.Meter_IsTotalDemand_set
    __swig_getmethods__["IsTotalDemand"] = _study.Meter_IsTotalDemand_get
    if _newclass:IsTotalDemand = _swig_property(_study.Meter_IsTotalDemand_get, _study.Meter_IsTotalDemand_set)
    __swig_setmethods__["LoadValueType"] = _study.Meter_LoadValueType_set
    __swig_getmethods__["LoadValueType"] = _study.Meter_LoadValueType_get
    if _newclass:LoadValueType = _swig_property(_study.Meter_LoadValueType_get, _study.Meter_LoadValueType_set)
    __swig_setmethods__["DemandA"] = _study.Meter_DemandA_set
    __swig_getmethods__["DemandA"] = _study.Meter_DemandA_get
    if _newclass:DemandA = _swig_property(_study.Meter_DemandA_get, _study.Meter_DemandA_set)
    __swig_setmethods__["DemandB"] = _study.Meter_DemandB_set
    __swig_getmethods__["DemandB"] = _study.Meter_DemandB_get
    if _newclass:DemandB = _swig_property(_study.Meter_DemandB_get, _study.Meter_DemandB_set)
    __swig_setmethods__["DemandC"] = _study.Meter_DemandC_set
    __swig_getmethods__["DemandC"] = _study.Meter_DemandC_get
    if _newclass:DemandC = _swig_property(_study.Meter_DemandC_get, _study.Meter_DemandC_set)
    __swig_setmethods__["DemandTotal"] = _study.Meter_DemandTotal_set
    __swig_getmethods__["DemandTotal"] = _study.Meter_DemandTotal_get
    if _newclass:DemandTotal = _swig_property(_study.Meter_DemandTotal_get, _study.Meter_DemandTotal_set)
Meter_swigregister = _study.Meter_swigregister
Meter_swigregister(Meter)

class Node(_CymPyDataObj):
    """Proxy of C++ CymPyNode class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CymPyNode self) -> Node"""
        this = _study.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Node
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.ID + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Node self, Node rObj) -> bool"""
        return _study.Node___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Node self, Node rObj) -> bool"""
        return _study.Node___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Node self, CYMString PropertyID) -> CYMString"""
        return _study.Node_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Node self, CYMString PropertyID) -> int"""
        return _study.Node_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Node self, CYMString Value, CYMString PropertyID)
        SetValue(Node self, double Value, CYMString PropertyID)
        SetValue(Node self, int Value, CYMString PropertyID)
        SetValue(Node self, bool Value, CYMString PropertyID)
        """
        return _study.Node_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Node self, CYMString KeywordID) -> CYMString"""
        return _study.Node_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Node self, CYMString Value, CYMString KeywordID)
        SetUDD(Node self, double Value, CYMString KeywordID)
        SetUDD(Node self, int Value, CYMString KeywordID)
        SetUDD(Node self, bool Value, CYMString KeywordID)
        """
        return _study.Node_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Node self) -> CYMString"""
        return _study.Node_GetObjType(self)

    def GetType(self) -> "NodeType::NodeTypeEnum" :
        """GetType(Node self) -> NodeType::NodeTypeEnum"""
        return _study.Node_GetType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Node self) -> bool"""
        return _study.Node_IsModified(self)

    __swig_setmethods__["ID"] = _study.Node_ID_set
    __swig_getmethods__["ID"] = _study.Node_ID_get
    if _newclass:ID = _swig_property(_study.Node_ID_get, _study.Node_ID_set)
    __swig_setmethods__["X"] = _study.Node_X_set
    __swig_getmethods__["X"] = _study.Node_X_get
    if _newclass:X = _swig_property(_study.Node_X_get, _study.Node_X_set)
    __swig_setmethods__["Y"] = _study.Node_Y_set
    __swig_getmethods__["Y"] = _study.Node_Y_get
    if _newclass:Y = _swig_property(_study.Node_Y_get, _study.Node_Y_set)
Node_swigregister = _study.Node_swigregister
Node_swigregister(Node)

class Section(_CymPyDataObj):
    """Proxy of C++ Section class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Section, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Section, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Section self) -> Section"""
        this = _study.new_Section()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Section
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.ID + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Section self, Section rObj) -> bool"""
        return _study.Section___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Section self, Section rObj) -> bool"""
        return _study.Section___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Section self, CYMString PropertyID) -> CYMString"""
        return _study.Section_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Section self, CYMString PropertyID) -> int"""
        return _study.Section_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Section self, CYMString Value, CYMString PropertyID)
        SetValue(Section self, double Value, CYMString PropertyID)
        SetValue(Section self, int Value, CYMString PropertyID)
        SetValue(Section self, bool Value, CYMString PropertyID)
        """
        return _study.Section_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Section self, CYMString KeywordID) -> CYMString"""
        return _study.Section_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Section self, CYMString Value, CYMString KeywordID)
        SetUDD(Section self, double Value, CYMString KeywordID)
        SetUDD(Section self, int Value, CYMString KeywordID)
        SetUDD(Section self, bool Value, CYMString KeywordID)
        """
        return _study.Section_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Section self) -> CYMString"""
        return _study.Section_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Section self) -> bool"""
        return _study.Section_IsModified(self)

    def AddIntermediatePoint(self, *args) -> "void" :
        """AddIntermediatePoint(Section self, double X, double Y)"""
        return _study.Section_AddIntermediatePoint(self, *args)

    def DeleteIntermediatePoint(self, *args) -> "void" :
        """DeleteIntermediatePoint(Section self, int Index)"""
        return _study.Section_DeleteIntermediatePoint(self, *args)

    def ListIntermediatePoints(self) -> "std::list< Point >" :
        """ListIntermediatePoints(Section self) -> std::list< Point >"""
        return _study.Section_ListIntermediatePoints(self)

    def ListDevices(self, *args) -> "std::list< Device >" :
        """
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString DeviceNumberRegEx=_T( ".*" ), 
            CYMString EquipmentIDRegEx=_T( ".*" )) -> std::list< Device >
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString DeviceNumberRegEx=_T( ".*" )) -> std::list< Device >
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices) -> std::list< Device >
        ListDevices(Section self) -> std::list< Device >
        """
        return _study.Section_ListDevices(self, *args)

    def __get_len(self) -> "double" :
        """__get_len(Section self) -> double"""
        return _study.Section___get_len(self)

    def __set_len(self, *args) -> "void" :
        """__set_len(Section self, double Value)"""
        return _study.Section___set_len(self, *args)

    def __get_clen(self) -> "double" :
        """__get_clen(Section self) -> double"""
        return _study.Section___get_clen(self)

    def __set_clen(self, *args) -> "void" :
        """__set_clen(Section self, double Value)"""
        return _study.Section___set_clen(self, *args)

    __swig_getmethods__["Length"] = __get_len
    __swig_setmethods__["Length"] = __set_len
    __swig_getmethods__["CalculatedLength"] = __get_clen
    __swig_setmethods__["CalculatedLength"] = __set_clen

    if _newclass:
        Length = property(__get_len, __set_len)
        CalculatedLength = property(__get_clen, __set_clen)

    __swig_getmethods__["ID"] = _study.Section_ID_get
    if _newclass:ID = _swig_property(_study.Section_ID_get)
    __swig_getmethods__["FromNode"] = _study.Section_FromNode_get
    if _newclass:FromNode = _swig_property(_study.Section_FromNode_get)
    __swig_getmethods__["ToNode"] = _study.Section_ToNode_get
    if _newclass:ToNode = _swig_property(_study.Section_ToNode_get)
    __swig_getmethods__["TertiaryNode"] = _study.Section_TertiaryNode_get
    if _newclass:TertiaryNode = _swig_property(_study.Section_TertiaryNode_get)
Section_swigregister = _study.Section_swigregister
Section_swigregister(Section)

class Instrument(_CymPyDataObj):
    """Proxy of C++ Instrument class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Instrument self) -> Instrument"""
        this = _study.new_Instrument()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Instrument
    __del__ = lambda self : None;
    __str__ = lambda self: "(InstrumentNumber: '" + self.InstrumentNumber + "', InstrumentType: " + str(self.InstrumentType) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Instrument self, Instrument rObj) -> bool"""
        return _study.Instrument___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Instrument self, Instrument rObj) -> bool"""
        return _study.Instrument___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Instrument self) -> CYMString"""
        return _study.Instrument_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Instrument self) -> bool"""
        return _study.Instrument_IsModified(self)

    def GetDevice(self) -> "Device *" :
        """GetDevice(Instrument self) -> Device"""
        return _study.Instrument_GetDevice(self)

    def GetNode(self) -> "CymPyNode *" :
        """GetNode(Instrument self) -> Node"""
        return _study.Instrument_GetNode(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Instrument self, CYMString PropertyID) -> CYMString"""
        return _study.Instrument_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Instrument self, CYMString PropertyID) -> int"""
        return _study.Instrument_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Instrument self, CYMString Value, CYMString PropertyID)
        SetValue(Instrument self, double Value, CYMString PropertyID)
        SetValue(Instrument self, int Value, CYMString PropertyID)
        SetValue(Instrument self, bool Value, CYMString PropertyID)
        """
        return _study.Instrument_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Instrument self, CYMString KeywordID) -> CYMString"""
        return _study.Instrument_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Instrument self, CYMString Value, CYMString KeywordID)
        SetUDD(Instrument self, double Value, CYMString KeywordID)
        SetUDD(Instrument self, int Value, CYMString KeywordID)
        SetUDD(Instrument self, bool Value, CYMString KeywordID)
        """
        return _study.Instrument_SetUDD(self, *args)

    __swig_getmethods__["InstrumentNumber"] = _study.Instrument_InstrumentNumber_get
    if _newclass:InstrumentNumber = _swig_property(_study.Instrument_InstrumentNumber_get)
    __swig_getmethods__["InstrumentType"] = _study.Instrument_InstrumentType_get
    if _newclass:InstrumentType = _swig_property(_study.Instrument_InstrumentType_get)
Instrument_swigregister = _study.Instrument_swigregister
Instrument_swigregister(Instrument)

class LoadModel(_object):
    """Proxy of C++ LoadModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadModel self) -> LoadModel"""
        this = _study.new_LoadModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_LoadModel
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "', ID: " + str(self.ID) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Name"] = _study.LoadModel_Name_set
    __swig_getmethods__["Name"] = _study.LoadModel_Name_get
    if _newclass:Name = _swig_property(_study.LoadModel_Name_get, _study.LoadModel_Name_set)
    __swig_setmethods__["ID"] = _study.LoadModel_ID_set
    __swig_getmethods__["ID"] = _study.LoadModel_ID_get
    if _newclass:ID = _swig_property(_study.LoadModel_ID_get, _study.LoadModel_ID_set)
LoadModel_swigregister = _study.LoadModel_swigregister
LoadModel_swigregister(LoadModel)

class CustomerType(_object):
    """Proxy of C++ CustomerType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomerType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomerType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CustomerType self) -> CustomerType"""
        this = _study.new_CustomerType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_CustomerType
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def GetValue(self, *args) -> "CYMString" :
        """GetValue(CustomerType self, CYMString PropertyID) -> CYMString"""
        return _study.CustomerType_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(CustomerType self, CYMString PropertyID) -> int"""
        return _study.CustomerType_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(CustomerType self, CYMString Value, CYMString PropertyID)
        SetValue(CustomerType self, double Value, CYMString PropertyID)
        SetValue(CustomerType self, int Value, CYMString PropertyID)
        SetValue(CustomerType self, bool Value, CYMString PropertyID)
        """
        return _study.CustomerType_SetValue(self, *args)

    __swig_setmethods__["Name"] = _study.CustomerType_Name_set
    __swig_getmethods__["Name"] = _study.CustomerType_Name_get
    if _newclass:Name = _swig_property(_study.CustomerType_Name_get, _study.CustomerType_Name_set)
    def getCustomerType(*args) -> "CustomerType *" :
        """getCustomerType(CYMString strName) -> CustomerType"""
        return _study.CustomerType_getCustomerType(*args)

    if _newclass:getCustomerType = staticmethod(getCustomerType)
    __swig_getmethods__["getCustomerType"] = lambda x: getCustomerType
CustomerType_swigregister = _study.CustomerType_swigregister
CustomerType_swigregister(CustomerType)

def CustomerType_getCustomerType(*args) -> "CustomerType *" :
  """CustomerType_getCustomerType(CYMString strName) -> CustomerType"""
  return _study.CustomerType_getCustomerType(*args)

class Point(_object):
    """Proxy of C++ Point class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Point self) -> Point"""
        this = _study.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Point
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" :
        """__eq__(Point self, Point rObj) -> bool"""
        return _study.Point___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Point self, Point rObj) -> bool"""
        return _study.Point___ne__(self, *args)

    def cymprint(self):
        return "(X: " + str(self.X) + ", Y: " + str(self.Y) + ")"

    __str__ = cymprint
    __repr__  = cymprint
    del cymprint

    __swig_setmethods__["X"] = _study.Point_X_set
    __swig_getmethods__["X"] = _study.Point_X_get
    if _newclass:X = _swig_property(_study.Point_X_get, _study.Point_X_set)
    __swig_setmethods__["Y"] = _study.Point_Y_set
    __swig_getmethods__["Y"] = _study.Point_Y_get
    if _newclass:Y = _swig_property(_study.Point_Y_get, _study.Point_Y_set)
Point_swigregister = _study.Point_swigregister
Point_swigregister(Point)


def New() -> "void" :
  """New()"""
  return _study.New()

def Open(*args) -> "void" :
  """
    Open(CYMString Path=_T( "" ))
    Open()
    """
  return _study.Open(*args)

def Close(AskForSave : 'bool'=True) -> "void" :
  """
    Close(bool AskForSave=True)
    Close()
    """
  return _study.Close(AskForSave)

def Save(*args) -> "void" :
  """
    Save(CYMString Path=_T( "" ), bool SelfContained=True)
    Save(CYMString Path=_T( "" ))
    Save()
    """
  return _study.Save(*args)

def Merge(*args) -> "void" :
  """
    Merge(CYMString Path=_T( "" ))
    Merge()
    """
  return _study.Merge(*args)

def ListNetworks(*args) -> "std::list< CYMString >" :
  """
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" ), CYMString Group2RegEx=_T( ".*" ), CYMString Group3RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" ), CYMString Group2RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString Group1RegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All, CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< CYMString >
    ListNetworks(NetworkType::NetworkTypeEnum NetworkType=All) -> std::list< CYMString >
    ListNetworks() -> std::list< CYMString >
    """
  return _study.ListNetworks(*args)

def DeleteNetwork(*args) -> "void" :
  """DeleteNetwork(CYMString NetworkID)"""
  return _study.DeleteNetwork(*args)

def LoadNetwork(*args) -> "void" :
  """
    LoadNetwork(CYMString NetworkID, LoadNetworkOption::LoadNetworkOptionEnum LoadNetworkOption=NoDependencies, 
        int InterconnectionLevel=0)
    LoadNetwork(CYMString NetworkID, LoadNetworkOption::LoadNetworkOptionEnum LoadNetworkOption=NoDependencies)
    LoadNetwork(CYMString NetworkID)
    """
  return _study.LoadNetwork(*args)

def LoadNetworks(*args) -> "void" :
  """
    LoadNetworks(std::list< CYMString > NetworkIDs, LoadNetworkOption::LoadNetworkOptionEnum LoadNetworkOption=NoDependencies, 
        int InterconnectionLevel=0)
    LoadNetworks(std::list< CYMString > NetworkIDs, LoadNetworkOption::LoadNetworkOptionEnum LoadNetworkOption=NoDependencies)
    LoadNetworks(std::list< CYMString > NetworkIDs)
    """
  return _study.LoadNetworks(*args)

def UnloadNetwork(*args) -> "void" :
  """UnloadNetwork(CYMString NetworkID)"""
  return _study.UnloadNetwork(*args)

def UnloadNetworks(*args) -> "void" :
  """UnloadNetworks(std::list< CYMString > NetworkIDs)"""
  return _study.UnloadNetworks(*args)

def GetValueTopo(*args) -> "CYMString" :
  """GetValueTopo(CYMString PropertyID, CYMString NetworkID) -> CYMString"""
  return _study.GetValueTopo(*args)

def ExecuteTopo(*args) -> "int" :
  """ExecuteTopo(CYMString PropertyID, CYMString NetworkID) -> int"""
  return _study.ExecuteTopo(*args)

def SetValueTopo(*args) -> "void" :
  """
    SetValueTopo(CYMString Value, CYMString PropertyID, CYMString NetworkID)
    SetValueTopo(double Value, CYMString PropertyID, CYMString NetworkID)
    SetValueTopo(int Value, CYMString PropertyID, CYMString NetworkID)
    SetValueTopo(bool Value, CYMString PropertyID, CYMString NetworkID)
    """
  return _study.SetValueTopo(*args)

def DisplayBestFit() -> "void" :
  """DisplayBestFit()"""
  return _study.DisplayBestFit()

def RearrangeAllNetworks() -> "void" :
  """RearrangeAllNetworks()"""
  return _study.RearrangeAllNetworks()

def ListLoadModels() -> "std::list< LoadModel >" :
  """ListLoadModels() -> std::list< LoadModel >"""
  return _study.ListLoadModels()

def GetLoadModel(*args) -> "LoadModel *" :
  """GetLoadModel(CYMString LoadModelName) -> LoadModel"""
  return _study.GetLoadModel(*args)

def SelectLoadModel(*args) -> "void" :
  """SelectLoadModel(CYMString LoadModelName)"""
  return _study.SelectLoadModel(*args)

def GetActiveLoadModel() -> "LoadModel *" :
  """GetActiveLoadModel() -> LoadModel"""
  return _study.GetActiveLoadModel()

def AddLoadModel(*args) -> "LoadModel *" :
  """AddLoadModel(CYMString LoadModelName) -> LoadModel"""
  return _study.AddLoadModel(*args)

def ListCustomerTypes() -> "std::list< CYMString >" :
  """ListCustomerTypes() -> std::list< CYMString >"""
  return _study.ListCustomerTypes()

def GetCustomerType(*args) -> "CustomerType *" :
  """GetCustomerType(CYMString Name) -> CustomerType"""
  return _study.GetCustomerType(*args)

def AddCustomerType(*args) -> "CustomerType *" :
  """AddCustomerType(CYMString Name) -> CustomerType"""
  return _study.AddCustomerType(*args)

def DeleteCustomerType(*args) -> "void" :
  """DeleteCustomerType(CYMString Name)"""
  return _study.DeleteCustomerType(*args)

def ListAbnormalConditions(*args) -> "std::list< AbnormalCondition >" :
  """
    ListAbnormalConditions(AbnormalConditionType::AbnormalConditionTypeEnum AbnormalConditionType=All, CYMString NetworkIDRegEx=_T( ".*" ), 
        ItemType::ItemTypeEnum ItemType=All) -> std::list< AbnormalCondition >
    ListAbnormalConditions(AbnormalConditionType::AbnormalConditionTypeEnum AbnormalConditionType=All, CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< AbnormalCondition >
    ListAbnormalConditions(AbnormalConditionType::AbnormalConditionTypeEnum AbnormalConditionType=All) -> std::list< AbnormalCondition >
    ListAbnormalConditions() -> std::list< AbnormalCondition >
    """
  return _study.ListAbnormalConditions(*args)

def QueryInfoDevice(*args) -> "CYMString" :
  """
    QueryInfoDevice(CYMString KeywordID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        int Precision=-1) -> CYMString
    QueryInfoDevice(CYMString KeywordID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> CYMString
    """
  return _study.QueryInfoDevice(*args)

def QueryInfoInstrument(*args) -> "CYMString" :
  """
    QueryInfoInstrument(CYMString KeywordID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType, 
        int nPrecision=-1) -> CYMString
    QueryInfoInstrument(CYMString KeywordID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType) -> CYMString
    """
  return _study.QueryInfoInstrument(*args)

def QueryInfoNode(*args) -> "CYMString" :
  """
    QueryInfoNode(CYMString KeywordID, CYMString NodeID, int Precision=-1) -> CYMString
    QueryInfoNode(CYMString KeywordID, CYMString NodeID) -> CYMString
    """
  return _study.QueryInfoNode(*args)

def QueryInfo(*args) -> "CYMString" :
  """
    QueryInfo(CYMString KeywordID, Device device, int Precision=-1) -> CYMString
    QueryInfo(CYMString KeywordID, Device device) -> CYMString
    QueryInfo(CYMString KeywordID, Instrument instrument, int Precision=-1) -> CYMString
    QueryInfo(CYMString KeywordID, Instrument instrument) -> CYMString
    QueryInfo(CYMString KeywordID, Node node, int Precision=-1) -> CYMString
    QueryInfo(CYMString KeywordID, Node node) -> CYMString
    """
  return _study.QueryInfo(*args)

def ActivateModifications(*args) -> "void" :
  """ActivateModifications(bool Activate)"""
  return _study.ActivateModifications(*args)

def GetModificationsCount() -> "int" :
  """GetModificationsCount() -> int"""
  return _study.GetModificationsCount()

def ListModifications() -> "std::list< Modification >" :
  """ListModifications() -> std::list< Modification >"""
  return _study.ListModifications()

def Undo(Modifs : 'int'=1) -> "int" :
  """
    Undo(int Modifs=1) -> int
    Undo() -> int
    """
  return _study.Undo(Modifs)

def Redo(Modifs : 'int'=1) -> "int" :
  """
    Redo(int Modifs=1) -> int
    Redo() -> int
    """
  return _study.Redo(Modifs)

def BeginMergeModifications() -> "void" :
  """BeginMergeModifications()"""
  return _study.BeginMergeModifications()

def EndMergeModifications(*args) -> "void" :
  """EndMergeModifications(CYMString Description)"""
  return _study.EndMergeModifications(*args)

def BeginBatchModifications() -> "void" :
  """BeginBatchModifications()"""
  return _study.BeginBatchModifications()

def EndBatchModifications() -> "void" :
  """EndBatchModifications()"""
  return _study.EndBatchModifications()

def EnableObj(*args) -> "void" :
  """
    EnableObj(CYMString ID)
    EnableObj(std::list< CYMString > IDs)
    """
  return _study.EnableObj(*args)

def DisableObj(*args) -> "void" :
  """
    DisableObj(CYMString ID)
    DisableObj(std::list< CYMString > IDs)
    """
  return _study.DisableObj(*args)

def IsObjEnabled(*args) -> "BOOL" :
  """
    IsObjEnabled(CYMString ID) -> BOOL
    IsObjEnabled(std::list< CYMString > IDs) -> BOOL
    """
  return _study.IsObjEnabled(*args)

def IsObjDisabled(*args) -> "BOOL" :
  """
    IsObjDisabled(CYMString ID) -> BOOL
    IsObjDisabled(std::list< CYMString > IDs) -> BOOL
    """
  return _study.IsObjDisabled(*args)

def GetLoad(*args) -> "Load *" :
  """GetLoad(CYMString DeviceNumber, LoadType::LoadTypeEnum LoadType) -> Load"""
  return _study.GetLoad(*args)

def GetDevice(*args) -> "Device *" :
  """GetDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> Device"""
  return _study.GetDevice(*args)

def ListDevices(*args) -> "std::list< Device >" :
  """
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString SectionIDRegEx=_T( ".*" ), CYMString DeviceNumberRegEx=_T( ".*" ), 
        CYMString EquipmentIDRegEx=_T( ".*" ), CYMString NestedViewIDRegEx=_T( ".*" )) -> std::list< Device >
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString SectionIDRegEx=_T( ".*" ), CYMString DeviceNumberRegEx=_T( ".*" ), 
        CYMString EquipmentIDRegEx=_T( ".*" )) -> std::list< Device >
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString SectionIDRegEx=_T( ".*" ), CYMString DeviceNumberRegEx=_T( ".*" )) -> std::list< Device >
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString NetworkIDRegEx=_T( ".*" ), 
        CYMString SectionIDRegEx=_T( ".*" )) -> std::list< Device >
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< Device >
    ListDevices(DeviceType::DeviceTypeEnum DeviceType=AllDevices) -> std::list< Device >
    ListDevices() -> std::list< Device >
    """
  return _study.ListDevices(*args)

def GetValueDevice(*args) -> "CYMString" :
  """GetValueDevice(CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> CYMString"""
  return _study.GetValueDevice(*args)

def ExecuteDevice(*args) -> "int" :
  """ExecuteDevice(CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> int"""
  return _study.ExecuteDevice(*args)

def SetValueDevice(*args) -> "void" :
  """
    SetValueDevice(CYMString Value, CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)
    SetValueDevice(double Value, CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)
    SetValueDevice(int Value, CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)
    SetValueDevice(bool Value, CYMString PropertyID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)
    """
  return _study.SetValueDevice(*args)

def AddDevice(*args) -> "Device *" :
  """
    AddDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID, 
        CYMString EquipmentID=_T( "DEFAULT" ), CymPyLocation::LocationEnum Location=FirstAvailable, 
        bool Overwrite=False) -> Device
    AddDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID, 
        CYMString EquipmentID=_T( "DEFAULT" ), CymPyLocation::LocationEnum Location=FirstAvailable) -> Device
    AddDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID, 
        CYMString EquipmentID=_T( "DEFAULT" )) -> Device
    AddDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID) -> Device
    """
  return _study.AddDevice(*args)

def ReplaceDevice(*args) -> "Device *" :
  """
    ReplaceDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum OldDeviceType, DeviceType::DeviceTypeEnum NewDeviceType, 
        CYMString EquipmentID=_T( "DEFAULT" )) -> Device
    ReplaceDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum OldDeviceType, DeviceType::DeviceTypeEnum NewDeviceType) -> Device
    """
  return _study.ReplaceDevice(*args)

def MoveDevice(*args) -> "void" :
  """
    MoveDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID, 
        CymPyLocation::LocationEnum Location=FirstAvailable, bool Overwrite=False)
    MoveDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID, 
        CymPyLocation::LocationEnum Location=FirstAvailable)
    MoveDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString SectionID)
    """
  return _study.MoveDevice(*args)

def DeleteDevice(*args) -> "void" :
  """DeleteDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)"""
  return _study.DeleteDevice(*args)

def GetCurrentDevice() -> "Device *" :
  """GetCurrentDevice() -> Device"""
  return _study.GetCurrentDevice()

def GetInstrument(*args) -> "Instrument *" :
  """GetInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType) -> Instrument"""
  return _study.GetInstrument(*args)

def ListInstruments(*args) -> "std::list< Instrument >" :
  """
    ListInstruments(InstrumentType::InstrumentTypeEnum InstrumentType=AllInstruments, CYMString InstrumentNumberRegEx=_T( ".*" )) -> std::list< Instrument >
    ListInstruments(InstrumentType::InstrumentTypeEnum InstrumentType=AllInstruments) -> std::list< Instrument >
    ListInstruments() -> std::list< Instrument >
    """
  return _study.ListInstruments(*args)

def GetValueInstrument(*args) -> "CYMString" :
  """GetValueInstrument(CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType) -> CYMString"""
  return _study.GetValueInstrument(*args)

def ExecuteInstrument(*args) -> "int" :
  """ExecuteInstrument(CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType) -> int"""
  return _study.ExecuteInstrument(*args)

def SetValueInstrument(*args) -> "void" :
  """
    SetValueInstrument(CYMString Value, CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)
    SetValueInstrument(double Value, CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)
    SetValueInstrument(int Value, CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)
    SetValueInstrument(bool Value, CYMString PropertyID, CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)
    """
  return _study.SetValueInstrument(*args)

def GetCurrentInstrument() -> "Instrument *" :
  """GetCurrentInstrument() -> Instrument"""
  return _study.GetCurrentInstrument()

def AddInstrument(*args) -> "Instrument *" :
  """
    AddInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType, CYMString DeviceNumber, 
        DeviceType::DeviceTypeEnum DeviceType, CymPyLocation::LocationEnum Location=From) -> Instrument
    AddInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType, CYMString DeviceNumber, 
        DeviceType::DeviceTypeEnum DeviceType) -> Instrument
    AddInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType, CYMString NodeID) -> Instrument
    """
  return _study.AddInstrument(*args)

def DeleteInstrument(*args) -> "void" :
  """DeleteInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)"""
  return _study.DeleteInstrument(*args)

def LocateInstrument(*args) -> "void" :
  """LocateInstrument(CYMString InstrumentNumber, InstrumentType::InstrumentTypeEnum InstrumentType)"""
  return _study.LocateInstrument(*args)

def GetSection(*args) -> "Section *" :
  """GetSection(CYMString SectionID) -> Section"""
  return _study.GetSection(*args)

def ListSections(*args) -> "std::list< Section >" :
  """
    ListSections(CYMString NetworkIDRegEx=_T( ".*" ), PyPhase::PhaseEnum Phase=All, SectionState::SectionStateEnum SectionState=All, 
        CYMString SectionIDRegEx=_T( ".*" )) -> std::list< Section >
    ListSections(CYMString NetworkIDRegEx=_T( ".*" ), PyPhase::PhaseEnum Phase=All, SectionState::SectionStateEnum SectionState=All) -> std::list< Section >
    ListSections(CYMString NetworkIDRegEx=_T( ".*" ), PyPhase::PhaseEnum Phase=All) -> std::list< Section >
    ListSections(CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< Section >
    ListSections() -> std::list< Section >
    """
  return _study.ListSections(*args)

def GetValueSection(*args) -> "CYMString" :
  """GetValueSection(CYMString PropertyID, CYMString SectionID) -> CYMString"""
  return _study.GetValueSection(*args)

def ExecuteSection(*args) -> "int" :
  """ExecuteSection(CYMString PropertyID, CYMString SectionID) -> int"""
  return _study.ExecuteSection(*args)

def SetValueSection(*args) -> "void" :
  """
    SetValueSection(CYMString Value, CYMString PropertyID, CYMString SectionID)
    SetValueSection(double Value, CYMString PropertyID, CYMString SectionID)
    SetValueSection(int Value, CYMString PropertyID, CYMString SectionID)
    SetValueSection(bool Value, CYMString PropertyID, CYMString SectionID)
    """
  return _study.SetValueSection(*args)

def AddSection(*args) -> "Section *" :
  """
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, CYMString ToNodeID=_T( "" ), 
        CYMString TertiaryNodeID=_T( "" ), CYMString NestedViewID=_T( "DEFAULT" )) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, CYMString ToNodeID=_T( "" ), 
        CYMString TertiaryNodeID=_T( "" )) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, CYMString ToNodeID=_T( "" )) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, Node ToNode, CYMString TertiaryNodeID=_T( "" ), 
        CYMString NestedViewID=_T( "DEFAULT" )) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, Node ToNode, CYMString TertiaryNodeID=_T( "" )) -> Section
    AddSection(CYMString SectionID, CYMString NetworkID, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, 
        CYMString FromNodeID, Node ToNode) -> Section
    """
  return _study.AddSection(*args)

def DeleteSection(*args) -> "void" :
  """
    DeleteSection(CYMString SectionID, DeleteSectionOption::DeleteSectionOptionEnum Option=ReconnectDownstream)
    DeleteSection(CYMString SectionID)
    """
  return _study.DeleteSection(*args)

def GetNode(*args) -> "CymPyNode *" :
  """GetNode(CYMString NodeID) -> Node"""
  return _study.GetNode(*args)

def ListNodes(*args) -> "std::list< CymPyNode >" :
  """
    ListNodes(NodeType::NodeTypeEnum NodeType=All, CYMString NetworkIDRegEx=_T( ".*" ), CYMString NodeIDRegEx=_T( ".*" )) -> std::list< CymPyNode >
    ListNodes(NodeType::NodeTypeEnum NodeType=All, CYMString NetworkIDRegEx=_T( ".*" )) -> std::list< CymPyNode >
    ListNodes(NodeType::NodeTypeEnum NodeType=All) -> std::list< CymPyNode >
    ListNodes() -> std::list< CymPyNode >
    """
  return _study.ListNodes(*args)

def GetValueNode(*args) -> "CYMString" :
  """GetValueNode(CYMString PropertyID, CYMString NodeID) -> CYMString"""
  return _study.GetValueNode(*args)

def ExecuteNode(*args) -> "int" :
  """ExecuteNode(CYMString PropertyID, CYMString NodeID) -> int"""
  return _study.ExecuteNode(*args)

def SetValueNode(*args) -> "void" :
  """
    SetValueNode(CYMString Value, CYMString PropertyID, CYMString NodeID)
    SetValueNode(double Value, CYMString PropertyID, CYMString NodeID)
    SetValueNode(int Value, CYMString PropertyID, CYMString NodeID)
    SetValueNode(bool Value, CYMString PropertyID, CYMString NodeID)
    """
  return _study.SetValueNode(*args)

def GetCurrentNode() -> "CymPyNode *" :
  """GetCurrentNode() -> Node"""
  return _study.GetCurrentNode()

def GetMeter(*args) -> "Meter *" :
  """
    GetMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, bool UseActiveLoadModel=True, 
        int LoadModelID=-1) -> Meter
    GetMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, bool UseActiveLoadModel=True) -> Meter
    GetMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> Meter
    GetMeter(CYMString NodeID, bool UseActiveLoadModel=True, int LoadModelID=-1) -> Meter
    GetMeter(CYMString NodeID, bool UseActiveLoadModel=True) -> Meter
    GetMeter(CYMString NodeID) -> Meter
    """
  return _study.GetMeter(*args)

def DeleteMeter(*args) -> "void" :
  """DeleteMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)"""
  return _study.DeleteMeter(*args)

def AddMeter(*args) -> "Meter *" :
  """
    AddMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter NewMeter, bool Overwrite=False, 
        bool UseActiveLoadModel=True, int LoadModelID=-1) -> Meter
    AddMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter NewMeter, bool Overwrite=False, 
        bool UseActiveLoadModel=True) -> Meter
    AddMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter NewMeter, bool Overwrite=False) -> Meter
    AddMeter(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter NewMeter) -> Meter
    """
  return _study.AddMeter(*args)

def LocateDevice(*args) -> "void" :
  """LocateDevice(CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType)"""
  return _study.LocateDevice(*args)

def LocateNode(*args) -> "void" :
  """LocateNode(CYMString NodeID)"""
  return _study.LocateNode(*args)

def LocateSection(*args) -> "void" :
  """LocateSection(CYMString SectionID)"""
  return _study.LocateSection(*args)

def LocateNetwork(*args) -> "void" :
  """LocateNetwork(CYMString NetworkID)"""
  return _study.LocateNetwork(*args)

def ListColorCodingLayers() -> "std::list< CYMString >" :
  """ListColorCodingLayers() -> std::list< CYMString >"""
  return _study.ListColorCodingLayers()

def SelectColorCodingLayer(*args) -> "void" :
  """SelectColorCodingLayer(CYMString ColorCodingLayer)"""
  return _study.SelectColorCodingLayer(*args)

def ListTagLayers() -> "std::list< CYMString >" :
  """ListTagLayers() -> std::list< CYMString >"""
  return _study.ListTagLayers()

def SelectTagLayer(*args) -> "void" :
  """SelectTagLayer(CYMString TagLayer)"""
  return _study.SelectTagLayer(*args)

def AddNetwork(*args) -> "void" :
  """
    AddNetwork(CYMString NetworkID, NetworkType::NetworkTypeEnum NetworkType, CYMString SourceEquipmentID=_T( "DEFAULT" ), 
        CYMString SourceDeviceNumber=_T( "" ), Node SourceNode=None)
    AddNetwork(CYMString NetworkID, NetworkType::NetworkTypeEnum NetworkType, CYMString SourceEquipmentID=_T( "DEFAULT" ), 
        CYMString SourceDeviceNumber=_T( "" ))
    AddNetwork(CYMString NetworkID, NetworkType::NetworkTypeEnum NetworkType, CYMString SourceEquipmentID=_T( "DEFAULT" ))
    AddNetwork(CYMString NetworkID, NetworkType::NetworkTypeEnum NetworkType)
    """
  return _study.AddNetwork(*args)

def AddSource(*args) -> "void" :
  """
    AddSource(CYMString NetworkID, CYMString SourceEquipmentID=_T( "DEFAULT" ), CYMString SourceDeviceNumber=_T( "" ), 
        Node SourceNode=None)
    AddSource(CYMString NetworkID, CYMString SourceEquipmentID=_T( "DEFAULT" ), CYMString SourceDeviceNumber=_T( "" ))
    AddSource(CYMString NetworkID, CYMString SourceEquipmentID=_T( "DEFAULT" ))
    AddSource(CYMString NetworkID)
    """
  return _study.AddSource(*args)

def Connect(*args) -> "void" :
  """Connect(CYMString FromNodeID, CYMString ToNodeID)"""
  return _study.Connect(*args)

def Disconnect(*args) -> "void" :
  """Disconnect(CYMString SectionID, CYMString NodeID)"""
  return _study.Disconnect(*args)

def SetHighlightDevice(*args) -> "void" :
  """SetHighlightDevice(DeviceType::DeviceTypeEnum DeviceType)"""
  return _study.SetHighlightDevice(*args)

def SetHighlightInstrument(*args) -> "void" :
  """SetHighlightInstrument(InstrumentType::InstrumentTypeEnum InstrumentType)"""
  return _study.SetHighlightInstrument(*args)

def SetHighlightSection(*args) -> "void" :
  """SetHighlightSection(CYMString const SectionID, int LineWitdh, Color::ColorEnum Color)"""
  return _study.SetHighlightSection(*args)

def ClearHighlight() -> "void" :
  """ClearHighlight()"""
  return _study.ClearHighlight()

def ExportOLD(*args) -> "void" :
  """
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True, bool ExportImages=True, 
        bool MainLineOnly=False, double WidthFactor=1.0, CYMString Tooltip1=_T( "" ), 
        CYMString Tooltip2=_T( "" ))
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True, bool ExportImages=True, 
        bool MainLineOnly=False, double WidthFactor=1.0, CYMString Tooltip1=_T( "" ))
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True, bool ExportImages=True, 
        bool MainLineOnly=False, double WidthFactor=1.0)
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True, bool ExportImages=True, 
        bool MainLineOnly=False)
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True, bool ExportImages=True)
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type, bool ExportMap=True)
    ExportOLD(CYMString Filename, ExportOLDType::ExportOLDTypeEnum Type)
    """
  return _study.ExportOLD(*args)
class _StudyInfo(_object):
    """Proxy of C++ _StudyInfo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _StudyInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _StudyInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(_StudyInfo self) -> _StudyInfo"""
        this = _study.new__StudyInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete__StudyInfo
    __del__ = lambda self : None;
    def __get_sp(self) -> "CYMString" :
        """__get_sp(_StudyInfo self) -> CYMString"""
        return _study._StudyInfo___get_sp(self)

    def __set_sp(self, *args) -> "void" :
        """__set_sp(_StudyInfo self, CYMString Value)"""
        return _study._StudyInfo___set_sp(self, *args)

    def __get_state(self) -> "StudyState::StudyStateEnum" :
        """__get_state(_StudyInfo self) -> StudyState::StudyStateEnum"""
        return _study._StudyInfo___get_state(self)

    def __set_state(self, *args) -> "void" :
        """__set_state(_StudyInfo self, StudyState::StudyStateEnum Value)"""
        return _study._StudyInfo___set_state(self, *args)

    def __get_aut(self) -> "CYMString" :
        """__get_aut(_StudyInfo self) -> CYMString"""
        return _study._StudyInfo___get_aut(self)

    def __set_aut(self, *args) -> "void" :
        """__set_aut(_StudyInfo self, CYMString Value)"""
        return _study._StudyInfo___set_aut(self, *args)

    def __get_com(self) -> "CYMString" :
        """__get_com(_StudyInfo self) -> CYMString"""
        return _study._StudyInfo___get_com(self)

    def __set_com(self, *args) -> "void" :
        """__set_com(_StudyInfo self, CYMString Value)"""
        return _study._StudyInfo___set_com(self, *args)

    def __get_des(self) -> "CYMString" :
        """__get_des(_StudyInfo self) -> CYMString"""
        return _study._StudyInfo___get_des(self)

    def __set_des(self, *args) -> "void" :
        """__set_des(_StudyInfo self, CYMString Value)"""
        return _study._StudyInfo___set_des(self, *args)

    def __get_pn(self) -> "CYMString" :
        """__get_pn(_StudyInfo self) -> CYMString"""
        return _study._StudyInfo___get_pn(self)

    def __set_pn(self, *args) -> "void" :
        """__set_pn(_StudyInfo self, CYMString Value)"""
        return _study._StudyInfo___set_pn(self, *args)

    __swig_getmethods__["Path"] = __get_sp
    __swig_setmethods__["Path"] = __set_sp
    __swig_getmethods__["State"] = __get_state
    __swig_setmethods__["State"] = __set_state
    __swig_getmethods__["Author"] = __get_aut
    __swig_setmethods__["Author"] = __set_aut
    __swig_getmethods__["Company"] = __get_com
    __swig_setmethods__["Company"] = __set_com
    __swig_getmethods__["Description"] = __get_des
    __swig_setmethods__["Description"] = __set_des
    __swig_getmethods__["ProjectName"] = __get_pn
    __swig_setmethods__["ProjectName"] = __set_pn

    if _newclass:
        Path = property(__get_sp, __set_sp)
        State = property(__get_state, __set_state)
        Author = property(__get_aut, __set_aut)
        Company = property(__get_com, __set_com)
        Description = property(__get_des, __set_des)
        ProjectName = property(__get_pn, __set_pn)

_StudyInfo_swigregister = _study._StudyInfo_swigregister
_StudyInfo_swigregister(_StudyInfo)

class NetworkIterator(_object):
    """Proxy of C++ NetworkIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NetworkIterator self, CYMString StartingNodeID, IterationOption::IterationOptionEnum IterationOption=Downstream, 
            IterationRestriction::IterationRestrictionEnum IterationRestriction=NoRestriction) -> NetworkIterator
        __init__(NetworkIterator self, CYMString StartingNodeID, IterationOption::IterationOptionEnum IterationOption=Downstream) -> NetworkIterator
        __init__(NetworkIterator self, CYMString StartingNodeID) -> NetworkIterator
        """
        this = _study.new_NetworkIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_NetworkIterator
    __del__ = lambda self : None;
    def Next(self) -> "bool" :
        """Next(NetworkIterator self) -> bool"""
        return _study.NetworkIterator_Next(self)

    def Skip(self) -> "void" :
        """Skip(NetworkIterator self)"""
        return _study.NetworkIterator_Skip(self)

    def GetSection(self) -> "Section *" :
        """GetSection(NetworkIterator self) -> Section"""
        return _study.NetworkIterator_GetSection(self)

    def GetNode(self) -> "CymPyNode *" :
        """GetNode(NetworkIterator self) -> Node"""
        return _study.NetworkIterator_GetNode(self)

    def GetFromNode(self) -> "CymPyNode *" :
        """GetFromNode(NetworkIterator self) -> Node"""
        return _study.NetworkIterator_GetFromNode(self)

    def GetNetworkID(self) -> "CYMString" :
        """GetNetworkID(NetworkIterator self) -> CYMString"""
        return _study.NetworkIterator_GetNetworkID(self)

    def ListNextSections(self) -> "std::list< Section >" :
        """ListNextSections(NetworkIterator self) -> std::list< Section >"""
        return _study.NetworkIterator_ListNextSections(self)

    def GetDevices(self) -> "std::list< Device >" :
        """GetDevices(NetworkIterator self) -> std::list< Device >"""
        return _study.NetworkIterator_GetDevices(self)

    def GetPhase(self) -> "PyPhase::PhaseEnum" :
        """GetPhase(NetworkIterator self) -> PyPhase::PhaseEnum"""
        return _study.NetworkIterator_GetPhase(self)

    def GetFromPhase(self) -> "PyPhase::PhaseEnum" :
        """GetFromPhase(NetworkIterator self) -> PyPhase::PhaseEnum"""
        return _study.NetworkIterator_GetFromPhase(self)

    def GetDepth(self) -> "unsigned int" :
        """GetDepth(NetworkIterator self) -> unsigned int"""
        return _study.NetworkIterator_GetDepth(self)

    def GetDistance(self) -> "unsigned int" :
        """GetDistance(NetworkIterator self) -> unsigned int"""
        return _study.NetworkIterator_GetDistance(self)

NetworkIterator_swigregister = _study.NetworkIterator_swigregister
NetworkIterator_swigregister(NetworkIterator)

class LoadGrowth(_object):
    """Proxy of C++ CymPyLoadGrowth class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadGrowth, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadGrowth, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CymPyLoadGrowth self) -> LoadGrowth"""
        this = _study.new_LoadGrowth()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_LoadGrowth
    __del__ = lambda self : None;
    def Apply(self, *args) -> "void" :
        """Apply(LoadGrowth self, std::list< CYMString > Networks, int TargetYear)"""
        return _study.LoadGrowth_Apply(self, *args)

    def GetActualGrowthYears(self, *args) -> "std::list< int >" :
        """GetActualGrowthYears(LoadGrowth self, std::list< CYMString > Networks, std::list< CYMString > CustomerTypes) -> std::list< int >"""
        return _study.LoadGrowth_GetActualGrowthYears(self, *args)

    def SetIncludeCustormerType(self, *args) -> "void" :
        """SetIncludeCustormerType(LoadGrowth self, CYMString CustomerType, bool Include)"""
        return _study.LoadGrowth_SetIncludeCustormerType(self, *args)

    def GetIncludeCustormerType(self, *args) -> "bool" :
        """GetIncludeCustormerType(LoadGrowth self, CYMString CustomerType) -> bool"""
        return _study.LoadGrowth_GetIncludeCustormerType(self, *args)

    __swig_setmethods__["IncludeSubstation"] = _study.LoadGrowth_IncludeSubstation_set
    __swig_getmethods__["IncludeSubstation"] = _study.LoadGrowth_IncludeSubstation_get
    if _newclass:IncludeSubstation = _swig_property(_study.LoadGrowth_IncludeSubstation_get, _study.LoadGrowth_IncludeSubstation_set)
    __swig_setmethods__["IncludeFeeder"] = _study.LoadGrowth_IncludeFeeder_set
    __swig_getmethods__["IncludeFeeder"] = _study.LoadGrowth_IncludeFeeder_get
    if _newclass:IncludeFeeder = _swig_property(_study.LoadGrowth_IncludeFeeder_get, _study.LoadGrowth_IncludeFeeder_set)
    __swig_setmethods__["IncludeSecondary"] = _study.LoadGrowth_IncludeSecondary_set
    __swig_getmethods__["IncludeSecondary"] = _study.LoadGrowth_IncludeSecondary_get
    if _newclass:IncludeSecondary = _swig_property(_study.LoadGrowth_IncludeSecondary_get, _study.LoadGrowth_IncludeSecondary_set)
    __swig_setmethods__["IncludeZone"] = _study.LoadGrowth_IncludeZone_set
    __swig_getmethods__["IncludeZone"] = _study.LoadGrowth_IncludeZone_get
    if _newclass:IncludeZone = _swig_property(_study.LoadGrowth_IncludeZone_get, _study.LoadGrowth_IncludeZone_set)
    __swig_setmethods__["IncludeSection"] = _study.LoadGrowth_IncludeSection_set
    __swig_getmethods__["IncludeSection"] = _study.LoadGrowth_IncludeSection_get
    if _newclass:IncludeSection = _swig_property(_study.LoadGrowth_IncludeSection_get, _study.LoadGrowth_IncludeSection_set)
    __swig_setmethods__["IncludeSpotLoad"] = _study.LoadGrowth_IncludeSpotLoad_set
    __swig_getmethods__["IncludeSpotLoad"] = _study.LoadGrowth_IncludeSpotLoad_get
    if _newclass:IncludeSpotLoad = _swig_property(_study.LoadGrowth_IncludeSpotLoad_get, _study.LoadGrowth_IncludeSpotLoad_set)
    __swig_setmethods__["IncludeDistLoad"] = _study.LoadGrowth_IncludeDistLoad_set
    __swig_getmethods__["IncludeDistLoad"] = _study.LoadGrowth_IncludeDistLoad_get
    if _newclass:IncludeDistLoad = _swig_property(_study.LoadGrowth_IncludeDistLoad_get, _study.LoadGrowth_IncludeDistLoad_set)
    __swig_setmethods__["IncludeLockedLoad"] = _study.LoadGrowth_IncludeLockedLoad_set
    __swig_getmethods__["IncludeLockedLoad"] = _study.LoadGrowth_IncludeLockedLoad_get
    if _newclass:IncludeLockedLoad = _swig_property(_study.LoadGrowth_IncludeLockedLoad_get, _study.LoadGrowth_IncludeLockedLoad_set)
    __swig_setmethods__["IncludeInitiallyLockedLoad"] = _study.LoadGrowth_IncludeInitiallyLockedLoad_set
    __swig_getmethods__["IncludeInitiallyLockedLoad"] = _study.LoadGrowth_IncludeInitiallyLockedLoad_get
    if _newclass:IncludeInitiallyLockedLoad = _swig_property(_study.LoadGrowth_IncludeInitiallyLockedLoad_get, _study.LoadGrowth_IncludeInitiallyLockedLoad_set)
    __swig_setmethods__["IncludeCustomerType"] = _study.LoadGrowth_IncludeCustomerType_set
    __swig_getmethods__["IncludeCustomerType"] = _study.LoadGrowth_IncludeCustomerType_get
    if _newclass:IncludeCustomerType = _swig_property(_study.LoadGrowth_IncludeCustomerType_get, _study.LoadGrowth_IncludeCustomerType_set)
    __swig_setmethods__["GrowthPercent"] = _study.LoadGrowth_GrowthPercent_set
    __swig_getmethods__["GrowthPercent"] = _study.LoadGrowth_GrowthPercent_get
    if _newclass:GrowthPercent = _swig_property(_study.LoadGrowth_GrowthPercent_get, _study.LoadGrowth_GrowthPercent_set)
    __swig_setmethods__["GrowthFactorMethod"] = _study.LoadGrowth_GrowthFactorMethod_set
    __swig_getmethods__["GrowthFactorMethod"] = _study.LoadGrowth_GrowthFactorMethod_get
    if _newclass:GrowthFactorMethod = _swig_property(_study.LoadGrowth_GrowthFactorMethod_get, _study.LoadGrowth_GrowthFactorMethod_set)
    __swig_setmethods__["GeneralGrowthPeriod"] = _study.LoadGrowth_GeneralGrowthPeriod_set
    __swig_getmethods__["GeneralGrowthPeriod"] = _study.LoadGrowth_GeneralGrowthPeriod_get
    if _newclass:GeneralGrowthPeriod = _swig_property(_study.LoadGrowth_GeneralGrowthPeriod_get, _study.LoadGrowth_GeneralGrowthPeriod_set)
LoadGrowth_swigregister = _study.LoadGrowth_swigregister
LoadGrowth_swigregister(LoadGrowth)

class NetworkEquivalent(_object):
    """Proxy of C++ NetworkEquivalent class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkEquivalent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkEquivalent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(NetworkEquivalent self) -> NetworkEquivalent"""
        this = _study.new_NetworkEquivalent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_NetworkEquivalent
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """Run(NetworkEquivalent self, EquivalentCalculationType::EquivalentCalculationTypeEnum Type)"""
        return _study.NetworkEquivalent_Run(self, *args)

NetworkEquivalent_swigregister = _study.NetworkEquivalent_swigregister
NetworkEquivalent_swigregister(NetworkEquivalent)

class Modification(_object):
    """Proxy of C++ Modification class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modification, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Modification self) -> Modification"""
        this = _study.new_Modification()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_Modification
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Description + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["ModifID"] = _study.Modification_ModifID_set
    __swig_getmethods__["ModifID"] = _study.Modification_ModifID_get
    if _newclass:ModifID = _swig_property(_study.Modification_ModifID_get, _study.Modification_ModifID_set)
    __swig_setmethods__["SubProjectID"] = _study.Modification_SubProjectID_set
    __swig_getmethods__["SubProjectID"] = _study.Modification_SubProjectID_get
    if _newclass:SubProjectID = _swig_property(_study.Modification_SubProjectID_get, _study.Modification_SubProjectID_set)
    __swig_setmethods__["Index"] = _study.Modification_Index_set
    __swig_getmethods__["Index"] = _study.Modification_Index_get
    if _newclass:Index = _swig_property(_study.Modification_Index_get, _study.Modification_Index_set)
    __swig_setmethods__["ParentIndex"] = _study.Modification_ParentIndex_set
    __swig_getmethods__["ParentIndex"] = _study.Modification_ParentIndex_get
    if _newclass:ParentIndex = _swig_property(_study.Modification_ParentIndex_get, _study.Modification_ParentIndex_set)
    __swig_setmethods__["Year"] = _study.Modification_Year_set
    __swig_getmethods__["Year"] = _study.Modification_Year_get
    if _newclass:Year = _swig_property(_study.Modification_Year_get, _study.Modification_Year_set)
    __swig_setmethods__["CreationUser"] = _study.Modification_CreationUser_set
    __swig_getmethods__["CreationUser"] = _study.Modification_CreationUser_get
    if _newclass:CreationUser = _swig_property(_study.Modification_CreationUser_get, _study.Modification_CreationUser_set)
    __swig_setmethods__["ModificationUser"] = _study.Modification_ModificationUser_set
    __swig_getmethods__["ModificationUser"] = _study.Modification_ModificationUser_get
    if _newclass:ModificationUser = _swig_property(_study.Modification_ModificationUser_get, _study.Modification_ModificationUser_set)
    __swig_setmethods__["Description"] = _study.Modification_Description_set
    __swig_getmethods__["Description"] = _study.Modification_Description_get
    if _newclass:Description = _swig_property(_study.Modification_Description_get, _study.Modification_Description_set)
    __swig_setmethods__["Details"] = _study.Modification_Details_set
    __swig_getmethods__["Details"] = _study.Modification_Details_get
    if _newclass:Details = _swig_property(_study.Modification_Details_get, _study.Modification_Details_set)
    __swig_setmethods__["InvolvedNetworks"] = _study.Modification_InvolvedNetworks_set
    __swig_getmethods__["InvolvedNetworks"] = _study.Modification_InvolvedNetworks_get
    if _newclass:InvolvedNetworks = _swig_property(_study.Modification_InvolvedNetworks_get, _study.Modification_InvolvedNetworks_set)
    def Disable(self) -> "void" :
        """Disable(Modification self)"""
        return _study.Modification_Disable(self)

    def Enable(self) -> "void" :
        """Enable(Modification self)"""
        return _study.Modification_Enable(self)

    def IsEnabled(self) -> "BOOL" :
        """IsEnabled(Modification self) -> BOOL"""
        return _study.Modification_IsEnabled(self)

Modification_swigregister = _study.Modification_swigregister
Modification_swigregister(Modification)

class DeviceRestriction(_object):
    """Proxy of C++ DeviceRestriction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceRestriction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceRestriction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DeviceRestriction self) -> DeviceRestriction"""
        this = _study.new_DeviceRestriction()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["DeviceType"] = _study.DeviceRestriction_DeviceType_set
    __swig_getmethods__["DeviceType"] = _study.DeviceRestriction_DeviceType_get
    if _newclass:DeviceType = _swig_property(_study.DeviceRestriction_DeviceType_get, _study.DeviceRestriction_DeviceType_set)
    __swig_setmethods__["ProtectSinglePhase"] = _study.DeviceRestriction_ProtectSinglePhase_set
    __swig_getmethods__["ProtectSinglePhase"] = _study.DeviceRestriction_ProtectSinglePhase_get
    if _newclass:ProtectSinglePhase = _swig_property(_study.DeviceRestriction_ProtectSinglePhase_get, _study.DeviceRestriction_ProtectSinglePhase_set)
    __swig_setmethods__["ProtectTwoPhase"] = _study.DeviceRestriction_ProtectTwoPhase_set
    __swig_getmethods__["ProtectTwoPhase"] = _study.DeviceRestriction_ProtectTwoPhase_get
    if _newclass:ProtectTwoPhase = _swig_property(_study.DeviceRestriction_ProtectTwoPhase_get, _study.DeviceRestriction_ProtectTwoPhase_set)
    __swig_setmethods__["ProtectThreePhase"] = _study.DeviceRestriction_ProtectThreePhase_set
    __swig_getmethods__["ProtectThreePhase"] = _study.DeviceRestriction_ProtectThreePhase_get
    if _newclass:ProtectThreePhase = _swig_property(_study.DeviceRestriction_ProtectThreePhase_get, _study.DeviceRestriction_ProtectThreePhase_set)
    __swig_setmethods__["FilterIDs"] = _study.DeviceRestriction_FilterIDs_set
    __swig_getmethods__["FilterIDs"] = _study.DeviceRestriction_FilterIDs_get
    if _newclass:FilterIDs = _swig_property(_study.DeviceRestriction_FilterIDs_get, _study.DeviceRestriction_FilterIDs_set)
    __swig_destroy__ = _study.delete_DeviceRestriction
    __del__ = lambda self : None;
DeviceRestriction_swigregister = _study.DeviceRestriction_swigregister
DeviceRestriction_swigregister(DeviceRestriction)

class NetworkReduction(_object):
    """Proxy of C++ NetworkReduction class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkReduction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkReduction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(NetworkReduction self) -> NetworkReduction"""
        this = _study.new_NetworkReduction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_NetworkReduction
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """Run(NetworkReduction self, std::list< CYMString > Networks)"""
        return _study.NetworkReduction_Run(self, *args)

    __swig_setmethods__["ProtectedDevices"] = _study.NetworkReduction_ProtectedDevices_set
    __swig_getmethods__["ProtectedDevices"] = _study.NetworkReduction_ProtectedDevices_get
    if _newclass:ProtectedDevices = _swig_property(_study.NetworkReduction_ProtectedDevices_get, _study.NetworkReduction_ProtectedDevices_set)
    __swig_setmethods__["ProtectedNodes"] = _study.NetworkReduction_ProtectedNodes_set
    __swig_getmethods__["ProtectedNodes"] = _study.NetworkReduction_ProtectedNodes_get
    if _newclass:ProtectedNodes = _swig_property(_study.NetworkReduction_ProtectedNodes_get, _study.NetworkReduction_ProtectedNodes_set)
NetworkReduction_swigregister = _study.NetworkReduction_swigregister
NetworkReduction_swigregister(NetworkReduction)

class NetworkDiagnostic(_object):
    """Proxy of C++ NetworkDiagnostic class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkDiagnostic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkDiagnostic, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(NetworkDiagnostic self) -> NetworkDiagnostic"""
        this = _study.new_NetworkDiagnostic()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _study.delete_NetworkDiagnostic
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(NetworkDiagnostic self)
        Run(NetworkDiagnostic self, std::list< CYMString > Networks)
        """
        return _study.NetworkDiagnostic_Run(self, *args)

    __swig_setmethods__["VerificationLevel"] = _study.NetworkDiagnostic_VerificationLevel_set
    __swig_getmethods__["VerificationLevel"] = _study.NetworkDiagnostic_VerificationLevel_get
    if _newclass:VerificationLevel = _swig_property(_study.NetworkDiagnostic_VerificationLevel_get, _study.NetworkDiagnostic_VerificationLevel_set)
    __swig_setmethods__["VerifyLoadFlow"] = _study.NetworkDiagnostic_VerifyLoadFlow_set
    __swig_getmethods__["VerifyLoadFlow"] = _study.NetworkDiagnostic_VerifyLoadFlow_get
    if _newclass:VerifyLoadFlow = _swig_property(_study.NetworkDiagnostic_VerifyLoadFlow_get, _study.NetworkDiagnostic_VerifyLoadFlow_set)
    __swig_setmethods__["VerifyShortCircuit"] = _study.NetworkDiagnostic_VerifyShortCircuit_set
    __swig_getmethods__["VerifyShortCircuit"] = _study.NetworkDiagnostic_VerifyShortCircuit_get
    if _newclass:VerifyShortCircuit = _swig_property(_study.NetworkDiagnostic_VerifyShortCircuit_get, _study.NetworkDiagnostic_VerifyShortCircuit_set)
    __swig_setmethods__["VerifyNetworkProtection"] = _study.NetworkDiagnostic_VerifyNetworkProtection_set
    __swig_getmethods__["VerifyNetworkProtection"] = _study.NetworkDiagnostic_VerifyNetworkProtection_get
    if _newclass:VerifyNetworkProtection = _swig_property(_study.NetworkDiagnostic_VerifyNetworkProtection_get, _study.NetworkDiagnostic_VerifyNetworkProtection_set)
    __swig_setmethods__["VerifyMinimumFault"] = _study.NetworkDiagnostic_VerifyMinimumFault_set
    __swig_getmethods__["VerifyMinimumFault"] = _study.NetworkDiagnostic_VerifyMinimumFault_get
    if _newclass:VerifyMinimumFault = _swig_property(_study.NetworkDiagnostic_VerifyMinimumFault_get, _study.NetworkDiagnostic_VerifyMinimumFault_set)
    __swig_setmethods__["VerifyAnalysisParameters"] = _study.NetworkDiagnostic_VerifyAnalysisParameters_set
    __swig_getmethods__["VerifyAnalysisParameters"] = _study.NetworkDiagnostic_VerifyAnalysisParameters_get
    if _newclass:VerifyAnalysisParameters = _swig_property(_study.NetworkDiagnostic_VerifyAnalysisParameters_get, _study.NetworkDiagnostic_VerifyAnalysisParameters_set)
    __swig_setmethods__["MinimumPowerFactor"] = _study.NetworkDiagnostic_MinimumPowerFactor_set
    __swig_getmethods__["MinimumPowerFactor"] = _study.NetworkDiagnostic_MinimumPowerFactor_get
    if _newclass:MinimumPowerFactor = _swig_property(_study.NetworkDiagnostic_MinimumPowerFactor_get, _study.NetworkDiagnostic_MinimumPowerFactor_set)
    __swig_setmethods__["MinimumSetVoltage"] = _study.NetworkDiagnostic_MinimumSetVoltage_set
    __swig_getmethods__["MinimumSetVoltage"] = _study.NetworkDiagnostic_MinimumSetVoltage_get
    if _newclass:MinimumSetVoltage = _swig_property(_study.NetworkDiagnostic_MinimumSetVoltage_get, _study.NetworkDiagnostic_MinimumSetVoltage_set)
    __swig_setmethods__["MaximumSetVoltage"] = _study.NetworkDiagnostic_MaximumSetVoltage_set
    __swig_getmethods__["MaximumSetVoltage"] = _study.NetworkDiagnostic_MaximumSetVoltage_get
    if _newclass:MaximumSetVoltage = _swig_property(_study.NetworkDiagnostic_MaximumSetVoltage_get, _study.NetworkDiagnostic_MaximumSetVoltage_set)
    __swig_setmethods__["MaximumOverheadLength"] = _study.NetworkDiagnostic_MaximumOverheadLength_set
    __swig_getmethods__["MaximumOverheadLength"] = _study.NetworkDiagnostic_MaximumOverheadLength_get
    if _newclass:MaximumOverheadLength = _swig_property(_study.NetworkDiagnostic_MaximumOverheadLength_get, _study.NetworkDiagnostic_MaximumOverheadLength_set)
    __swig_setmethods__["MaximumCableLength"] = _study.NetworkDiagnostic_MaximumCableLength_set
    __swig_getmethods__["MaximumCableLength"] = _study.NetworkDiagnostic_MaximumCableLength_get
    if _newclass:MaximumCableLength = _swig_property(_study.NetworkDiagnostic_MaximumCableLength_get, _study.NetworkDiagnostic_MaximumCableLength_set)
NetworkDiagnostic_swigregister = _study.NetworkDiagnostic_swigregister
NetworkDiagnostic_swigregister(NetworkDiagnostic)

info = _StudyInfo()

# This file is compatible with both classic and new-style classes.


