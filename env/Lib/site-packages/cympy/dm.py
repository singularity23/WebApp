# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Data Model module.
Contains all the data model of CYME.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dm', [dirname(__file__)])
        except ImportError:
            import _dm
            return _dm
        if fp is not None:
            try:
                _mod = imp.load_module('_dm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dm = swig_import_helper()
    del swig_import_helper
else:
    import _dm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err
class _CymPyDataObj(_object):
    """Proxy of C++ _CymPyDataObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CymPyDataObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _CymPyDataObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dm.delete__CymPyDataObj
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    def GetObjType(self) -> "CYMString" :
        """GetObjType(_CymPyDataObj self) -> CYMString"""
        return _dm._CymPyDataObj_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(_CymPyDataObj self, CYMString PropertyID) -> CYMString"""
        return _dm._CymPyDataObj_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(_CymPyDataObj self, CYMString Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, double Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, int Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, bool Value, CYMString PropertyID)
        """
        return _dm._CymPyDataObj_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(_CymPyDataObj self, CYMString KeywordID) -> CYMString"""
        return _dm._CymPyDataObj_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(_CymPyDataObj self, CYMString Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, double Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, int Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, bool Value, CYMString KeywordID)
        """
        return _dm._CymPyDataObj_SetUDD(self, *args)

_CymPyDataObj_swigregister = _dm._CymPyDataObj_swigregister
_CymPyDataObj_swigregister(_CymPyDataObj)

class Equipment(_CymPyDataObj):
    """Proxy of C++ Equipment class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Equipment, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Equipment, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Equipment self) -> Equipment"""
        this = _dm.new_Equipment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Equipment
    __del__ = lambda self : None;
    __str__ = lambda self: "(ID: '" + self.ID + "', Type: " + str(self.Type) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Equipment self, Equipment rObj) -> bool"""
        return _dm.Equipment___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Equipment self, Equipment rObj) -> bool"""
        return _dm.Equipment___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Equipment self) -> CYMString"""
        return _dm.Equipment_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Equipment self, CYMString PropertyID) -> CYMString"""
        return _dm.Equipment_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Equipment self, CYMString PropertyID) -> int"""
        return _dm.Equipment_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Equipment self, CYMString Value, CYMString PropertyID)
        SetValue(Equipment self, double Value, CYMString PropertyID)
        SetValue(Equipment self, int Value, CYMString PropertyID)
        SetValue(Equipment self, bool Value, CYMString PropertyID)
        """
        return _dm.Equipment_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Equipment self, CYMString KeywordID) -> CYMString"""
        return _dm.Equipment_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Equipment self, CYMString Value, CYMString KeywordID)
        SetUDD(Equipment self, double Value, CYMString KeywordID)
        SetUDD(Equipment self, int Value, CYMString KeywordID)
        SetUDD(Equipment self, bool Value, CYMString KeywordID)
        """
        return _dm.Equipment_SetUDD(self, *args)

    def SetSymbol(self, *args) -> "void" :
        """
        SetSymbol(Equipment self, int SymbolID, SymbolStatus::SymbolStatusEnum Status=Undefined)
        SetSymbol(Equipment self, int SymbolID)
        """
        return _dm.Equipment_SetSymbol(self, *args)

    __swig_getmethods__["ID"] = _dm.Equipment_ID_get
    if _newclass:ID = _swig_property(_dm.Equipment_ID_get)
    __swig_getmethods__["Type"] = _dm.Equipment_Type_get
    if _newclass:Type = _swig_property(_dm.Equipment_Type_get)
    def getEquipment(*args) -> "Equipment *" :
        """getEquipment(CEquipmentDBData * pEquip) -> Equipment"""
        return _dm.Equipment_getEquipment(*args)

    if _newclass:getEquipment = staticmethod(getEquipment)
    __swig_getmethods__["getEquipment"] = lambda x: getEquipment
    def fillEquipment(self, *args) -> "void" :
        """fillEquipment(Equipment self, CEquipmentDBData * pEquip)"""
        return _dm.Equipment_fillEquipment(self, *args)

Equipment_swigregister = _dm.Equipment_swigregister
Equipment_swigregister(Equipment)

def Equipment_getEquipment(*args) -> "Equipment *" :
  """Equipment_getEquipment(CEquipmentDBData * pEquip) -> Equipment"""
  return _dm.Equipment_getEquipment(*args)

class LoadValue(_object):
    """Proxy of C++ LoadValue class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(LoadValue self, double Value1, double Value2) -> LoadValue
        __init__(LoadValue self) -> LoadValue
        """
        this = _dm.new_LoadValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_LoadValue
    __del__ = lambda self : None;
    __str__ = lambda self: "Value1: '" + str(self.Value1) + "', Value2: '" + str(self.Value2) + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Value1"] = _dm.LoadValue_Value1_set
    __swig_getmethods__["Value1"] = _dm.LoadValue_Value1_get
    if _newclass:Value1 = _swig_property(_dm.LoadValue_Value1_get, _dm.LoadValue_Value1_set)
    __swig_setmethods__["Value2"] = _dm.LoadValue_Value2_set
    __swig_getmethods__["Value2"] = _dm.LoadValue_Value2_get
    if _newclass:Value2 = _swig_property(_dm.LoadValue_Value2_get, _dm.LoadValue_Value2_set)
LoadValue_swigregister = _dm.LoadValue_swigregister
LoadValue_swigregister(LoadValue)

class Meter(_object):
    """Proxy of C++ Meter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Meter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Meter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Meter self) -> Meter"""
        this = _dm.new_Meter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Meter
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Connected"] = _dm.Meter_Connected_set
    __swig_getmethods__["Connected"] = _dm.Meter_Connected_get
    if _newclass:Connected = _swig_property(_dm.Meter_Connected_get, _dm.Meter_Connected_set)
    __swig_setmethods__["IsTotalDemand"] = _dm.Meter_IsTotalDemand_set
    __swig_getmethods__["IsTotalDemand"] = _dm.Meter_IsTotalDemand_get
    if _newclass:IsTotalDemand = _swig_property(_dm.Meter_IsTotalDemand_get, _dm.Meter_IsTotalDemand_set)
    __swig_setmethods__["LoadValueType"] = _dm.Meter_LoadValueType_set
    __swig_getmethods__["LoadValueType"] = _dm.Meter_LoadValueType_get
    if _newclass:LoadValueType = _swig_property(_dm.Meter_LoadValueType_get, _dm.Meter_LoadValueType_set)
    __swig_setmethods__["DemandA"] = _dm.Meter_DemandA_set
    __swig_getmethods__["DemandA"] = _dm.Meter_DemandA_get
    if _newclass:DemandA = _swig_property(_dm.Meter_DemandA_get, _dm.Meter_DemandA_set)
    __swig_setmethods__["DemandB"] = _dm.Meter_DemandB_set
    __swig_getmethods__["DemandB"] = _dm.Meter_DemandB_get
    if _newclass:DemandB = _swig_property(_dm.Meter_DemandB_get, _dm.Meter_DemandB_set)
    __swig_setmethods__["DemandC"] = _dm.Meter_DemandC_set
    __swig_getmethods__["DemandC"] = _dm.Meter_DemandC_get
    if _newclass:DemandC = _swig_property(_dm.Meter_DemandC_get, _dm.Meter_DemandC_set)
    __swig_setmethods__["DemandTotal"] = _dm.Meter_DemandTotal_set
    __swig_getmethods__["DemandTotal"] = _dm.Meter_DemandTotal_get
    if _newclass:DemandTotal = _swig_property(_dm.Meter_DemandTotal_get, _dm.Meter_DemandTotal_set)
Meter_swigregister = _dm.Meter_swigregister
Meter_swigregister(Meter)

class AbnormalCondition(_object):
    """Proxy of C++ AbnormalCondition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbnormalCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbnormalCondition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(AbnormalCondition self) -> AbnormalCondition"""
        this = _dm.new_AbnormalCondition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_AbnormalCondition
    __del__ = lambda self : None;
    __str__ = lambda self: "Type: " + str(self.Type) + ", ID: '" + self.ID + "', ItemType: " + str(self.ItemType)
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_getmethods__["Type"] = _dm.AbnormalCondition_Type_get
    if _newclass:Type = _swig_property(_dm.AbnormalCondition_Type_get)
    __swig_getmethods__["ID"] = _dm.AbnormalCondition_ID_get
    if _newclass:ID = _swig_property(_dm.AbnormalCondition_ID_get)
    __swig_getmethods__["ItemType"] = _dm.AbnormalCondition_ItemType_get
    if _newclass:ItemType = _swig_property(_dm.AbnormalCondition_ItemType_get)
    __swig_getmethods__["NetworkID"] = _dm.AbnormalCondition_NetworkID_get
    if _newclass:NetworkID = _swig_property(_dm.AbnormalCondition_NetworkID_get)
AbnormalCondition_swigregister = _dm.AbnormalCondition_swigregister
AbnormalCondition_swigregister(AbnormalCondition)

class Load(_object):
    """Proxy of C++ Load class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Load, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Load, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Load self) -> Load"""
        this = _dm.new_Load()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Load
    __del__ = lambda self : None;
    __str__ = lambda self: "(DeviceNumber: '" + self.DeviceNumber + "', Type: " + str(self.Type) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Load self, Load rObj) -> bool"""
        return _dm.Load___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Load self, Load rObj) -> bool"""
        return _dm.Load___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Load self) -> CYMString"""
        return _dm.Load_GetObjType(self)

    def ListCustomers(self) -> "std::list< CYMString >" :
        """ListCustomers(Load self) -> std::list< CYMString >"""
        return _dm.Load_ListCustomers(self)

    def DeleteCustomerLoad(self, *args) -> "void" :
        """DeleteCustomerLoad(Load self, CYMString CustomerNumber)"""
        return _dm.Load_DeleteCustomerLoad(self, *args)

    def AddCustomerLoad(self, *args) -> "void" :
        """AddCustomerLoad(Load self, CYMString CustomerNumber)"""
        return _dm.Load_AddCustomerLoad(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """
        GetValue(Load self, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, CYMString LoadModelID=_T( "DEFAULT" )) -> CYMString
        GetValue(Load self, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase) -> CYMString
        """
        return _dm.Load_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Load self, CYMString Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, CYMString Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, double Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, double Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, int Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, int Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        SetValue(Load self, bool Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase, 
            CYMString LoadModelID=_T( "DEFAULT" ))
        SetValue(Load self, bool Value, CYMString PropertyID, CYMString CustomerNumber, PyPhase::PhaseEnum Phase)
        """
        return _dm.Load_SetValue(self, *args)

    def SetPhaseType(self, *args) -> "void" :
        """SetPhaseType(Load self, PyPhaseType::PyPhaseTypeEnum PhaseType)"""
        return _dm.Load_SetPhaseType(self, *args)

    def GetPhaseType(self) -> "PyPhaseType::PyPhaseTypeEnum" :
        """GetPhaseType(Load self) -> PyPhaseType::PyPhaseTypeEnum"""
        return _dm.Load_GetPhaseType(self)

    __swig_getmethods__["Type"] = _dm.Load_Type_get
    if _newclass:Type = _swig_property(_dm.Load_Type_get)
    __swig_getmethods__["DeviceNumber"] = _dm.Load_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_dm.Load_DeviceNumber_get)
Load_swigregister = _dm.Load_swigregister
Load_swigregister(Load)

class Device(_CymPyDataObj):
    """Proxy of C++ Device class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Device self) -> Device"""
        this = _dm.new_Device()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Device
    __del__ = lambda self : None;
    __str__ = lambda self: "(DeviceNumber: '" + self.DeviceNumber + "', DeviceType: " + str(self.DeviceType) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Device self, Device rObj) -> bool"""
        return _dm.Device___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Device self, Device rObj) -> bool"""
        return _dm.Device___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Device self, CYMString PropertyID) -> CYMString"""
        return _dm.Device_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Device self, CYMString PropertyID) -> int"""
        return _dm.Device_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Device self, CYMString Value, CYMString PropertyID)
        SetValue(Device self, double Value, CYMString PropertyID)
        SetValue(Device self, int Value, CYMString PropertyID)
        SetValue(Device self, bool Value, CYMString PropertyID)
        """
        return _dm.Device_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Device self, CYMString KeywordID) -> CYMString"""
        return _dm.Device_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Device self, CYMString Value, CYMString KeywordID)
        SetUDD(Device self, double Value, CYMString KeywordID)
        SetUDD(Device self, int Value, CYMString KeywordID)
        SetUDD(Device self, bool Value, CYMString KeywordID)
        """
        return _dm.Device_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Device self) -> CYMString"""
        return _dm.Device_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Device self) -> bool"""
        return _dm.Device_IsModified(self)

    __swig_getmethods__["DeviceNumber"] = _dm.Device_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_dm.Device_DeviceNumber_get)
    __swig_getmethods__["DeviceType"] = _dm.Device_DeviceType_get
    if _newclass:DeviceType = _swig_property(_dm.Device_DeviceType_get)
    __swig_getmethods__["SectionID"] = _dm.Device_SectionID_get
    if _newclass:SectionID = _swig_property(_dm.Device_SectionID_get)
    __swig_getmethods__["NetworkID"] = _dm.Device_NetworkID_get
    if _newclass:NetworkID = _swig_property(_dm.Device_NetworkID_get)
    __swig_getmethods__["EquipmentID"] = _dm.Device_EquipmentID_get
    if _newclass:EquipmentID = _swig_property(_dm.Device_EquipmentID_get)
    __swig_getmethods__["EquipmentType"] = _dm.Device_EquipmentType_get
    if _newclass:EquipmentType = _swig_property(_dm.Device_EquipmentType_get)
    __swig_getmethods__["Location"] = _dm.Device_Location_get
    if _newclass:Location = _swig_property(_dm.Device_Location_get)
Device_swigregister = _dm.Device_swigregister
Device_swigregister(Device)

class Node(_CymPyDataObj):
    """Proxy of C++ CymPyNode class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CymPyNode self) -> Node"""
        this = _dm.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Node
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.ID + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Node self, Node rObj) -> bool"""
        return _dm.Node___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Node self, Node rObj) -> bool"""
        return _dm.Node___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Node self, CYMString PropertyID) -> CYMString"""
        return _dm.Node_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Node self, CYMString PropertyID) -> int"""
        return _dm.Node_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Node self, CYMString Value, CYMString PropertyID)
        SetValue(Node self, double Value, CYMString PropertyID)
        SetValue(Node self, int Value, CYMString PropertyID)
        SetValue(Node self, bool Value, CYMString PropertyID)
        """
        return _dm.Node_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Node self, CYMString KeywordID) -> CYMString"""
        return _dm.Node_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Node self, CYMString Value, CYMString KeywordID)
        SetUDD(Node self, double Value, CYMString KeywordID)
        SetUDD(Node self, int Value, CYMString KeywordID)
        SetUDD(Node self, bool Value, CYMString KeywordID)
        """
        return _dm.Node_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Node self) -> CYMString"""
        return _dm.Node_GetObjType(self)

    def GetType(self) -> "NodeType::NodeTypeEnum" :
        """GetType(Node self) -> NodeType::NodeTypeEnum"""
        return _dm.Node_GetType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Node self) -> bool"""
        return _dm.Node_IsModified(self)

    __swig_setmethods__["ID"] = _dm.Node_ID_set
    __swig_getmethods__["ID"] = _dm.Node_ID_get
    if _newclass:ID = _swig_property(_dm.Node_ID_get, _dm.Node_ID_set)
    __swig_setmethods__["X"] = _dm.Node_X_set
    __swig_getmethods__["X"] = _dm.Node_X_get
    if _newclass:X = _swig_property(_dm.Node_X_get, _dm.Node_X_set)
    __swig_setmethods__["Y"] = _dm.Node_Y_set
    __swig_getmethods__["Y"] = _dm.Node_Y_get
    if _newclass:Y = _swig_property(_dm.Node_Y_get, _dm.Node_Y_set)
Node_swigregister = _dm.Node_swigregister
Node_swigregister(Node)

class Section(_CymPyDataObj):
    """Proxy of C++ Section class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Section, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Section, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Section self) -> Section"""
        this = _dm.new_Section()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Section
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.ID + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Section self, Section rObj) -> bool"""
        return _dm.Section___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Section self, Section rObj) -> bool"""
        return _dm.Section___ne__(self, *args)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Section self, CYMString PropertyID) -> CYMString"""
        return _dm.Section_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Section self, CYMString PropertyID) -> int"""
        return _dm.Section_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Section self, CYMString Value, CYMString PropertyID)
        SetValue(Section self, double Value, CYMString PropertyID)
        SetValue(Section self, int Value, CYMString PropertyID)
        SetValue(Section self, bool Value, CYMString PropertyID)
        """
        return _dm.Section_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Section self, CYMString KeywordID) -> CYMString"""
        return _dm.Section_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Section self, CYMString Value, CYMString KeywordID)
        SetUDD(Section self, double Value, CYMString KeywordID)
        SetUDD(Section self, int Value, CYMString KeywordID)
        SetUDD(Section self, bool Value, CYMString KeywordID)
        """
        return _dm.Section_SetUDD(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Section self) -> CYMString"""
        return _dm.Section_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Section self) -> bool"""
        return _dm.Section_IsModified(self)

    def AddIntermediatePoint(self, *args) -> "void" :
        """AddIntermediatePoint(Section self, double X, double Y)"""
        return _dm.Section_AddIntermediatePoint(self, *args)

    def DeleteIntermediatePoint(self, *args) -> "void" :
        """DeleteIntermediatePoint(Section self, int Index)"""
        return _dm.Section_DeleteIntermediatePoint(self, *args)

    def ListIntermediatePoints(self) -> "std::list< Point >" :
        """ListIntermediatePoints(Section self) -> std::list< Point >"""
        return _dm.Section_ListIntermediatePoints(self)

    def ListDevices(self, *args) -> "std::list< Device >" :
        """
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString DeviceNumberRegEx=_T( ".*" ), 
            CYMString EquipmentIDRegEx=_T( ".*" )) -> std::list< Device >
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices, CYMString DeviceNumberRegEx=_T( ".*" )) -> std::list< Device >
        ListDevices(Section self, DeviceType::DeviceTypeEnum DeviceType=AllDevices) -> std::list< Device >
        ListDevices(Section self) -> std::list< Device >
        """
        return _dm.Section_ListDevices(self, *args)

    def __get_len(self) -> "double" :
        """__get_len(Section self) -> double"""
        return _dm.Section___get_len(self)

    def __set_len(self, *args) -> "void" :
        """__set_len(Section self, double Value)"""
        return _dm.Section___set_len(self, *args)

    def __get_clen(self) -> "double" :
        """__get_clen(Section self) -> double"""
        return _dm.Section___get_clen(self)

    def __set_clen(self, *args) -> "void" :
        """__set_clen(Section self, double Value)"""
        return _dm.Section___set_clen(self, *args)

    __swig_getmethods__["Length"] = __get_len
    __swig_setmethods__["Length"] = __set_len
    __swig_getmethods__["CalculatedLength"] = __get_clen
    __swig_setmethods__["CalculatedLength"] = __set_clen

    if _newclass:
        Length = property(__get_len, __set_len)
        CalculatedLength = property(__get_clen, __set_clen)

    __swig_getmethods__["ID"] = _dm.Section_ID_get
    if _newclass:ID = _swig_property(_dm.Section_ID_get)
    __swig_getmethods__["FromNode"] = _dm.Section_FromNode_get
    if _newclass:FromNode = _swig_property(_dm.Section_FromNode_get)
    __swig_getmethods__["ToNode"] = _dm.Section_ToNode_get
    if _newclass:ToNode = _swig_property(_dm.Section_ToNode_get)
    __swig_getmethods__["TertiaryNode"] = _dm.Section_TertiaryNode_get
    if _newclass:TertiaryNode = _swig_property(_dm.Section_TertiaryNode_get)
Section_swigregister = _dm.Section_swigregister
Section_swigregister(Section)

class Instrument(_CymPyDataObj):
    """Proxy of C++ Instrument class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Instrument, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Instrument, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Instrument self) -> Instrument"""
        this = _dm.new_Instrument()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Instrument
    __del__ = lambda self : None;
    __str__ = lambda self: "(InstrumentNumber: '" + self.InstrumentNumber + "', InstrumentType: " + str(self.InstrumentType) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Instrument self, Instrument rObj) -> bool"""
        return _dm.Instrument___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Instrument self, Instrument rObj) -> bool"""
        return _dm.Instrument___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Instrument self) -> CYMString"""
        return _dm.Instrument_GetObjType(self)

    def IsModified(self) -> "bool" :
        """IsModified(Instrument self) -> bool"""
        return _dm.Instrument_IsModified(self)

    def GetDevice(self) -> "Device *" :
        """GetDevice(Instrument self) -> Device"""
        return _dm.Instrument_GetDevice(self)

    def GetNode(self) -> "CymPyNode *" :
        """GetNode(Instrument self) -> Node"""
        return _dm.Instrument_GetNode(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Instrument self, CYMString PropertyID) -> CYMString"""
        return _dm.Instrument_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Instrument self, CYMString PropertyID) -> int"""
        return _dm.Instrument_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Instrument self, CYMString Value, CYMString PropertyID)
        SetValue(Instrument self, double Value, CYMString PropertyID)
        SetValue(Instrument self, int Value, CYMString PropertyID)
        SetValue(Instrument self, bool Value, CYMString PropertyID)
        """
        return _dm.Instrument_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Instrument self, CYMString KeywordID) -> CYMString"""
        return _dm.Instrument_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Instrument self, CYMString Value, CYMString KeywordID)
        SetUDD(Instrument self, double Value, CYMString KeywordID)
        SetUDD(Instrument self, int Value, CYMString KeywordID)
        SetUDD(Instrument self, bool Value, CYMString KeywordID)
        """
        return _dm.Instrument_SetUDD(self, *args)

    __swig_getmethods__["InstrumentNumber"] = _dm.Instrument_InstrumentNumber_get
    if _newclass:InstrumentNumber = _swig_property(_dm.Instrument_InstrumentNumber_get)
    __swig_getmethods__["InstrumentType"] = _dm.Instrument_InstrumentType_get
    if _newclass:InstrumentType = _swig_property(_dm.Instrument_InstrumentType_get)
Instrument_swigregister = _dm.Instrument_swigregister
Instrument_swigregister(Instrument)

class LoadModel(_object):
    """Proxy of C++ LoadModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadModel self) -> LoadModel"""
        this = _dm.new_LoadModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_LoadModel
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "', ID: " + str(self.ID) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Name"] = _dm.LoadModel_Name_set
    __swig_getmethods__["Name"] = _dm.LoadModel_Name_get
    if _newclass:Name = _swig_property(_dm.LoadModel_Name_get, _dm.LoadModel_Name_set)
    __swig_setmethods__["ID"] = _dm.LoadModel_ID_set
    __swig_getmethods__["ID"] = _dm.LoadModel_ID_get
    if _newclass:ID = _swig_property(_dm.LoadModel_ID_get, _dm.LoadModel_ID_set)
LoadModel_swigregister = _dm.LoadModel_swigregister
LoadModel_swigregister(LoadModel)

class CustomerType(_object):
    """Proxy of C++ CustomerType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomerType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomerType, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CustomerType self) -> CustomerType"""
        this = _dm.new_CustomerType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_CustomerType
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def GetValue(self, *args) -> "CYMString" :
        """GetValue(CustomerType self, CYMString PropertyID) -> CYMString"""
        return _dm.CustomerType_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(CustomerType self, CYMString PropertyID) -> int"""
        return _dm.CustomerType_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(CustomerType self, CYMString Value, CYMString PropertyID)
        SetValue(CustomerType self, double Value, CYMString PropertyID)
        SetValue(CustomerType self, int Value, CYMString PropertyID)
        SetValue(CustomerType self, bool Value, CYMString PropertyID)
        """
        return _dm.CustomerType_SetValue(self, *args)

    __swig_setmethods__["Name"] = _dm.CustomerType_Name_set
    __swig_getmethods__["Name"] = _dm.CustomerType_Name_get
    if _newclass:Name = _swig_property(_dm.CustomerType_Name_get, _dm.CustomerType_Name_set)
    def getCustomerType(*args) -> "CustomerType *" :
        """getCustomerType(CYMString strName) -> CustomerType"""
        return _dm.CustomerType_getCustomerType(*args)

    if _newclass:getCustomerType = staticmethod(getCustomerType)
    __swig_getmethods__["getCustomerType"] = lambda x: getCustomerType
CustomerType_swigregister = _dm.CustomerType_swigregister
CustomerType_swigregister(CustomerType)

def CustomerType_getCustomerType(*args) -> "CustomerType *" :
  """CustomerType_getCustomerType(CYMString strName) -> CustomerType"""
  return _dm.CustomerType_getCustomerType(*args)

class Point(_object):
    """Proxy of C++ Point class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Point self) -> Point"""
        this = _dm.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_Point
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" :
        """__eq__(Point self, Point rObj) -> bool"""
        return _dm.Point___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Point self, Point rObj) -> bool"""
        return _dm.Point___ne__(self, *args)

    def cymprint(self):
        return "(X: " + str(self.X) + ", Y: " + str(self.Y) + ")"

    __str__ = cymprint
    __repr__  = cymprint
    del cymprint

    __swig_setmethods__["X"] = _dm.Point_X_set
    __swig_getmethods__["X"] = _dm.Point_X_get
    if _newclass:X = _swig_property(_dm.Point_X_get, _dm.Point_X_set)
    __swig_setmethods__["Y"] = _dm.Point_Y_set
    __swig_getmethods__["Y"] = _dm.Point_Y_get
    if _newclass:Y = _swig_property(_dm.Point_Y_get, _dm.Point_Y_set)
Point_swigregister = _dm.Point_swigregister
Point_swigregister(Point)


def Describe(*args) -> "std::list< DescribeObj >" :
  """Describe(CYMString const ObjectType) -> std::list< DescribeObj >"""
  return _dm.Describe(*args)
class DescribeObj(_object):
    """Proxy of C++ DescribeObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DescribeObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DescribeObj, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DescribeObj self) -> DescribeObj"""
        this = _dm.new_DescribeObj()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dm.delete_DescribeObj
    __del__ = lambda self : None;
    __str__ = lambda self: "(Name: '" + self.Name + "', Type: '" + self.Type + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_getmethods__["Name"] = _dm.DescribeObj_Name_get
    if _newclass:Name = _swig_property(_dm.DescribeObj_Name_get)
    __swig_getmethods__["Type"] = _dm.DescribeObj_Type_get
    if _newclass:Type = _swig_property(_dm.DescribeObj_Type_get)
    __swig_getmethods__["Description"] = _dm.DescribeObj_Description_get
    if _newclass:Description = _swig_property(_dm.DescribeObj_Description_get)
    __swig_getmethods__["DefaultValue"] = _dm.DescribeObj_DefaultValue_get
    if _newclass:DefaultValue = _swig_property(_dm.DescribeObj_DefaultValue_get)
    __swig_getmethods__["Units"] = _dm.DescribeObj_Units_get
    if _newclass:Units = _swig_property(_dm.DescribeObj_Units_get)
DescribeObj_swigregister = _dm.DescribeObj_swigregister
DescribeObj_swigregister(DescribeObj)

# This file is compatible with both classic and new-style classes.


