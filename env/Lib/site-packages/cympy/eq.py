# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python equipment module.
Contains functions and classes for working with CYME equipment.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eq', [dirname(__file__)])
        except ImportError:
            import _eq
            return _eq
        if fp is not None:
            try:
                _mod = imp.load_module('_eq', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eq = swig_import_helper()
    del swig_import_helper
else:
    import _eq
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err
class _CymPyDataObj(_object):
    """Proxy of C++ _CymPyDataObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CymPyDataObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _CymPyDataObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eq.delete__CymPyDataObj
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    def GetObjType(self) -> "CYMString" :
        """GetObjType(_CymPyDataObj self) -> CYMString"""
        return _eq._CymPyDataObj_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(_CymPyDataObj self, CYMString PropertyID) -> CYMString"""
        return _eq._CymPyDataObj_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(_CymPyDataObj self, CYMString Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, double Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, int Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, bool Value, CYMString PropertyID)
        """
        return _eq._CymPyDataObj_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(_CymPyDataObj self, CYMString KeywordID) -> CYMString"""
        return _eq._CymPyDataObj_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(_CymPyDataObj self, CYMString Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, double Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, int Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, bool Value, CYMString KeywordID)
        """
        return _eq._CymPyDataObj_SetUDD(self, *args)

_CymPyDataObj_swigregister = _eq._CymPyDataObj_swigregister
_CymPyDataObj_swigregister(_CymPyDataObj)

class Equipment(_CymPyDataObj):
    """Proxy of C++ Equipment class"""
    __swig_setmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Equipment, name, value)
    __swig_getmethods__ = {}
    for _s in [_CymPyDataObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Equipment, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Equipment self) -> Equipment"""
        this = _eq.new_Equipment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _eq.delete_Equipment
    __del__ = lambda self : None;
    __str__ = lambda self: "(ID: '" + self.ID + "', Type: " + str(self.Type) + ")"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Equipment self, Equipment rObj) -> bool"""
        return _eq.Equipment___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Equipment self, Equipment rObj) -> bool"""
        return _eq.Equipment___ne__(self, *args)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Equipment self) -> CYMString"""
        return _eq.Equipment_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Equipment self, CYMString PropertyID) -> CYMString"""
        return _eq.Equipment_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Equipment self, CYMString PropertyID) -> int"""
        return _eq.Equipment_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Equipment self, CYMString Value, CYMString PropertyID)
        SetValue(Equipment self, double Value, CYMString PropertyID)
        SetValue(Equipment self, int Value, CYMString PropertyID)
        SetValue(Equipment self, bool Value, CYMString PropertyID)
        """
        return _eq.Equipment_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(Equipment self, CYMString KeywordID) -> CYMString"""
        return _eq.Equipment_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(Equipment self, CYMString Value, CYMString KeywordID)
        SetUDD(Equipment self, double Value, CYMString KeywordID)
        SetUDD(Equipment self, int Value, CYMString KeywordID)
        SetUDD(Equipment self, bool Value, CYMString KeywordID)
        """
        return _eq.Equipment_SetUDD(self, *args)

    def SetSymbol(self, *args) -> "void" :
        """
        SetSymbol(Equipment self, int SymbolID, SymbolStatus::SymbolStatusEnum Status=Undefined)
        SetSymbol(Equipment self, int SymbolID)
        """
        return _eq.Equipment_SetSymbol(self, *args)

    __swig_getmethods__["ID"] = _eq.Equipment_ID_get
    if _newclass:ID = _swig_property(_eq.Equipment_ID_get)
    __swig_getmethods__["Type"] = _eq.Equipment_Type_get
    if _newclass:Type = _swig_property(_eq.Equipment_Type_get)
    def getEquipment(*args) -> "Equipment *" :
        """getEquipment(CEquipmentDBData * pEquip) -> Equipment"""
        return _eq.Equipment_getEquipment(*args)

    if _newclass:getEquipment = staticmethod(getEquipment)
    __swig_getmethods__["getEquipment"] = lambda x: getEquipment
    def fillEquipment(self, *args) -> "void" :
        """fillEquipment(Equipment self, CEquipmentDBData * pEquip)"""
        return _eq.Equipment_fillEquipment(self, *args)

Equipment_swigregister = _eq.Equipment_swigregister
Equipment_swigregister(Equipment)

def Equipment_getEquipment(*args) -> "Equipment *" :
  """Equipment_getEquipment(CEquipmentDBData * pEquip) -> Equipment"""
  return _eq.Equipment_getEquipment(*args)


def Delete(*args) -> "void" :
  """Delete(CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType)"""
  return _eq.Delete(*args)

def GetEquipment(*args) -> "Equipment *" :
  """GetEquipment(CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType) -> Equipment"""
  return _eq.GetEquipment(*args)

def Add(*args) -> "Equipment *" :
  """
    Add(CYMString Message, Severity::SeverityEnum Severity=Error)
    Add(CYMString Message)
    Add(CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType) -> Equipment
    """
  return _eq.Add(*args)

def ListEquipments(*args) -> "std::list< Equipment >" :
  """
    ListEquipments(EquipmentType::EquipmentTypeEnum EquipmentType, CYMString EquipmentIdFilter=_T( ".*" )) -> std::list< Equipment >
    ListEquipments(EquipmentType::EquipmentTypeEnum EquipmentType) -> std::list< Equipment >
    """
  return _eq.ListEquipments(*args)

def GetValue(*args) -> "CYMString" :
  """GetValue(CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType) -> CYMString"""
  return _eq.GetValue(*args)

def Execute(*args) -> "int" :
  """Execute(CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType) -> int"""
  return _eq.Execute(*args)

def SetValue(*args) -> "void" :
  """
    SetValue(CYMString Value, CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType)
    SetValue(double Value, CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType)
    SetValue(int Value, CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType)
    SetValue(bool Value, CYMString PropertyID, CYMString EquipmentID, EquipmentType::EquipmentTypeEnum EquipmentType)
    """
  return _eq.SetValue(*args)
# This file is compatible with both classic and new-style classes.


