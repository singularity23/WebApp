# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Report Manager module.
Contains functions and classes for generating reports.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rm', [dirname(__file__)])
        except ImportError:
            import _rm
            return _rm
        if fp is not None:
            try:
                _mod = imp.load_module('_rm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rm = swig_import_helper()
    del swig_import_helper
else:
    import _rm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rm.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" :
        """value(SwigPyIterator self) -> PyObject *"""
        return _rm.SwigPyIterator_value(self)

    def incr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" :
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _rm.SwigPyIterator_incr(self, n)

    def decr(self, n : 'size_t'=1) -> "swig::SwigPyIterator *" :
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _rm.SwigPyIterator_decr(self, n)

    def distance(self, *args) -> "ptrdiff_t" :
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _rm.SwigPyIterator_distance(self, *args)

    def equal(self, *args) -> "bool" :
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _rm.SwigPyIterator_equal(self, *args)

    def copy(self) -> "swig::SwigPyIterator *" :
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _rm.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *" :
        """next(SwigPyIterator self) -> PyObject *"""
        return _rm.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *" :
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _rm.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *" :
        """previous(SwigPyIterator self) -> PyObject *"""
        return _rm.SwigPyIterator_previous(self)

    def advance(self, *args) -> "swig::SwigPyIterator *" :
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _rm.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args) -> "bool" :
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _rm.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _rm.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args) -> "swig::SwigPyIterator &" :
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _rm.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args) -> "swig::SwigPyIterator &" :
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _rm.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args) -> "swig::SwigPyIterator *" :
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _rm.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args) -> "ptrdiff_t" :
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _rm.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _rm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import cympy.enums
import cympy.err
class ListPoint(_object):
    """Proxy of C++ std::list<(Point)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListPoint, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" :
        """iterator(ListPoint self) -> SwigPyIterator"""
        return _rm.ListPoint_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" :
        """__nonzero__(ListPoint self) -> bool"""
        return _rm.ListPoint___nonzero__(self)

    def __bool__(self) -> "bool" :
        """__bool__(ListPoint self) -> bool"""
        return _rm.ListPoint___bool__(self)

    def __len__(self) -> "std::list< Point >::size_type" :
        """__len__(ListPoint self) -> std::list< Point >::size_type"""
        return _rm.ListPoint___len__(self)

    def pop(self) -> "std::list< Point >::value_type" :
        """pop(ListPoint self) -> Point"""
        return _rm.ListPoint_pop(self)

    def __getslice__(self, *args) -> "std::list< Point,std::allocator< Point > > *" :
        """__getslice__(ListPoint self, std::list< Point >::difference_type i, std::list< Point >::difference_type j) -> ListPoint"""
        return _rm.ListPoint___getslice__(self, *args)

    def __setslice__(self, *args) -> "void" :
        """
        __setslice__(ListPoint self, std::list< Point >::difference_type i, std::list< Point >::difference_type j, ListPoint v=std::list< Point,std::allocator< Point > >())
        __setslice__(ListPoint self, std::list< Point >::difference_type i, std::list< Point >::difference_type j)
        """
        return _rm.ListPoint___setslice__(self, *args)

    def __delslice__(self, *args) -> "void" :
        """__delslice__(ListPoint self, std::list< Point >::difference_type i, std::list< Point >::difference_type j)"""
        return _rm.ListPoint___delslice__(self, *args)

    def __delitem__(self, *args) -> "void" :
        """
        __delitem__(ListPoint self, std::list< Point >::difference_type i)
        __delitem__(ListPoint self, PySliceObject * slice)
        """
        return _rm.ListPoint___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::list< Point >::value_type const &" :
        """
        __getitem__(ListPoint self, PySliceObject * slice) -> ListPoint
        __getitem__(ListPoint self, std::list< Point >::difference_type i) -> Point
        """
        return _rm.ListPoint___getitem__(self, *args)

    def __setitem__(self, *args) -> "void" :
        """
        __setitem__(ListPoint self, PySliceObject * slice, ListPoint v)
        __setitem__(ListPoint self, PySliceObject * slice)
        __setitem__(ListPoint self, std::list< Point >::difference_type i, Point x)
        """
        return _rm.ListPoint___setitem__(self, *args)

    def append(self, *args) -> "void" :
        """append(ListPoint self, Point x)"""
        return _rm.ListPoint_append(self, *args)

    def empty(self) -> "bool" :
        """empty(ListPoint self) -> bool"""
        return _rm.ListPoint_empty(self)

    def size(self) -> "std::list< Point >::size_type" :
        """size(ListPoint self) -> std::list< Point >::size_type"""
        return _rm.ListPoint_size(self)

    def clear(self) -> "void" :
        """clear(ListPoint self)"""
        return _rm.ListPoint_clear(self)

    def swap(self, *args) -> "void" :
        """swap(ListPoint self, ListPoint v)"""
        return _rm.ListPoint_swap(self, *args)

    def get_allocator(self) -> "std::list< Point >::allocator_type" :
        """get_allocator(ListPoint self) -> std::list< Point >::allocator_type"""
        return _rm.ListPoint_get_allocator(self)

    def begin(self) -> "std::list< Point >::iterator" :
        """begin(ListPoint self) -> std::list< Point >::iterator"""
        return _rm.ListPoint_begin(self)

    def end(self) -> "std::list< Point >::iterator" :
        """end(ListPoint self) -> std::list< Point >::iterator"""
        return _rm.ListPoint_end(self)

    def rbegin(self) -> "std::list< Point >::reverse_iterator" :
        """rbegin(ListPoint self) -> std::list< Point >::reverse_iterator"""
        return _rm.ListPoint_rbegin(self)

    def rend(self) -> "std::list< Point >::reverse_iterator" :
        """rend(ListPoint self) -> std::list< Point >::reverse_iterator"""
        return _rm.ListPoint_rend(self)

    def pop_back(self) -> "void" :
        """pop_back(ListPoint self)"""
        return _rm.ListPoint_pop_back(self)

    def erase(self, *args) -> "std::list< Point >::iterator" :
        """
        erase(ListPoint self, std::list< Point >::iterator pos) -> std::list< Point >::iterator
        erase(ListPoint self, std::list< Point >::iterator first, std::list< Point >::iterator last) -> std::list< Point >::iterator
        """
        return _rm.ListPoint_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(Point)> self) -> ListPoint
        __init__(std::list<(Point)> self, ListPoint arg2) -> ListPoint
        __init__(std::list<(Point)> self, std::list< Point >::size_type size) -> ListPoint
        __init__(std::list<(Point)> self, std::list< Point >::size_type size, Point value) -> ListPoint
        """
        this = _rm.new_ListPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" :
        """push_back(ListPoint self, Point x)"""
        return _rm.ListPoint_push_back(self, *args)

    def front(self) -> "std::list< Point >::value_type const &" :
        """front(ListPoint self) -> Point"""
        return _rm.ListPoint_front(self)

    def back(self) -> "std::list< Point >::value_type const &" :
        """back(ListPoint self) -> Point"""
        return _rm.ListPoint_back(self)

    def assign(self, *args) -> "void" :
        """assign(ListPoint self, std::list< Point >::size_type n, Point x)"""
        return _rm.ListPoint_assign(self, *args)

    def resize(self, *args) -> "void" :
        """
        resize(ListPoint self, std::list< Point >::size_type new_size)
        resize(ListPoint self, std::list< Point >::size_type new_size, Point x)
        """
        return _rm.ListPoint_resize(self, *args)

    def insert(self, *args) -> "void" :
        """
        insert(ListPoint self, std::list< Point >::iterator pos, Point x) -> std::list< Point >::iterator
        insert(ListPoint self, std::list< Point >::iterator pos, std::list< Point >::size_type n, Point x)
        """
        return _rm.ListPoint_insert(self, *args)

    def pop_front(self) -> "void" :
        """pop_front(ListPoint self)"""
        return _rm.ListPoint_pop_front(self)

    def push_front(self, *args) -> "void" :
        """push_front(ListPoint self, Point x)"""
        return _rm.ListPoint_push_front(self, *args)

    def reverse(self) -> "void" :
        """reverse(ListPoint self)"""
        return _rm.ListPoint_reverse(self)

    __swig_destroy__ = _rm.delete_ListPoint
    __del__ = lambda self : None;
ListPoint_swigregister = _rm.ListPoint_swigregister
ListPoint_swigregister(ListPoint)

class _CymPyDataObj(_object):
    """Proxy of C++ _CymPyDataObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _CymPyDataObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _CymPyDataObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rm.delete__CymPyDataObj
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    def GetObjType(self) -> "CYMString" :
        """GetObjType(_CymPyDataObj self) -> CYMString"""
        return _rm._CymPyDataObj_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(_CymPyDataObj self, CYMString PropertyID) -> CYMString"""
        return _rm._CymPyDataObj_GetValue(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(_CymPyDataObj self, CYMString Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, double Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, int Value, CYMString PropertyID)
        SetValue(_CymPyDataObj self, bool Value, CYMString PropertyID)
        """
        return _rm._CymPyDataObj_SetValue(self, *args)

    def GetUDD(self, *args) -> "CYMString" :
        """GetUDD(_CymPyDataObj self, CYMString KeywordID) -> CYMString"""
        return _rm._CymPyDataObj_GetUDD(self, *args)

    def SetUDD(self, *args) -> "void" :
        """
        SetUDD(_CymPyDataObj self, CYMString Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, double Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, int Value, CYMString KeywordID)
        SetUDD(_CymPyDataObj self, bool Value, CYMString KeywordID)
        """
        return _rm._CymPyDataObj_SetUDD(self, *args)

_CymPyDataObj_swigregister = _rm._CymPyDataObj_swigregister
_CymPyDataObj_swigregister(_CymPyDataObj)

class Point(_object):
    """Proxy of C++ Point class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Point self) -> Point"""
        this = _rm.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_Point
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" :
        """__eq__(Point self, Point rObj) -> bool"""
        return _rm.Point___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Point self, Point rObj) -> bool"""
        return _rm.Point___ne__(self, *args)

    def cymprint(self):
        return "(X: " + str(self.X) + ", Y: " + str(self.Y) + ")"

    __str__ = cymprint
    __repr__  = cymprint
    del cymprint

    __swig_setmethods__["X"] = _rm.Point_X_set
    __swig_getmethods__["X"] = _rm.Point_X_get
    if _newclass:X = _swig_property(_rm.Point_X_get, _rm.Point_X_set)
    __swig_setmethods__["Y"] = _rm.Point_Y_set
    __swig_getmethods__["Y"] = _rm.Point_Y_get
    if _newclass:Y = _swig_property(_rm.Point_Y_get, _rm.Point_Y_set)
Point_swigregister = _rm.Point_swigregister
Point_swigregister(Point)

class SerieList(_object):
    """Proxy of C++ std::list<(Serie)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerieList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerieList, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" :
        """iterator(SerieList self) -> SwigPyIterator"""
        return _rm.SerieList_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" :
        """__nonzero__(SerieList self) -> bool"""
        return _rm.SerieList___nonzero__(self)

    def __bool__(self) -> "bool" :
        """__bool__(SerieList self) -> bool"""
        return _rm.SerieList___bool__(self)

    def __len__(self) -> "std::list< Serie >::size_type" :
        """__len__(SerieList self) -> std::list< Serie >::size_type"""
        return _rm.SerieList___len__(self)

    def pop(self) -> "std::list< Serie >::value_type" :
        """pop(SerieList self) -> Serie"""
        return _rm.SerieList_pop(self)

    def __getslice__(self, *args) -> "std::list< Serie,std::allocator< Serie > > *" :
        """__getslice__(SerieList self, std::list< Serie >::difference_type i, std::list< Serie >::difference_type j) -> SerieList"""
        return _rm.SerieList___getslice__(self, *args)

    def __setslice__(self, *args) -> "void" :
        """
        __setslice__(SerieList self, std::list< Serie >::difference_type i, std::list< Serie >::difference_type j, SerieList v=std::list< Serie,std::allocator< Serie > >())
        __setslice__(SerieList self, std::list< Serie >::difference_type i, std::list< Serie >::difference_type j)
        """
        return _rm.SerieList___setslice__(self, *args)

    def __delslice__(self, *args) -> "void" :
        """__delslice__(SerieList self, std::list< Serie >::difference_type i, std::list< Serie >::difference_type j)"""
        return _rm.SerieList___delslice__(self, *args)

    def __delitem__(self, *args) -> "void" :
        """
        __delitem__(SerieList self, std::list< Serie >::difference_type i)
        __delitem__(SerieList self, PySliceObject * slice)
        """
        return _rm.SerieList___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::list< Serie >::value_type const &" :
        """
        __getitem__(SerieList self, PySliceObject * slice) -> SerieList
        __getitem__(SerieList self, std::list< Serie >::difference_type i) -> Serie
        """
        return _rm.SerieList___getitem__(self, *args)

    def __setitem__(self, *args) -> "void" :
        """
        __setitem__(SerieList self, PySliceObject * slice, SerieList v)
        __setitem__(SerieList self, PySliceObject * slice)
        __setitem__(SerieList self, std::list< Serie >::difference_type i, Serie x)
        """
        return _rm.SerieList___setitem__(self, *args)

    def append(self, *args) -> "void" :
        """append(SerieList self, Serie x)"""
        return _rm.SerieList_append(self, *args)

    def empty(self) -> "bool" :
        """empty(SerieList self) -> bool"""
        return _rm.SerieList_empty(self)

    def size(self) -> "std::list< Serie >::size_type" :
        """size(SerieList self) -> std::list< Serie >::size_type"""
        return _rm.SerieList_size(self)

    def clear(self) -> "void" :
        """clear(SerieList self)"""
        return _rm.SerieList_clear(self)

    def swap(self, *args) -> "void" :
        """swap(SerieList self, SerieList v)"""
        return _rm.SerieList_swap(self, *args)

    def get_allocator(self) -> "std::list< Serie >::allocator_type" :
        """get_allocator(SerieList self) -> std::list< Serie >::allocator_type"""
        return _rm.SerieList_get_allocator(self)

    def begin(self) -> "std::list< Serie >::iterator" :
        """begin(SerieList self) -> std::list< Serie >::iterator"""
        return _rm.SerieList_begin(self)

    def end(self) -> "std::list< Serie >::iterator" :
        """end(SerieList self) -> std::list< Serie >::iterator"""
        return _rm.SerieList_end(self)

    def rbegin(self) -> "std::list< Serie >::reverse_iterator" :
        """rbegin(SerieList self) -> std::list< Serie >::reverse_iterator"""
        return _rm.SerieList_rbegin(self)

    def rend(self) -> "std::list< Serie >::reverse_iterator" :
        """rend(SerieList self) -> std::list< Serie >::reverse_iterator"""
        return _rm.SerieList_rend(self)

    def pop_back(self) -> "void" :
        """pop_back(SerieList self)"""
        return _rm.SerieList_pop_back(self)

    def erase(self, *args) -> "std::list< Serie >::iterator" :
        """
        erase(SerieList self, std::list< Serie >::iterator pos) -> std::list< Serie >::iterator
        erase(SerieList self, std::list< Serie >::iterator first, std::list< Serie >::iterator last) -> std::list< Serie >::iterator
        """
        return _rm.SerieList_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::list<(Serie)> self) -> SerieList
        __init__(std::list<(Serie)> self, SerieList arg2) -> SerieList
        __init__(std::list<(Serie)> self, std::list< Serie >::size_type size) -> SerieList
        __init__(std::list<(Serie)> self, std::list< Serie >::size_type size, Serie value) -> SerieList
        """
        this = _rm.new_SerieList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" :
        """push_back(SerieList self, Serie x)"""
        return _rm.SerieList_push_back(self, *args)

    def front(self) -> "std::list< Serie >::value_type const &" :
        """front(SerieList self) -> Serie"""
        return _rm.SerieList_front(self)

    def back(self) -> "std::list< Serie >::value_type const &" :
        """back(SerieList self) -> Serie"""
        return _rm.SerieList_back(self)

    def assign(self, *args) -> "void" :
        """assign(SerieList self, std::list< Serie >::size_type n, Serie x)"""
        return _rm.SerieList_assign(self, *args)

    def resize(self, *args) -> "void" :
        """
        resize(SerieList self, std::list< Serie >::size_type new_size)
        resize(SerieList self, std::list< Serie >::size_type new_size, Serie x)
        """
        return _rm.SerieList_resize(self, *args)

    def insert(self, *args) -> "void" :
        """
        insert(SerieList self, std::list< Serie >::iterator pos, Serie x) -> std::list< Serie >::iterator
        insert(SerieList self, std::list< Serie >::iterator pos, std::list< Serie >::size_type n, Serie x)
        """
        return _rm.SerieList_insert(self, *args)

    def pop_front(self) -> "void" :
        """pop_front(SerieList self)"""
        return _rm.SerieList_pop_front(self)

    def push_front(self, *args) -> "void" :
        """push_front(SerieList self, Serie x)"""
        return _rm.SerieList_push_front(self, *args)

    def reverse(self) -> "void" :
        """reverse(SerieList self)"""
        return _rm.SerieList_reverse(self)

    __swig_destroy__ = _rm.delete_SerieList
    __del__ = lambda self : None;
SerieList_swigregister = _rm.SerieList_swigregister
SerieList_swigregister(SerieList)


def Show(*args) -> "void" :
  """
    Show(CYMString ReportName, std::list< CYMString,std::allocator< CYMString > > Networks, 
        ReportModeType::ReportModeTypeEnum ReportType)
    """
  return _rm.Show(*args)

def Save(*args) -> "void" :
  """
    Save(CYMString ReportName, std::list< CYMString,std::allocator< CYMString > > Networks, 
        ReportModeType::ReportModeTypeEnum ReportType, CYMString FileName)
    """
  return _rm.Save(*args)

def ListReports() -> "std::list< Report,std::allocator< Report > >" :
  """ListReports() -> std::list< Report,std::allocator< Report > >"""
  return _rm.ListReports()

def GetReport(*args) -> "Report *" :
  """GetReport(CYMString ReportName) -> Report"""
  return _rm.GetReport(*args)

def GetChart(*args) -> "Chart *" :
  """GetChart(ResultKey ResultKey, std::list< SeriesKey,std::allocator< SeriesKey > > Series, UnitCategory::UnitCategoryEnum XAxisUnitCategory) -> Chart"""
  return _rm.GetChart(*args)

def ListResultKeys() -> "std::list< ResultKey,std::allocator< ResultKey > >" :
  """ListResultKeys() -> std::list< ResultKey,std::allocator< ResultKey > >"""
  return _rm.ListResultKeys()
class CustomReport(_object):
    """Proxy of C++ CustomReport class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CustomReport, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CustomReport, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CustomReport self) -> CustomReport
        __init__(CustomReport self, CYMString Title, std::list< CYMString,std::allocator< CYMString > > Headers) -> CustomReport
        """
        this = _rm.new_CustomReport(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_CustomReport
    __del__ = lambda self : None;
    def Show(self) -> "void" :
        """Show(CustomReport self)"""
        return _rm.CustomReport_Show(self)

    def Save(self, *args) -> "void" :
        """Save(CustomReport self, ReportModeType::ReportModeTypeEnum eReportType, CYMString FileName)"""
        return _rm.CustomReport_Save(self, *args)

    def AddRow(self, *args) -> "void" :
        """AddRow(CustomReport self, std::list< ReportCell *,std::allocator< ReportCell * > > Values)"""
        return _rm.CustomReport_AddRow(self, *args)

    __swig_setmethods__["Title"] = _rm.CustomReport_Title_set
    __swig_getmethods__["Title"] = _rm.CustomReport_Title_get
    if _newclass:Title = _swig_property(_rm.CustomReport_Title_get, _rm.CustomReport_Title_set)
    __swig_setmethods__["Headers"] = _rm.CustomReport_Headers_set
    __swig_getmethods__["Headers"] = _rm.CustomReport_Headers_get
    if _newclass:Headers = _swig_property(_rm.CustomReport_Headers_get, _rm.CustomReport_Headers_set)
CustomReport_swigregister = _rm.CustomReport_swigregister
CustomReport_swigregister(CustomReport)

class Report(_object):
    """Proxy of C++ Report class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Report, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Report self) -> Report"""
        this = _rm.new_Report()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_Report
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Name + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def Show(self, *args) -> "void" :
        """Show(Report self, std::list< CYMString,std::allocator< CYMString > > Networks, ReportModeType::ReportModeTypeEnum ReportType)"""
        return _rm.Report_Show(self, *args)

    def Save(self, *args) -> "void" :
        """
        Save(Report self, std::list< CYMString,std::allocator< CYMString > > Networks, ReportModeType::ReportModeTypeEnum ReportType, 
            CYMString FileName)
        """
        return _rm.Report_Save(self, *args)

    __swig_getmethods__["Name"] = _rm.Report_Name_get
    if _newclass:Name = _swig_property(_rm.Report_Name_get)
    __swig_getmethods__["Title"] = _rm.Report_Title_get
    if _newclass:Title = _swig_property(_rm.Report_Title_get)
    __swig_getmethods__["Category"] = _rm.Report_Category_get
    if _newclass:Category = _swig_property(_rm.Report_Category_get)
    __swig_getmethods__["StyleSheet"] = _rm.Report_StyleSheet_get
    if _newclass:StyleSheet = _swig_property(_rm.Report_StyleSheet_get)
Report_swigregister = _rm.Report_swigregister
Report_swigregister(Report)

class ReportCell(_object):
    """Proxy of C++ ReportCell class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReportCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReportCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rm.delete_ReportCell
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(ReportCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.ReportCell_GetType(self)

    __swig_setmethods__["Format"] = _rm.ReportCell_Format_set
    __swig_getmethods__["Format"] = _rm.ReportCell_Format_get
    if _newclass:Format = _swig_property(_rm.ReportCell_Format_get, _rm.ReportCell_Format_set)
ReportCell_swigregister = _rm.ReportCell_swigregister
ReportCell_swigregister(ReportCell)

class IntCell(ReportCell):
    """Proxy of C++ IntCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(IntCell self) -> IntCell
        __init__(IntCell self, int Value) -> IntCell
        __init__(IntCell self, int Value, CellFormat Format) -> IntCell
        """
        this = _rm.new_IntCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_IntCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(IntCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.IntCell_GetType(self)

    __swig_setmethods__["Value"] = _rm.IntCell_Value_set
    __swig_getmethods__["Value"] = _rm.IntCell_Value_get
    if _newclass:Value = _swig_property(_rm.IntCell_Value_get, _rm.IntCell_Value_set)
IntCell_swigregister = _rm.IntCell_swigregister
IntCell_swigregister(IntCell)

class FloatCell(ReportCell):
    """Proxy of C++ FloatCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FloatCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(FloatCell self) -> FloatCell
        __init__(FloatCell self, float Value, int Precision=6) -> FloatCell
        __init__(FloatCell self, float Value) -> FloatCell
        __init__(FloatCell self, float Value, CellFormat Format, int Precision=6) -> FloatCell
        __init__(FloatCell self, float Value, CellFormat Format) -> FloatCell
        """
        this = _rm.new_FloatCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_FloatCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(FloatCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.FloatCell_GetType(self)

    __swig_setmethods__["Value"] = _rm.FloatCell_Value_set
    __swig_getmethods__["Value"] = _rm.FloatCell_Value_get
    if _newclass:Value = _swig_property(_rm.FloatCell_Value_get, _rm.FloatCell_Value_set)
    __swig_setmethods__["Precision"] = _rm.FloatCell_Precision_set
    __swig_getmethods__["Precision"] = _rm.FloatCell_Precision_get
    if _newclass:Precision = _swig_property(_rm.FloatCell_Precision_get, _rm.FloatCell_Precision_set)
FloatCell_swigregister = _rm.FloatCell_swigregister
FloatCell_swigregister(FloatCell)

class StringCell(ReportCell):
    """Proxy of C++ StringCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(StringCell self) -> StringCell
        __init__(StringCell self, CYMString Value) -> StringCell
        __init__(StringCell self, CYMString Value, CellFormat Format) -> StringCell
        """
        this = _rm.new_StringCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_StringCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(StringCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.StringCell_GetType(self)

    __swig_setmethods__["Value"] = _rm.StringCell_Value_set
    __swig_getmethods__["Value"] = _rm.StringCell_Value_get
    if _newclass:Value = _swig_property(_rm.StringCell_Value_get, _rm.StringCell_Value_set)
StringCell_swigregister = _rm.StringCell_swigregister
StringCell_swigregister(StringCell)

class BooleanCell(ReportCell):
    """Proxy of C++ BooleanCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(BooleanCell self) -> BooleanCell
        __init__(BooleanCell self, bool Value) -> BooleanCell
        __init__(BooleanCell self, bool Value, CellFormat Format) -> BooleanCell
        """
        this = _rm.new_BooleanCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_BooleanCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(BooleanCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.BooleanCell_GetType(self)

    __swig_setmethods__["Value"] = _rm.BooleanCell_Value_set
    __swig_getmethods__["Value"] = _rm.BooleanCell_Value_get
    if _newclass:Value = _swig_property(_rm.BooleanCell_Value_get, _rm.BooleanCell_Value_set)
BooleanCell_swigregister = _rm.BooleanCell_swigregister
BooleanCell_swigregister(BooleanCell)

class HyperlinkCell(ReportCell):
    """Proxy of C++ HyperlinkCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperlinkCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperlinkCell, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rm.delete_HyperlinkCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(HyperlinkCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.HyperlinkCell_GetType(self)

    __swig_setmethods__["Text"] = _rm.HyperlinkCell_Text_set
    __swig_getmethods__["Text"] = _rm.HyperlinkCell_Text_get
    if _newclass:Text = _swig_property(_rm.HyperlinkCell_Text_get, _rm.HyperlinkCell_Text_set)
HyperlinkCell_swigregister = _rm.HyperlinkCell_swigregister
HyperlinkCell_swigregister(HyperlinkCell)

class CommandCell(ReportCell):
    """Proxy of C++ CommandCell class"""
    __swig_setmethods__ = {}
    for _s in [ReportCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandCell, name, value)
    __swig_getmethods__ = {}
    for _s in [ReportCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CommandCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CommandCell self) -> CommandCell
        __init__(CommandCell self, CYMString Command, CYMString Text=_T( "Command" )) -> CommandCell
        __init__(CommandCell self, CYMString Command) -> CommandCell
        __init__(CommandCell self, CYMString Command, CYMString Text, CellFormat Format) -> CommandCell
        """
        this = _rm.new_CommandCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_CommandCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(CommandCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.CommandCell_GetType(self)

    __swig_setmethods__["Text"] = _rm.CommandCell_Text_set
    __swig_getmethods__["Text"] = _rm.CommandCell_Text_get
    if _newclass:Text = _swig_property(_rm.CommandCell_Text_get, _rm.CommandCell_Text_set)
    __swig_setmethods__["Command"] = _rm.CommandCell_Command_set
    __swig_getmethods__["Command"] = _rm.CommandCell_Command_get
    if _newclass:Command = _swig_property(_rm.CommandCell_Command_get, _rm.CommandCell_Command_set)
CommandCell_swigregister = _rm.CommandCell_swigregister
CommandCell_swigregister(CommandCell)

class NodeCell(HyperlinkCell):
    """Proxy of C++ NodeCell class"""
    __swig_setmethods__ = {}
    for _s in [HyperlinkCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeCell, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperlinkCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NodeCell self) -> NodeCell
        __init__(NodeCell self, CYMString NodeID, CYMString Text=_T( "" )) -> NodeCell
        __init__(NodeCell self, CYMString NodeID) -> NodeCell
        __init__(NodeCell self, CYMString NodeID, CellFormat Format, CYMString Text=_T( "" )) -> NodeCell
        __init__(NodeCell self, CYMString NodeID, CellFormat Format) -> NodeCell
        """
        this = _rm.new_NodeCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_NodeCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(NodeCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.NodeCell_GetType(self)

    __swig_setmethods__["NodeID"] = _rm.NodeCell_NodeID_set
    __swig_getmethods__["NodeID"] = _rm.NodeCell_NodeID_get
    if _newclass:NodeID = _swig_property(_rm.NodeCell_NodeID_get, _rm.NodeCell_NodeID_set)
NodeCell_swigregister = _rm.NodeCell_swigregister
NodeCell_swigregister(NodeCell)

class DeviceCell(HyperlinkCell):
    """Proxy of C++ DeviceCell class"""
    __swig_setmethods__ = {}
    for _s in [HyperlinkCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceCell, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperlinkCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(DeviceCell self) -> DeviceCell
        __init__(DeviceCell self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CYMString Text=_T( "" )) -> DeviceCell
        __init__(DeviceCell self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType) -> DeviceCell
        __init__(DeviceCell self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CellFormat Format, 
            CYMString Text=_T( "" )) -> DeviceCell
        __init__(DeviceCell self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, CellFormat Format) -> DeviceCell
        """
        this = _rm.new_DeviceCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_DeviceCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(DeviceCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.DeviceCell_GetType(self)

    __swig_setmethods__["DeviceNumber"] = _rm.DeviceCell_DeviceNumber_set
    __swig_getmethods__["DeviceNumber"] = _rm.DeviceCell_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_rm.DeviceCell_DeviceNumber_get, _rm.DeviceCell_DeviceNumber_set)
    __swig_setmethods__["DeviceType"] = _rm.DeviceCell_DeviceType_set
    __swig_getmethods__["DeviceType"] = _rm.DeviceCell_DeviceType_get
    if _newclass:DeviceType = _swig_property(_rm.DeviceCell_DeviceType_get, _rm.DeviceCell_DeviceType_set)
DeviceCell_swigregister = _rm.DeviceCell_swigregister
DeviceCell_swigregister(DeviceCell)

class SectionCell(HyperlinkCell):
    """Proxy of C++ SectionCell class"""
    __swig_setmethods__ = {}
    for _s in [HyperlinkCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SectionCell, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperlinkCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SectionCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(SectionCell self) -> SectionCell
        __init__(SectionCell self, CYMString SectionID, CYMString Text=_T( "" )) -> SectionCell
        __init__(SectionCell self, CYMString SectionID) -> SectionCell
        __init__(SectionCell self, CYMString SectionID, CellFormat Format, CYMString Text=_T( "" )) -> SectionCell
        __init__(SectionCell self, CYMString SectionID, CellFormat Format) -> SectionCell
        """
        this = _rm.new_SectionCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_SectionCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(SectionCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.SectionCell_GetType(self)

    __swig_setmethods__["SectionID"] = _rm.SectionCell_SectionID_set
    __swig_getmethods__["SectionID"] = _rm.SectionCell_SectionID_get
    if _newclass:SectionID = _swig_property(_rm.SectionCell_SectionID_get, _rm.SectionCell_SectionID_set)
SectionCell_swigregister = _rm.SectionCell_swigregister
SectionCell_swigregister(SectionCell)

class NetworkCell(HyperlinkCell):
    """Proxy of C++ NetworkCell class"""
    __swig_setmethods__ = {}
    for _s in [HyperlinkCell]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkCell, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperlinkCell]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkCell, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(NetworkCell self) -> NetworkCell
        __init__(NetworkCell self, CYMString NetworkID, CYMString Text=_T( "" )) -> NetworkCell
        __init__(NetworkCell self, CYMString NetworkID) -> NetworkCell
        __init__(NetworkCell self, CYMString NetworkID, CellFormat Format, CYMString Text=_T( "" )) -> NetworkCell
        __init__(NetworkCell self, CYMString NetworkID, CellFormat Format) -> NetworkCell
        """
        this = _rm.new_NetworkCell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_NetworkCell
    __del__ = lambda self : None;
    def GetType(self) -> "ReportCellType::ReportCellTypeEnum" :
        """GetType(NetworkCell self) -> ReportCellType::ReportCellTypeEnum"""
        return _rm.NetworkCell_GetType(self)

    __swig_setmethods__["NetworkID"] = _rm.NetworkCell_NetworkID_set
    __swig_getmethods__["NetworkID"] = _rm.NetworkCell_NetworkID_get
    if _newclass:NetworkID = _swig_property(_rm.NetworkCell_NetworkID_get, _rm.NetworkCell_NetworkID_set)
NetworkCell_swigregister = _rm.NetworkCell_swigregister
NetworkCell_swigregister(NetworkCell)

class CellFormat(_object):
    """Proxy of C++ CellFormat class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CellFormat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CellFormat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CellFormat self) -> CellFormat"""
        this = _rm.new_CellFormat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_CellFormat
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["BackColor"] = _rm.CellFormat_BackColor_set
    __swig_getmethods__["BackColor"] = _rm.CellFormat_BackColor_get
    if _newclass:BackColor = _swig_property(_rm.CellFormat_BackColor_get, _rm.CellFormat_BackColor_set)
    __swig_setmethods__["TextColor"] = _rm.CellFormat_TextColor_set
    __swig_getmethods__["TextColor"] = _rm.CellFormat_TextColor_get
    if _newclass:TextColor = _swig_property(_rm.CellFormat_TextColor_get, _rm.CellFormat_TextColor_set)
    __swig_setmethods__["Bold"] = _rm.CellFormat_Bold_set
    __swig_getmethods__["Bold"] = _rm.CellFormat_Bold_get
    if _newclass:Bold = _swig_property(_rm.CellFormat_Bold_get, _rm.CellFormat_Bold_set)
    __swig_setmethods__["Italic"] = _rm.CellFormat_Italic_set
    __swig_getmethods__["Italic"] = _rm.CellFormat_Italic_get
    if _newclass:Italic = _swig_property(_rm.CellFormat_Italic_get, _rm.CellFormat_Italic_set)
    __swig_setmethods__["Underlined"] = _rm.CellFormat_Underlined_set
    __swig_getmethods__["Underlined"] = _rm.CellFormat_Underlined_get
    if _newclass:Underlined = _swig_property(_rm.CellFormat_Underlined_get, _rm.CellFormat_Underlined_set)
CellFormat_swigregister = _rm.CellFormat_swigregister
CellFormat_swigregister(CellFormat)

class Chart(_object):
    """Proxy of C++ Chart class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chart, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Chart self) -> Chart"""
        this = _rm.new_Chart()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_Chart
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Title + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def Show(self) -> "void" :
        """Show(Chart self)"""
        return _rm.Chart_Show(self)

    __swig_setmethods__["Title"] = _rm.Chart_Title_set
    __swig_getmethods__["Title"] = _rm.Chart_Title_get
    if _newclass:Title = _swig_property(_rm.Chart_Title_get, _rm.Chart_Title_set)
    __swig_setmethods__["SubTitle"] = _rm.Chart_SubTitle_set
    __swig_getmethods__["SubTitle"] = _rm.Chart_SubTitle_get
    if _newclass:SubTitle = _swig_property(_rm.Chart_SubTitle_get, _rm.Chart_SubTitle_set)
    __swig_setmethods__["Series"] = _rm.Chart_Series_set
    __swig_getmethods__["Series"] = _rm.Chart_Series_get
    if _newclass:Series = _swig_property(_rm.Chart_Series_get, _rm.Chart_Series_set)
    __swig_setmethods__["TitleX"] = _rm.Chart_TitleX_set
    __swig_getmethods__["TitleX"] = _rm.Chart_TitleX_get
    if _newclass:TitleX = _swig_property(_rm.Chart_TitleX_get, _rm.Chart_TitleX_set)
    __swig_setmethods__["TitleY"] = _rm.Chart_TitleY_set
    __swig_getmethods__["TitleY"] = _rm.Chart_TitleY_get
    if _newclass:TitleY = _swig_property(_rm.Chart_TitleY_get, _rm.Chart_TitleY_set)
Chart_swigregister = _rm.Chart_swigregister
Chart_swigregister(Chart)

class Serie(_object):
    """Proxy of C++ Serie class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serie, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Serie self) -> Serie"""
        this = _rm.new_Serie()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_Serie
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Name + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Name"] = _rm.Serie_Name_set
    __swig_getmethods__["Name"] = _rm.Serie_Name_get
    if _newclass:Name = _swig_property(_rm.Serie_Name_get, _rm.Serie_Name_set)
    __swig_setmethods__["Points"] = _rm.Serie_Points_set
    __swig_getmethods__["Points"] = _rm.Serie_Points_get
    if _newclass:Points = _swig_property(_rm.Serie_Points_get, _rm.Serie_Points_set)
    __swig_setmethods__["XUnit"] = _rm.Serie_XUnit_set
    __swig_getmethods__["XUnit"] = _rm.Serie_XUnit_get
    if _newclass:XUnit = _swig_property(_rm.Serie_XUnit_get, _rm.Serie_XUnit_set)
    __swig_setmethods__["YUnit"] = _rm.Serie_YUnit_set
    __swig_getmethods__["YUnit"] = _rm.Serie_YUnit_get
    if _newclass:YUnit = _swig_property(_rm.Serie_YUnit_get, _rm.Serie_YUnit_set)
Serie_swigregister = _rm.Serie_swigregister
Serie_swigregister(Serie)

class SeriesKey(_object):
    """Proxy of C++ SeriesKey class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeriesKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SeriesKey, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(SeriesKey self) -> SeriesKey"""
        this = _rm.new_SeriesKey()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_SeriesKey
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Name + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Name"] = _rm.SeriesKey_Name_set
    __swig_getmethods__["Name"] = _rm.SeriesKey_Name_get
    if _newclass:Name = _swig_property(_rm.SeriesKey_Name_get, _rm.SeriesKey_Name_set)
    __swig_setmethods__["Group"] = _rm.SeriesKey_Group_set
    __swig_getmethods__["Group"] = _rm.SeriesKey_Group_get
    if _newclass:Group = _swig_property(_rm.SeriesKey_Group_get, _rm.SeriesKey_Group_set)
    __swig_setmethods__["Suffix"] = _rm.SeriesKey_Suffix_set
    __swig_getmethods__["Suffix"] = _rm.SeriesKey_Suffix_get
    if _newclass:Suffix = _swig_property(_rm.SeriesKey_Suffix_get, _rm.SeriesKey_Suffix_set)
SeriesKey_swigregister = _rm.SeriesKey_swigregister
SeriesKey_swigregister(SeriesKey)

class ResultKey(_object):
    """Proxy of C++ ResultKey class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResultKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResultKey, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ResultKey self) -> ResultKey"""
        this = _rm.new_ResultKey()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _rm.delete_ResultKey
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.ItemID + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Group"] = _rm.ResultKey_Group_set
    __swig_getmethods__["Group"] = _rm.ResultKey_Group_get
    if _newclass:Group = _swig_property(_rm.ResultKey_Group_get, _rm.ResultKey_Group_set)
    __swig_setmethods__["Type"] = _rm.ResultKey_Type_set
    __swig_getmethods__["Type"] = _rm.ResultKey_Type_get
    if _newclass:Type = _swig_property(_rm.ResultKey_Type_get, _rm.ResultKey_Type_set)
    __swig_setmethods__["ItemID"] = _rm.ResultKey_ItemID_set
    __swig_getmethods__["ItemID"] = _rm.ResultKey_ItemID_get
    if _newclass:ItemID = _swig_property(_rm.ResultKey_ItemID_get, _rm.ResultKey_ItemID_set)
    __swig_setmethods__["Context"] = _rm.ResultKey_Context_set
    __swig_getmethods__["Context"] = _rm.ResultKey_Context_get
    if _newclass:Context = _swig_property(_rm.ResultKey_Context_get, _rm.ResultKey_Context_set)
ResultKey_swigregister = _rm.ResultKey_swigregister
ResultKey_swigregister(ResultKey)

# This file is compatible with both classic and new-style classes.


