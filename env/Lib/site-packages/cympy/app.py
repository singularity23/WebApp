# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Application module.
Contains functions and classes for working with general parameters of the application.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_app', [dirname(__file__)])
        except ImportError:
            import _app
            return _app
        if fp is not None:
            try:
                _mod = imp.load_module('_app', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _app = swig_import_helper()
    del swig_import_helper
else:
    import _app
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err

def _GetVersionInfo() -> "CYMString" :
  """_GetVersionInfo() -> CYMString"""
  return _app._GetVersionInfo()

def ActivateRefresh(*args) -> "void" :
  """ActivateRefresh(bool Activate)"""
  return _app.ActivateRefresh(*args)

def Print() -> "void" :
  """Print()"""
  return _app.Print()

def ShowMessage(*args) -> "void" :
  """
    ShowMessage(CYMString Message, CYMString Caption=_T( "" ))
    ShowMessage(CYMString Message)
    """
  return _app.ShowMessage(*args)

def GetMessages(*args) -> "std::list< Message >" :
  """
    GetMessages(Severity::SeverityEnum Severity=All) -> std::list< Message >
    GetMessages() -> std::list< Message >
    """
  return _app.GetMessages(*args)

def ToggleAbnormalConditions() -> "void" :
  """ToggleAbnormalConditions()"""
  return _app.ToggleAbnormalConditions()

def GetKeyword(*args) -> "Keyword *" :
  """GetKeyword(CYMString KeywordID) -> Keyword"""
  return _app.GetKeyword(*args)

def ListKeywords() -> "std::list< Keyword >" :
  """ListKeywords() -> std::list< Keyword >"""
  return _app.ListKeywords()

def ExportActiveView(*args) -> "void" :
  """ExportActiveView(CYMString const Path, ImageFormat::ImageFormatEnum Format)"""
  return _app.ExportActiveView(*args)

def GetInputParameterAsText(*args) -> "CYMString" :
  """GetInputParameterAsText(CYMString VariableName) -> CYMString"""
  return _app.GetInputParameterAsText(*args)

def GetInputParameterType(*args) -> "ParameterType::ParameterTypeEnum" :
  """GetInputParameterType(CYMString VariableName) -> ParameterType::ParameterTypeEnum"""
  return _app.GetInputParameterType(*args)
class _EnvironmentSettings(_object):
    """Proxy of C++ _EnvironmentSettings class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _EnvironmentSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _EnvironmentSettings, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(_EnvironmentSettings self) -> _EnvironmentSettings"""
        this = _app.new__EnvironmentSettings()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _app.delete__EnvironmentSettings
    __del__ = lambda self : None;
    def __get_sou(self) -> "int" :
        """__get_sou(_EnvironmentSettings self) -> int"""
        return _app._EnvironmentSettings___get_sou(self)

    def __set_sou(self, *args) -> "void" :
        """__set_sou(_EnvironmentSettings self, int Value)"""
        return _app._EnvironmentSettings___set_sou(self, *args)

    def __get_lou(self) -> "int" :
        """__get_lou(_EnvironmentSettings self) -> int"""
        return _app._EnvironmentSettings___get_lou(self)

    def __set_lou(self, *args) -> "void" :
        """__set_lou(_EnvironmentSettings self, int Value)"""
        return _app._EnvironmentSettings___set_lou(self, *args)

    def __get_sf(self) -> "double" :
        """__get_sf(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_sf(self)

    def __set_sf(self, *args) -> "void" :
        """__set_sf(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_sf(self, *args)

    def __get_bpacmva(self) -> "double" :
        """__get_bpacmva(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_bpacmva(self)

    def __set_bpacmva(self, *args) -> "void" :
        """__set_bpacmva(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_bpacmva(self, *args)

    def __get_bpdckw(self) -> "double" :
        """__get_bpdckw(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_bpdckw(self)

    def __set_bpdckw(self, *args) -> "void" :
        """__set_bpdckw(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_bpdckw(self, *args)

    def __get_bv(self) -> "double" :
        """__get_bv(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_bv(self)

    def __set_bv(self, *args) -> "void" :
        """__set_bv(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_bv(self, *args)

    def __get_ot(self) -> "double" :
        """__get_ot(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_ot(self)

    def __set_ot(self, *args) -> "void" :
        """__set_ot(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_ot(self, *args)

    def __get_aer(self) -> "double" :
        """__get_aer(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_aer(self)

    def __set_aer(self, *args) -> "void" :
        """__set_aer(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_aer(self, *args)

    def __get_cr(self) -> "int" :
        """__get_cr(_EnvironmentSettings self) -> int"""
        return _app._EnvironmentSettings___get_cr(self)

    def __set_cr(self, *args) -> "void" :
        """__set_cr(_EnvironmentSettings self, int Value)"""
        return _app._EnvironmentSettings___set_cr(self, *args)

    def __get_emb(self) -> "bool" :
        """__get_emb(_EnvironmentSettings self) -> bool"""
        return _app._EnvironmentSettings___get_emb(self)

    def __set_emb(self, *args) -> "void" :
        """__set_emb(_EnvironmentSettings self, bool Value)"""
        return _app._EnvironmentSettings___set_emb(self, *args)

    def __get_batch(self) -> "bool" :
        """__get_batch(_EnvironmentSettings self) -> bool"""
        return _app._EnvironmentSettings___get_batch(self)

    def __set_batch(self, *args) -> "void" :
        """__set_batch(_EnvironmentSettings self, bool Value)"""
        return _app._EnvironmentSettings___set_batch(self, *args)

    def __get_som(self) -> "SectionOrientationMode::SectionOrientationModeEnum" :
        """__get_som(_EnvironmentSettings self) -> SectionOrientationMode::SectionOrientationModeEnum"""
        return _app._EnvironmentSettings___get_som(self)

    def __set_som(self, *args) -> "void" :
        """__set_som(_EnvironmentSettings self, SectionOrientationMode::SectionOrientationModeEnum Value)"""
        return _app._EnvironmentSettings___set_som(self, *args)

    def __get_csl(self) -> "double" :
        """__get_csl(_EnvironmentSettings self) -> double"""
        return _app._EnvironmentSettings___get_csl(self)

    def __set_csl(self, *args) -> "void" :
        """__set_csl(_EnvironmentSettings self, double Value)"""
        return _app._EnvironmentSettings___set_csl(self, *args)

    def HasDataValidationOption(self, *args) -> "bool" :
        """HasDataValidationOption(_EnvironmentSettings self, DataValidationOption::DataValidationOptionEnum arg2) -> bool"""
        return _app._EnvironmentSettings_HasDataValidationOption(self, *args)

    def SetDataValidationOption(self, *args) -> "bool" :
        """SetDataValidationOption(_EnvironmentSettings self, DataValidationOption::DataValidationOptionEnum Value, bool Enable) -> bool"""
        return _app._EnvironmentSettings_SetDataValidationOption(self, *args)

    __swig_getmethods__["SystemOfUnits"] = __get_sou
    __swig_setmethods__["SystemOfUnits"] = __set_sou
    __swig_getmethods__["LengthOfUnits"] = __get_lou
    __swig_setmethods__["LengthOfUnits"] = __set_lou
    __swig_getmethods__["SystemFrequency"] = __get_sf
    __swig_setmethods__["SystemFrequency"] = __set_sf
    __swig_getmethods__["BasePower_AC_MVA"] = __get_bpacmva
    __swig_setmethods__["BasePower_AC_MVA"] = __set_bpacmva
    __swig_getmethods__["BasePower_DC_KW"] = __get_bpdckw
    __swig_setmethods__["BasePower_DC_KW"] = __set_bpdckw
    __swig_getmethods__["BaseVoltage"] = __get_bv
    __swig_setmethods__["BaseVoltage"] = __set_bv
    __swig_getmethods__["OutsideTemperature"] = __get_ot
    __swig_setmethods__["OutsideTemperature"] = __set_ot
    __swig_getmethods__["AverageEarthResistivity"] = __get_aer
    __swig_setmethods__["AverageEarthResistivity"] = __set_aer
    __swig_getmethods__["ConductorResistance"] = __get_cr
    __swig_setmethods__["ConductorResistance"] = __set_cr
    __swig_getmethods__["Embedded"] = __get_emb
    __swig_setmethods__["Embedded"] = __set_emb
    __swig_getmethods__["Batch"] = __get_batch
    __swig_setmethods__["Batch"] = __set_batch
    __swig_getmethods__["SectionOrientationMode"] = __get_som
    __swig_setmethods__["SectionOrientationMode"] = __set_som
    __swig_getmethods__["CustomSectionLength"] = __get_csl
    __swig_setmethods__["CustomSectionLength"] = __set_csl

    if _newclass:
        SystemOfUnits = property(__get_sou, __set_sou)
        LengthOfUnits = property(__get_lou, __set_lou)
        SystemFrequency = property(__get_sf, __set_sf)
        BasePower_AC_MVA = property(__get_bpacmva, __set_bpacmva)
        BasePower_DC_KW = property(__get_bpdckw, __set_bpdckw)
        BaseVoltage = property(__get_bv, __set_bv)
        OutsideTemperature = property(__get_ot, __set_ot)
        AverageEarthResistivity = property(__get_aer, __set_aer)
        ConductorResistance = property(__get_cr, __set_cr)
        Embedded = property(__get_emb, __set_emb)
        Batch = property(__get_batch, __set_batch)
        SectionOrientationMode = property(__get_som, __set_som)
        CustomSectionLength = property(__get_csl, __set_csl)

_EnvironmentSettings_swigregister = _app._EnvironmentSettings_swigregister
_EnvironmentSettings_swigregister(_EnvironmentSettings)

class Keyword(_object):
    """Proxy of C++ Keyword class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Keyword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Keyword, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Keyword self) -> Keyword"""
        this = _app.new_Keyword()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _app.delete_Keyword
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Name + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_getmethods__["Name"] = _app.Keyword_Name_get
    if _newclass:Name = _swig_property(_app.Keyword_Name_get)
    __swig_getmethods__["Type"] = _app.Keyword_Type_get
    if _newclass:Type = _swig_property(_app.Keyword_Type_get)
    __swig_getmethods__["Description"] = _app.Keyword_Description_get
    if _newclass:Description = _swig_property(_app.Keyword_Description_get)
    __swig_getmethods__["Unit"] = _app.Keyword_Unit_get
    if _newclass:Unit = _swig_property(_app.Keyword_Unit_get)
    __swig_getmethods__["Expression"] = _app.Keyword_Expression_get
    if _newclass:Expression = _swig_property(_app.Keyword_Expression_get)
    __swig_getmethods__["Header"] = _app.Keyword_Header_get
    if _newclass:Header = _swig_property(_app.Keyword_Header_get)
    __swig_getmethods__["Width"] = _app.Keyword_Width_get
    if _newclass:Width = _swig_property(_app.Keyword_Width_get)
    __swig_getmethods__["Precision"] = _app.Keyword_Precision_get
    if _newclass:Precision = _swig_property(_app.Keyword_Precision_get)
    __swig_getmethods__["IsUserDefined"] = _app.Keyword_IsUserDefined_get
    if _newclass:IsUserDefined = _swig_property(_app.Keyword_IsUserDefined_get)
    __swig_getmethods__["IsReadOnly"] = _app.Keyword_IsReadOnly_get
    if _newclass:IsReadOnly = _swig_property(_app.Keyword_IsReadOnly_get)
    __swig_getmethods__["DisplayType"] = _app.Keyword_DisplayType_get
    if _newclass:DisplayType = _swig_property(_app.Keyword_DisplayType_get)
Keyword_swigregister = _app.Keyword_swigregister
Keyword_swigregister(Keyword)

class _InternalResults(_object):
    """Proxy of C++ _InternalResults class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _InternalResults, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _InternalResults, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(_InternalResults self) -> _InternalResults"""
        this = _app.new__InternalResults()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _app.delete__InternalResults
    __del__ = lambda self : None;
    def Add(self, *args) -> "void" :
        """
        Add(_InternalResults self, CYMString ID, double Value)
        Add(_InternalResults self, CYMString ID, int Value)
        Add(_InternalResults self, CYMString ID, CYMString Value)
        Add(_InternalResults self, CYMString ID, bool Value)
        """
        return _app._InternalResults_Add(self, *args)

    def AddPath(self, *args) -> "void" :
        """AddPath(_InternalResults self, CYMString ID, CYMString Value)"""
        return _app._InternalResults_AddPath(self, *args)

    def Delete(self, *args) -> "void" :
        """Delete(_InternalResults self, CYMString ID)"""
        return _app._InternalResults_Delete(self, *args)

    def Get(self, *args) -> "CYMString" :
        """Get(_InternalResults self, CYMString ID) -> CYMString"""
        return _app._InternalResults_Get(self, *args)

    def Clear(self) -> "void" :
        """Clear(_InternalResults self)"""
        return _app._InternalResults_Clear(self)

    def GetCount(self) -> "int" :
        """GetCount(_InternalResults self) -> int"""
        return _app._InternalResults_GetCount(self)

_InternalResults_swigregister = _app._InternalResults_swigregister
_InternalResults_swigregister(_InternalResults)

class Localization(_object):
    """Proxy of C++ Localization class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Localization, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Localization, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Localization self) -> Localization"""
        this = _app.new_Localization()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _app.delete_Localization
    __del__ = lambda self : None;
    __str__ = lambda self: "(Key: '" + self.Key + "', Value: '" + self.Value + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Localization self, Localization rObj) -> bool"""
        return _app.Localization___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Localization self, Localization rObj) -> bool"""
        return _app.Localization___ne__(self, *args)

    __swig_getmethods__["Key"] = _app.Localization_Key_get
    if _newclass:Key = _swig_property(_app.Localization_Key_get)
    __swig_getmethods__["Value"] = _app.Localization_Value_get
    if _newclass:Value = _swig_property(_app.Localization_Value_get)
Localization_swigregister = _app.Localization_swigregister
Localization_swigregister(Localization)

class Message(_object):
    """Proxy of C++ Message class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Message, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Message, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Message self) -> Message"""
        this = _app.new_Message()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _app.delete_Message
    __del__ = lambda self : None;
    __str__ = lambda self: "'" + self.Text + "'"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    def __eq__(self, *args) -> "bool" :
        """__eq__(Message self, Message rObj) -> bool"""
        return _app.Message___eq__(self, *args)

    def __ne__(self, *args) -> "bool" :
        """__ne__(Message self, Message rObj) -> bool"""
        return _app.Message___ne__(self, *args)

    def GetLocalizations(self) -> "std::list< Localization >" :
        """GetLocalizations(Message self) -> std::list< Localization >"""
        return _app.Message_GetLocalizations(self)

    def GetDetails(self) -> "std::list< CYMString >" :
        """GetDetails(Message self) -> std::list< CYMString >"""
        return _app.Message_GetDetails(self)

    __swig_getmethods__["Category"] = _app.Message_Category_get
    if _newclass:Category = _swig_property(_app.Message_Category_get)
    __swig_getmethods__["Code"] = _app.Message_Code_get
    if _newclass:Code = _swig_property(_app.Message_Code_get)
    __swig_getmethods__["Text"] = _app.Message_Text_get
    if _newclass:Text = _swig_property(_app.Message_Text_get)
    __swig_getmethods__["Severity"] = _app.Message_Severity_get
    if _newclass:Severity = _swig_property(_app.Message_Severity_get)
Message_swigregister = _app.Message_swigregister
Message_swigregister(Message)

# This file is compatible with both classic and new-style classes.


