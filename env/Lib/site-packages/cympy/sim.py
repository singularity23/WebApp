# Copyright 2016 Eaton. 
# All rights reserved. 
# 
# Proprietary to Eaton in the U.S. and other countries. 
# You are not permitted to use this file without the prior written consent of 
# Eaton or without a valid contract with Eaton (CYME). 
# 
# For additional information, contact: cymesupport@eaton.com 
# 
# WARNING: Do not manually edit this file. 
# 




"""
CYME Python Simulation module.
Contains functions and classes for working with simulations.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sim', [dirname(__file__)])
        except ImportError:
            import _sim
            return _sim
        if fp is not None:
            try:
                _mod = imp.load_module('_sim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sim = swig_import_helper()
    del swig_import_helper
else:
    import _sim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import cympy.enums
import cympy.err
class LoadValue(_object):
    """Proxy of C++ LoadValue class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadValue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(LoadValue self, double Value1, double Value2) -> LoadValue
        __init__(LoadValue self) -> LoadValue
        """
        this = _sim.new_LoadValue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LoadValue
    __del__ = lambda self : None;
    __str__ = lambda self: "Value1: '" + str(self.Value1) + "', Value2: '" + str(self.Value2) + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Value1"] = _sim.LoadValue_Value1_set
    __swig_getmethods__["Value1"] = _sim.LoadValue_Value1_get
    if _newclass:Value1 = _swig_property(_sim.LoadValue_Value1_get, _sim.LoadValue_Value1_set)
    __swig_setmethods__["Value2"] = _sim.LoadValue_Value2_set
    __swig_getmethods__["Value2"] = _sim.LoadValue_Value2_get
    if _newclass:Value2 = _swig_property(_sim.LoadValue_Value2_get, _sim.LoadValue_Value2_set)
LoadValue_swigregister = _sim.LoadValue_swigregister
LoadValue_swigregister(LoadValue)

class Meter(_object):
    """Proxy of C++ Meter class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Meter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Meter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Meter self) -> Meter"""
        this = _sim.new_Meter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_Meter
    __del__ = lambda self : None;
    __hash__ = lambda self: hash(self.__repr__())
    __swig_setmethods__["Connected"] = _sim.Meter_Connected_set
    __swig_getmethods__["Connected"] = _sim.Meter_Connected_get
    if _newclass:Connected = _swig_property(_sim.Meter_Connected_get, _sim.Meter_Connected_set)
    __swig_setmethods__["IsTotalDemand"] = _sim.Meter_IsTotalDemand_set
    __swig_getmethods__["IsTotalDemand"] = _sim.Meter_IsTotalDemand_get
    if _newclass:IsTotalDemand = _swig_property(_sim.Meter_IsTotalDemand_get, _sim.Meter_IsTotalDemand_set)
    __swig_setmethods__["LoadValueType"] = _sim.Meter_LoadValueType_set
    __swig_getmethods__["LoadValueType"] = _sim.Meter_LoadValueType_get
    if _newclass:LoadValueType = _swig_property(_sim.Meter_LoadValueType_get, _sim.Meter_LoadValueType_set)
    __swig_setmethods__["DemandA"] = _sim.Meter_DemandA_set
    __swig_getmethods__["DemandA"] = _sim.Meter_DemandA_get
    if _newclass:DemandA = _swig_property(_sim.Meter_DemandA_get, _sim.Meter_DemandA_set)
    __swig_setmethods__["DemandB"] = _sim.Meter_DemandB_set
    __swig_getmethods__["DemandB"] = _sim.Meter_DemandB_get
    if _newclass:DemandB = _swig_property(_sim.Meter_DemandB_get, _sim.Meter_DemandB_set)
    __swig_setmethods__["DemandC"] = _sim.Meter_DemandC_set
    __swig_getmethods__["DemandC"] = _sim.Meter_DemandC_get
    if _newclass:DemandC = _swig_property(_sim.Meter_DemandC_get, _sim.Meter_DemandC_set)
    __swig_setmethods__["DemandTotal"] = _sim.Meter_DemandTotal_set
    __swig_getmethods__["DemandTotal"] = _sim.Meter_DemandTotal_get
    if _newclass:DemandTotal = _swig_property(_sim.Meter_DemandTotal_get, _sim.Meter_DemandTotal_set)
Meter_swigregister = _sim.Meter_swigregister
Meter_swigregister(Meter)


def IsValidResults(*args) -> "bool" :
  """IsValidResults(CYMString NetworkID, SimulationType::SimulationTypeEnum SimulationType) -> bool"""
  return _sim.IsValidResults(*args)
class Simulation(_object):
    """Proxy of C++ Simulation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def GetType(self) -> "SimulationType::SimulationTypeEnum" :
        """GetType(Simulation self) -> SimulationType::SimulationTypeEnum"""
        return _sim.Simulation_GetType(self)

    def GetObjType(self) -> "CYMString" :
        """GetObjType(Simulation self) -> CYMString"""
        return _sim.Simulation_GetObjType(self)

    def GetValue(self, *args) -> "CYMString" :
        """GetValue(Simulation self, CYMString PropertyID) -> CYMString"""
        return _sim.Simulation_GetValue(self, *args)

    def Execute(self, *args) -> "int" :
        """Execute(Simulation self, CYMString PropertyID) -> int"""
        return _sim.Simulation_Execute(self, *args)

    def SetValue(self, *args) -> "void" :
        """
        SetValue(Simulation self, CYMString Value, CYMString PropertyID)
        SetValue(Simulation self, double Value, CYMString PropertyID)
        SetValue(Simulation self, int Value, CYMString PropertyID)
        SetValue(Simulation self, bool Value, CYMString PropertyID)
        """
        return _sim.Simulation_SetValue(self, *args)

    __swig_destroy__ = _sim.delete_Simulation
    __del__ = lambda self : None;
Simulation_swigregister = _sim.Simulation_swigregister
Simulation_swigregister(Simulation)

class LoadFlow(Simulation):
    """Proxy of C++ LoadFlow class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadFlow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadFlow self) -> LoadFlow"""
        this = _sim.new_LoadFlow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LoadFlow
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(LoadFlow self)
        Run(LoadFlow self, std::list< CYMString > Networks)
        """
        return _sim.LoadFlow_Run(self, *args)

    def SetLoadingLimit(self, *args) -> "void" :
        """SetLoadingLimit(LoadFlow self, ItemType::ItemTypeEnum ItemType, FlagLevel::FlagLevelEnum LimitCategory, double Value)"""
        return _sim.LoadFlow_SetLoadingLimit(self, *args)

    def GetLoadingLimit(self, *args) -> "double" :
        """GetLoadingLimit(LoadFlow self, ItemType::ItemTypeEnum ItemType, FlagLevel::FlagLevelEnum LimitCategory) -> double"""
        return _sim.LoadFlow_GetLoadingLimit(self, *args)

LoadFlow_swigregister = _sim.LoadFlow_swigregister
LoadFlow_swigregister(LoadFlow)

class LoadAllocation(Simulation):
    """Proxy of C++ LoadAllocation class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadAllocation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadAllocation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadAllocation self) -> LoadAllocation"""
        this = _sim.new_LoadAllocation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LoadAllocation
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(LoadAllocation self)
        Run(LoadAllocation self, std::list< CYMString > Networks)
        """
        return _sim.LoadAllocation_Run(self, *args)

    def SetDemand(self, *args) -> "void" :
        """
        SetDemand(LoadAllocation self, CYMString FeederID, Meter Demand, bool UseActiveLoadModel=True, int LoadModelID=-1)
        SetDemand(LoadAllocation self, CYMString FeederID, Meter Demand, bool UseActiveLoadModel=True)
        SetDemand(LoadAllocation self, CYMString FeederID, Meter Demand)
        SetDemand(LoadAllocation self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter Demand, bool UseActiveLoadModel=True, 
            int LoadModelID=-1)
        SetDemand(LoadAllocation self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter Demand, bool UseActiveLoadModel=True)
        SetDemand(LoadAllocation self, CYMString DeviceNumber, DeviceType::DeviceTypeEnum DeviceType, Meter Demand)
        """
        return _sim.LoadAllocation_SetDemand(self, *args)

LoadAllocation_swigregister = _sim.LoadAllocation_swigregister
LoadAllocation_swigregister(LoadAllocation)

class ShortCircuit(Simulation):
    """Proxy of C++ ShortCircuit class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortCircuit, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortCircuit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ShortCircuit self) -> ShortCircuit"""
        this = _sim.new_ShortCircuit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ShortCircuit
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ShortCircuit self)
        Run(ShortCircuit self, std::list< CYMString > Networks)
        """
        return _sim.ShortCircuit_Run(self, *args)

ShortCircuit_swigregister = _sim.ShortCircuit_swigregister
ShortCircuit_swigregister(ShortCircuit)

class ShortCircuitANSI(Simulation):
    """Proxy of C++ ShortCircuitANSI class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortCircuitANSI, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortCircuitANSI, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ShortCircuitANSI self) -> ShortCircuitANSI"""
        this = _sim.new_ShortCircuitANSI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ShortCircuitANSI
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ShortCircuitANSI self)
        Run(ShortCircuitANSI self, std::list< CYMString > Networks)
        """
        return _sim.ShortCircuitANSI_Run(self, *args)

ShortCircuitANSI_swigregister = _sim.ShortCircuitANSI_swigregister
ShortCircuitANSI_swigregister(ShortCircuitANSI)

class ShortCircuitIEC(Simulation):
    """Proxy of C++ ShortCircuitIEC class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortCircuitIEC, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortCircuitIEC, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ShortCircuitIEC self) -> ShortCircuitIEC"""
        this = _sim.new_ShortCircuitIEC()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ShortCircuitIEC
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ShortCircuitIEC self)
        Run(ShortCircuitIEC self, std::list< CYMString > Networks)
        """
        return _sim.ShortCircuitIEC_Run(self, *args)

ShortCircuitIEC_swigregister = _sim.ShortCircuitIEC_swigregister
ShortCircuitIEC_swigregister(ShortCircuitIEC)

class VVO(Simulation):
    """Proxy of C++ VVO class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VVO, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VVO, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(VVO self) -> VVO"""
        this = _sim.new_VVO()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_VVO
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(VVO self)"""
        return _sim.VVO_Run(self)

VVO_swigregister = _sim.VVO_swigregister
VVO_swigregister(VVO)

class Harmonic(Simulation):
    """Proxy of C++ Harmonic class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Harmonic, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Harmonic, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Harmonic self) -> Harmonic"""
        this = _sim.new_Harmonic()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_Harmonic
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(Harmonic self)"""
        return _sim.Harmonic_Run(self)

Harmonic_swigregister = _sim.Harmonic_swigregister
Harmonic_swigregister(Harmonic)

class ProtectiveDeviceAnalysis(Simulation):
    """Proxy of C++ ProtectiveDeviceAnalysis class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProtectiveDeviceAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProtectiveDeviceAnalysis, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ProtectiveDeviceAnalysis self) -> ProtectiveDeviceAnalysis"""
        this = _sim.new_ProtectiveDeviceAnalysis()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ProtectiveDeviceAnalysis
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ProtectiveDeviceAnalysis self)
        Run(ProtectiveDeviceAnalysis self, std::list< CYMString > Networks)
        """
        return _sim.ProtectiveDeviceAnalysis_Run(self, *args)

    def GetCoordinationResults(self) -> "std::list< TCCCoordinationResult >" :
        """GetCoordinationResults(ProtectiveDeviceAnalysis self) -> std::list< TCCCoordinationResult >"""
        return _sim.ProtectiveDeviceAnalysis_GetCoordinationResults(self)

ProtectiveDeviceAnalysis_swigregister = _sim.ProtectiveDeviceAnalysis_swigregister
ProtectiveDeviceAnalysis_swigregister(ProtectiveDeviceAnalysis)

class RAM(Simulation):
    """Proxy of C++ RAM class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAM, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RAM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(RAM self) -> RAM"""
        this = _sim.new_RAM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_RAM
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(RAM self)
        Run(RAM self, std::list< CYMString > Networks)
        """
        return _sim.RAM_Run(self, *args)

RAM_swigregister = _sim.RAM_swigregister
RAM_swigregister(RAM)

class LoadingLimit(_object):
    """Proxy of C++ LoadingLimit class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadingLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LoadingLimit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadingLimit self) -> LoadingLimit"""
        this = _sim.new_LoadingLimit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LoadingLimit
    __del__ = lambda self : None;
    __swig_setmethods__["Level"] = _sim.LoadingLimit_Level_set
    __swig_getmethods__["Level"] = _sim.LoadingLimit_Level_get
    if _newclass:Level = _swig_property(_sim.LoadingLimit_Level_get, _sim.LoadingLimit_Level_set)
    __swig_setmethods__["Value"] = _sim.LoadingLimit_Value_set
    __swig_getmethods__["Value"] = _sim.LoadingLimit_Value_get
    if _newclass:Value = _swig_property(_sim.LoadingLimit_Value_get, _sim.LoadingLimit_Value_set)
LoadingLimit_swigregister = _sim.LoadingLimit_swigregister
LoadingLimit_swigregister(LoadingLimit)

class OutageLocation(_object):
    """Proxy of C++ OutageLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutageLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutageLocation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(OutageLocation self) -> OutageLocation"""
        this = _sim.new_OutageLocation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_OutageLocation
    __del__ = lambda self : None;
    __swig_setmethods__["DeviceNumber"] = _sim.OutageLocation_DeviceNumber_set
    __swig_getmethods__["DeviceNumber"] = _sim.OutageLocation_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_sim.OutageLocation_DeviceNumber_get, _sim.OutageLocation_DeviceNumber_set)
    __swig_setmethods__["OutageType"] = _sim.OutageLocation_OutageType_set
    __swig_getmethods__["OutageType"] = _sim.OutageLocation_OutageType_get
    if _newclass:OutageType = _swig_property(_sim.OutageLocation_OutageType_get, _sim.OutageLocation_OutageType_set)
OutageLocation_swigregister = _sim.OutageLocation_swigregister
OutageLocation_swigregister(OutageLocation)

class CAM(Simulation):
    """Proxy of C++ CAM class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAM, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAM, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CAM self) -> CAM"""
        this = _sim.new_CAM()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_CAM
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(CAM self)"""
        return _sim.CAM_Run(self)

    def AddOutage(self, *args) -> "void" :
        """AddOutage(CAM self, OutageLocation Outage)"""
        return _sim.CAM_AddOutage(self, *args)

    def RemoveOutage(self, *args) -> "void" :
        """RemoveOutage(CAM self, OutageLocation Outage)"""
        return _sim.CAM_RemoveOutage(self, *args)

    def ListOutages(self) -> "std::list< OutageLocation >" :
        """ListOutages(CAM self) -> std::list< OutageLocation >"""
        return _sim.CAM_ListOutages(self)

    def SetLoadingLimit(self, *args) -> "void" :
        """
        SetLoadingLimit(CAM self, EquipmentType::EquipmentTypeEnum EquipmentType, StageType::StageTypeEnum StageType, 
            LoadingLimit LoadingLimit)
        """
        return _sim.CAM_SetLoadingLimit(self, *args)

    def GetLoadingLimit(self, *args) -> "LoadingLimit *" :
        """GetLoadingLimit(CAM self, EquipmentType::EquipmentTypeEnum EquipmentType, StageType::StageTypeEnum StageType) -> LoadingLimit"""
        return _sim.CAM_GetLoadingLimit(self, *args)

    def GetOutagesResults(self) -> "std::list< CAMOutageResult >" :
        """GetOutagesResults(CAM self) -> std::list< CAMOutageResult >"""
        return _sim.CAM_GetOutagesResults(self)

CAM_swigregister = _sim.CAM_swigregister
CAM_swigregister(CAM)

class CAMNetworkResult(_object):
    """Proxy of C++ CAMNetworkResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMNetworkResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMNetworkResult, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CAMNetworkResult self) -> CAMNetworkResult"""
        this = _sim.new_CAMNetworkResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_CAMNetworkResult
    __del__ = lambda self : None;
    __swig_getmethods__["NetworkID"] = _sim.CAMNetworkResult_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.CAMNetworkResult_NetworkID_get)
    __swig_getmethods__["Capacity"] = _sim.CAMNetworkResult_Capacity_get
    if _newclass:Capacity = _swig_property(_sim.CAMNetworkResult_Capacity_get)
    __swig_getmethods__["InitialKVA"] = _sim.CAMNetworkResult_InitialKVA_get
    if _newclass:InitialKVA = _swig_property(_sim.CAMNetworkResult_InitialKVA_get)
    __swig_getmethods__["FinalKVA"] = _sim.CAMNetworkResult_FinalKVA_get
    if _newclass:FinalKVA = _swig_property(_sim.CAMNetworkResult_FinalKVA_get)
    __swig_getmethods__["RestoredKW"] = _sim.CAMNetworkResult_RestoredKW_get
    if _newclass:RestoredKW = _swig_property(_sim.CAMNetworkResult_RestoredKW_get)
    __swig_getmethods__["RestoredCount"] = _sim.CAMNetworkResult_RestoredCount_get
    if _newclass:RestoredCount = _swig_property(_sim.CAMNetworkResult_RestoredCount_get)
    __swig_getmethods__["FinalCountOut"] = _sim.CAMNetworkResult_FinalCountOut_get
    if _newclass:FinalCountOut = _swig_property(_sim.CAMNetworkResult_FinalCountOut_get)
    __swig_getmethods__["FinalKwOut"] = _sim.CAMNetworkResult_FinalKwOut_get
    if _newclass:FinalKwOut = _swig_property(_sim.CAMNetworkResult_FinalKwOut_get)
CAMNetworkResult_swigregister = _sim.CAMNetworkResult_swigregister
CAMNetworkResult_swigregister(CAMNetworkResult)

class CAMOutageResult(_object):
    """Proxy of C++ CAMOutageResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAMOutageResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAMOutageResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_CAMOutageResult
    __del__ = lambda self : None;
    def GetSwitchingPlan(self) -> "std::list< SwitchingOperation >" :
        """GetSwitchingPlan(CAMOutageResult self) -> std::list< SwitchingOperation >"""
        return _sim.CAMOutageResult_GetSwitchingPlan(self)

    def GetRecoveryArea(self) -> "std::list< CAMNetworkResult >" :
        """GetRecoveryArea(CAMOutageResult self) -> std::list< CAMNetworkResult >"""
        return _sim.CAMOutageResult_GetRecoveryArea(self)

    def GetUnservedCustomersCount(self) -> "double" :
        """GetUnservedCustomersCount(CAMOutageResult self) -> double"""
        return _sim.CAMOutageResult_GetUnservedCustomersCount(self)

    def GetUnservedCustomersKW(self) -> "double" :
        """GetUnservedCustomersKW(CAMOutageResult self) -> double"""
        return _sim.CAMOutageResult_GetUnservedCustomersKW(self)

    __swig_getmethods__["OutageID"] = _sim.CAMOutageResult_OutageID_get
    if _newclass:OutageID = _swig_property(_sim.CAMOutageResult_OutageID_get)
    __swig_getmethods__["Stage"] = _sim.CAMOutageResult_Stage_get
    if _newclass:Stage = _swig_property(_sim.CAMOutageResult_Stage_get)
    __swig_getmethods__["OutageType"] = _sim.CAMOutageResult_OutageType_get
    if _newclass:OutageType = _swig_property(_sim.CAMOutageResult_OutageType_get)
    __swig_getmethods__["OutageState"] = _sim.CAMOutageResult_OutageState_get
    if _newclass:OutageState = _swig_property(_sim.CAMOutageResult_OutageState_get)
CAMOutageResult_swigregister = _sim.CAMOutageResult_swigregister
CAMOutageResult_swigregister(CAMOutageResult)

class ArcFlash(Simulation):
    """Proxy of C++ ArcFlash class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcFlash, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArcFlash, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ArcFlash self) -> ArcFlash"""
        this = _sim.new_ArcFlash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ArcFlash
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ArcFlash self, std::list< CYMString > Nodes, ArcFlashMode::ArcFlashModeEnum Mode=Industrial)
        Run(ArcFlash self, std::list< CYMString > Nodes)
        """
        return _sim.ArcFlash_Run(self, *args)

ArcFlash_swigregister = _sim.ArcFlash_swigregister
ArcFlash_swigregister(ArcFlash)

class OPF(Simulation):
    """Proxy of C++ OPF class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OPF, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OPF, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(OPF self) -> OPF"""
        this = _sim.new_OPF()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_OPF
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(OPF self)
        Run(OPF self, std::list< CYMString > Networks)
        """
        return _sim.OPF_Run(self, *args)

OPF_swigregister = _sim.OPF_swigregister
OPF_swigregister(OPF)

class CapacitorPlacement(Simulation):
    """Proxy of C++ CapacitorPlacement class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapacitorPlacement, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CapacitorPlacement, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CapacitorPlacement self) -> CapacitorPlacement"""
        this = _sim.new_CapacitorPlacement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_CapacitorPlacement
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(CapacitorPlacement self)"""
        return _sim.CapacitorPlacement_Run(self)

    def GetResults(self) -> "std::list< CapacitorPlacementResult >" :
        """GetResults(CapacitorPlacement self) -> std::list< CapacitorPlacementResult >"""
        return _sim.CapacitorPlacement_GetResults(self)

CapacitorPlacement_swigregister = _sim.CapacitorPlacement_swigregister
CapacitorPlacement_swigregister(CapacitorPlacement)

class CapacitorPlacementInstallation(_object):
    """Proxy of C++ CapacitorPlacementInstallation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapacitorPlacementInstallation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapacitorPlacementInstallation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_CapacitorPlacementInstallation
    __del__ = lambda self : None;
    __swig_getmethods__["SectionID"] = _sim.CapacitorPlacementInstallation_SectionID_get
    if _newclass:SectionID = _swig_property(_sim.CapacitorPlacementInstallation_SectionID_get)
    __swig_getmethods__["CapacitorFixedPower"] = _sim.CapacitorPlacementInstallation_CapacitorFixedPower_get
    if _newclass:CapacitorFixedPower = _swig_property(_sim.CapacitorPlacementInstallation_CapacitorFixedPower_get)
    __swig_getmethods__["CapacitorSwitchedPower"] = _sim.CapacitorPlacementInstallation_CapacitorSwitchedPower_get
    if _newclass:CapacitorSwitchedPower = _swig_property(_sim.CapacitorPlacementInstallation_CapacitorSwitchedPower_get)
    __swig_getmethods__["LossReduction"] = _sim.CapacitorPlacementInstallation_LossReduction_get
    if _newclass:LossReduction = _swig_property(_sim.CapacitorPlacementInstallation_LossReduction_get)
    __swig_getmethods__["VoltageIncrease"] = _sim.CapacitorPlacementInstallation_VoltageIncrease_get
    if _newclass:VoltageIncrease = _swig_property(_sim.CapacitorPlacementInstallation_VoltageIncrease_get)
    __swig_getmethods__["Savings"] = _sim.CapacitorPlacementInstallation_Savings_get
    if _newclass:Savings = _swig_property(_sim.CapacitorPlacementInstallation_Savings_get)
CapacitorPlacementInstallation_swigregister = _sim.CapacitorPlacementInstallation_swigregister
CapacitorPlacementInstallation_swigregister(CapacitorPlacementInstallation)

class CapacitorPlacementResult(_object):
    """Proxy of C++ CapacitorPlacementResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapacitorPlacementResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapacitorPlacementResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_CapacitorPlacementResult
    __del__ = lambda self : None;
    __swig_getmethods__["Light"] = _sim.CapacitorPlacementResult_Light_get
    if _newclass:Light = _swig_property(_sim.CapacitorPlacementResult_Light_get)
    __swig_getmethods__["Normal"] = _sim.CapacitorPlacementResult_Normal_get
    if _newclass:Normal = _swig_property(_sim.CapacitorPlacementResult_Normal_get)
    __swig_getmethods__["Peak"] = _sim.CapacitorPlacementResult_Peak_get
    if _newclass:Peak = _swig_property(_sim.CapacitorPlacementResult_Peak_get)
CapacitorPlacementResult_swigregister = _sim.CapacitorPlacementResult_swigregister
CapacitorPlacementResult_swigregister(CapacitorPlacementResult)

class CapacitorPlacementCondition(_object):
    """Proxy of C++ CapacitorPlacementCondition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CapacitorPlacementCondition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CapacitorPlacementCondition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_CapacitorPlacementCondition
    __del__ = lambda self : None;
    def GetInstallations(self) -> "std::list< CapacitorPlacementInstallation >" :
        """GetInstallations(CapacitorPlacementCondition self) -> std::list< CapacitorPlacementInstallation >"""
        return _sim.CapacitorPlacementCondition_GetInstallations(self)

    __swig_getmethods__["TotalFixedCapacitor"] = _sim.CapacitorPlacementCondition_TotalFixedCapacitor_get
    if _newclass:TotalFixedCapacitor = _swig_property(_sim.CapacitorPlacementCondition_TotalFixedCapacitor_get)
    __swig_getmethods__["TotalSwitchedCapacitor"] = _sim.CapacitorPlacementCondition_TotalSwitchedCapacitor_get
    if _newclass:TotalSwitchedCapacitor = _swig_property(_sim.CapacitorPlacementCondition_TotalSwitchedCapacitor_get)
    __swig_getmethods__["LossReduction"] = _sim.CapacitorPlacementCondition_LossReduction_get
    if _newclass:LossReduction = _swig_property(_sim.CapacitorPlacementCondition_LossReduction_get)
    __swig_getmethods__["CorrectedPF"] = _sim.CapacitorPlacementCondition_CorrectedPF_get
    if _newclass:CorrectedPF = _swig_property(_sim.CapacitorPlacementCondition_CorrectedPF_get)
CapacitorPlacementCondition_swigregister = _sim.CapacitorPlacementCondition_swigregister
CapacitorPlacementCondition_swigregister(CapacitorPlacementCondition)

class DynamicMotorStart(Simulation):
    """Proxy of C++ DynamicMotorStart class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicMotorStart, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicMotorStart, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DynamicMotorStart self) -> DynamicMotorStart"""
        this = _sim.new_DynamicMotorStart()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DynamicMotorStart
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(DynamicMotorStart self)"""
        return _sim.DynamicMotorStart_Run(self)

DynamicMotorStart_swigregister = _sim.DynamicMotorStart_swigregister
DynamicMotorStart_swigregister(DynamicMotorStart)

class LockedRotor(Simulation):
    """Proxy of C++ LockedRotor class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LockedRotor, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LockedRotor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LockedRotor self) -> LockedRotor"""
        this = _sim.new_LockedRotor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LockedRotor
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(LockedRotor self)"""
        return _sim.LockedRotor_Run(self)

LockedRotor_swigregister = _sim.LockedRotor_swigregister
LockedRotor_swigregister(LockedRotor)

class MaximumStartSize(Simulation):
    """Proxy of C++ MaximumStartSize class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaximumStartSize, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaximumStartSize, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(MaximumStartSize self) -> MaximumStartSize"""
        this = _sim.new_MaximumStartSize()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_MaximumStartSize
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(MaximumStartSize self)"""
        return _sim.MaximumStartSize_Run(self)

MaximumStartSize_swigregister = _sim.MaximumStartSize_swigregister
MaximumStartSize_swigregister(MaximumStartSize)

class EquipmentRatingVerification(Simulation):
    """Proxy of C++ EquipmentRatingVerification class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EquipmentRatingVerification, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EquipmentRatingVerification, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(EquipmentRatingVerification self) -> EquipmentRatingVerification"""
        this = _sim.new_EquipmentRatingVerification()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_EquipmentRatingVerification
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(EquipmentRatingVerification self)
        Run(EquipmentRatingVerification self, std::list< CYMString > Networks)
        """
        return _sim.EquipmentRatingVerification_Run(self, *args)

EquipmentRatingVerification_swigregister = _sim.EquipmentRatingVerification_swigregister
EquipmentRatingVerification_swigregister(EquipmentRatingVerification)

class LoadFlowWithProfiles(Simulation):
    """Proxy of C++ LoadFlowWithProfiles class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoadFlowWithProfiles, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoadFlowWithProfiles, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(LoadFlowWithProfiles self) -> LoadFlowWithProfiles"""
        this = _sim.new_LoadFlowWithProfiles()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_LoadFlowWithProfiles
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(LoadFlowWithProfiles self)
        Run(LoadFlowWithProfiles self, std::list< CYMString > Networks)
        """
        return _sim.LoadFlowWithProfiles_Run(self, *args)

    __swig_setmethods__["ShowResults"] = _sim.LoadFlowWithProfiles_ShowResults_set
    __swig_getmethods__["ShowResults"] = _sim.LoadFlowWithProfiles_ShowResults_get
    if _newclass:ShowResults = _swig_property(_sim.LoadFlowWithProfiles_ShowResults_get, _sim.LoadFlowWithProfiles_ShowResults_set)
LoadFlowWithProfiles_swigregister = _sim.LoadFlowWithProfiles_swigregister
LoadFlowWithProfiles_swigregister(LoadFlowWithProfiles)

class DCArcFlash(Simulation):
    """Proxy of C++ DCArcFlash class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCArcFlash, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DCArcFlash, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DCArcFlash self) -> DCArcFlash"""
        this = _sim.new_DCArcFlash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DCArcFlash
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(DCArcFlash self)"""
        return _sim.DCArcFlash_Run(self)

DCArcFlash_swigregister = _sim.DCArcFlash_swigregister
DCArcFlash_swigregister(DCArcFlash)

class FaultLocator(Simulation):
    """Proxy of C++ FaultLocator class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultLocator, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FaultLocator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(FaultLocator self) -> FaultLocator"""
        this = _sim.new_FaultLocator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_FaultLocator
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(FaultLocator self)"""
        return _sim.FaultLocator_Run(self)

    def GetLocations(self) -> "std::list< FaultLocatorLocation >" :
        """GetLocations(FaultLocator self) -> std::list< FaultLocatorLocation >"""
        return _sim.FaultLocator_GetLocations(self)

FaultLocator_swigregister = _sim.FaultLocator_swigregister
FaultLocator_swigregister(FaultLocator)

class FaultLocatorLocation(_object):
    """Proxy of C++ FaultLocatorLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultLocatorLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaultLocatorLocation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_FaultLocatorLocation
    __del__ = lambda self : None;
    __swig_getmethods__["FeederID"] = _sim.FaultLocatorLocation_FeederID_get
    if _newclass:FeederID = _swig_property(_sim.FaultLocatorLocation_FeederID_get)
    __swig_getmethods__["ID"] = _sim.FaultLocatorLocation_ID_get
    if _newclass:ID = _swig_property(_sim.FaultLocatorLocation_ID_get)
    __swig_getmethods__["FaultType"] = _sim.FaultLocatorLocation_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.FaultLocatorLocation_FaultType_get)
    __swig_getmethods__["Distance"] = _sim.FaultLocatorLocation_Distance_get
    if _newclass:Distance = _swig_property(_sim.FaultLocatorLocation_Distance_get)
    __swig_getmethods__["IMax"] = _sim.FaultLocatorLocation_IMax_get
    if _newclass:IMax = _swig_property(_sim.FaultLocatorLocation_IMax_get)
    __swig_getmethods__["Diff"] = _sim.FaultLocatorLocation_Diff_get
    if _newclass:Diff = _swig_property(_sim.FaultLocatorLocation_Diff_get)
FaultLocatorLocation_swigregister = _sim.FaultLocatorLocation_swigregister
FaultLocatorLocation_swigregister(FaultLocatorLocation)

class MinimumFault(Simulation):
    """Proxy of C++ MinimumFault class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumFault, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumFault, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(MinimumFault self) -> MinimumFault"""
        this = _sim.new_MinimumFault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_MinimumFault
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(MinimumFault self)
        Run(MinimumFault self, std::list< CYMString > Networks)
        """
        return _sim.MinimumFault_Run(self, *args)

    def GetMinimumFaultZones(self) -> "std::list< MinimumFaultZone >" :
        """GetMinimumFaultZones(MinimumFault self) -> std::list< MinimumFaultZone >"""
        return _sim.MinimumFault_GetMinimumFaultZones(self)

    def GetMinimumFaultNodes(self) -> "std::list< MinimumFaultNode >" :
        """GetMinimumFaultNodes(MinimumFault self) -> std::list< MinimumFaultNode >"""
        return _sim.MinimumFault_GetMinimumFaultNodes(self)

MinimumFault_swigregister = _sim.MinimumFault_swigregister
MinimumFault_swigregister(MinimumFault)

class MinimumFaultNode(_object):
    """Proxy of C++ MinimumFaultNode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumFaultNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumFaultNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_MinimumFaultNode
    __del__ = lambda self : None;
    __swig_getmethods__["NodeID"] = _sim.MinimumFaultNode_NodeID_get
    if _newclass:NodeID = _swig_property(_sim.MinimumFaultNode_NodeID_get)
    __swig_getmethods__["NetworkID"] = _sim.MinimumFaultNode_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.MinimumFaultNode_NetworkID_get)
    __swig_getmethods__["FaultTypeName"] = _sim.MinimumFaultNode_FaultTypeName_get
    if _newclass:FaultTypeName = _swig_property(_sim.MinimumFaultNode_FaultTypeName_get)
    __swig_getmethods__["ProtectiveDeviceSectionID"] = _sim.MinimumFaultNode_ProtectiveDeviceSectionID_get
    if _newclass:ProtectiveDeviceSectionID = _swig_property(_sim.MinimumFaultNode_ProtectiveDeviceSectionID_get)
    __swig_getmethods__["ProtectiveDeviceNumber"] = _sim.MinimumFaultNode_ProtectiveDeviceNumber_get
    if _newclass:ProtectiveDeviceNumber = _swig_property(_sim.MinimumFaultNode_ProtectiveDeviceNumber_get)
    __swig_getmethods__["ProtectiveDeviceType"] = _sim.MinimumFaultNode_ProtectiveDeviceType_get
    if _newclass:ProtectiveDeviceType = _swig_property(_sim.MinimumFaultNode_ProtectiveDeviceType_get)
    __swig_getmethods__["BackupProtectiveDeviceSectionID"] = _sim.MinimumFaultNode_BackupProtectiveDeviceSectionID_get
    if _newclass:BackupProtectiveDeviceSectionID = _swig_property(_sim.MinimumFaultNode_BackupProtectiveDeviceSectionID_get)
    __swig_getmethods__["BackupProtectiveDeviceNumber"] = _sim.MinimumFaultNode_BackupProtectiveDeviceNumber_get
    if _newclass:BackupProtectiveDeviceNumber = _swig_property(_sim.MinimumFaultNode_BackupProtectiveDeviceNumber_get)
    __swig_getmethods__["BackupProtectiveDeviceType"] = _sim.MinimumFaultNode_BackupProtectiveDeviceType_get
    if _newclass:BackupProtectiveDeviceType = _swig_property(_sim.MinimumFaultNode_BackupProtectiveDeviceType_get)
    __swig_getmethods__["ProtectiveDeviceSettingPhase"] = _sim.MinimumFaultNode_ProtectiveDeviceSettingPhase_get
    if _newclass:ProtectiveDeviceSettingPhase = _swig_property(_sim.MinimumFaultNode_ProtectiveDeviceSettingPhase_get)
    __swig_getmethods__["ProtectiveDeviceSettingGround"] = _sim.MinimumFaultNode_ProtectiveDeviceSettingGround_get
    if _newclass:ProtectiveDeviceSettingGround = _swig_property(_sim.MinimumFaultNode_ProtectiveDeviceSettingGround_get)
    __swig_getmethods__["FaultCurrentSeenByDevicePhase"] = _sim.MinimumFaultNode_FaultCurrentSeenByDevicePhase_get
    if _newclass:FaultCurrentSeenByDevicePhase = _swig_property(_sim.MinimumFaultNode_FaultCurrentSeenByDevicePhase_get)
    __swig_getmethods__["FaultCurrentSeenByDeviceGround"] = _sim.MinimumFaultNode_FaultCurrentSeenByDeviceGround_get
    if _newclass:FaultCurrentSeenByDeviceGround = _swig_property(_sim.MinimumFaultNode_FaultCurrentSeenByDeviceGround_get)
    __swig_getmethods__["FaultCurrent"] = _sim.MinimumFaultNode_FaultCurrent_get
    if _newclass:FaultCurrent = _swig_property(_sim.MinimumFaultNode_FaultCurrent_get)
    __swig_getmethods__["FaultType"] = _sim.MinimumFaultNode_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.MinimumFaultNode_FaultType_get)
    __swig_getmethods__["IsProtectedPhase"] = _sim.MinimumFaultNode_IsProtectedPhase_get
    if _newclass:IsProtectedPhase = _swig_property(_sim.MinimumFaultNode_IsProtectedPhase_get)
    __swig_getmethods__["IsProtectedGround"] = _sim.MinimumFaultNode_IsProtectedGround_get
    if _newclass:IsProtectedGround = _swig_property(_sim.MinimumFaultNode_IsProtectedGround_get)
    __swig_getmethods__["IsMultipleProtection"] = _sim.MinimumFaultNode_IsMultipleProtection_get
    if _newclass:IsMultipleProtection = _swig_property(_sim.MinimumFaultNode_IsMultipleProtection_get)
    __swig_getmethods__["IsBackupProtected"] = _sim.MinimumFaultNode_IsBackupProtected_get
    if _newclass:IsBackupProtected = _swig_property(_sim.MinimumFaultNode_IsBackupProtected_get)
    __swig_getmethods__["IsException"] = _sim.MinimumFaultNode_IsException_get
    if _newclass:IsException = _swig_property(_sim.MinimumFaultNode_IsException_get)
MinimumFaultNode_swigregister = _sim.MinimumFaultNode_swigregister
MinimumFaultNode_swigregister(MinimumFaultNode)

class MinimumFaultZone(_object):
    """Proxy of C++ MinimumFaultZone class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinimumFaultZone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MinimumFaultZone, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_MinimumFaultZone
    __del__ = lambda self : None;
    __swig_getmethods__["FeederID"] = _sim.MinimumFaultZone_FeederID_get
    if _newclass:FeederID = _swig_property(_sim.MinimumFaultZone_FeederID_get)
    __swig_getmethods__["ProtectiveDeviceID"] = _sim.MinimumFaultZone_ProtectiveDeviceID_get
    if _newclass:ProtectiveDeviceID = _swig_property(_sim.MinimumFaultZone_ProtectiveDeviceID_get)
    __swig_getmethods__["ProtectiveDeviceType"] = _sim.MinimumFaultZone_ProtectiveDeviceType_get
    if _newclass:ProtectiveDeviceType = _swig_property(_sim.MinimumFaultZone_ProtectiveDeviceType_get)
    __swig_getmethods__["SwitchingDeviceID"] = _sim.MinimumFaultZone_SwitchingDeviceID_get
    if _newclass:SwitchingDeviceID = _swig_property(_sim.MinimumFaultZone_SwitchingDeviceID_get)
    __swig_getmethods__["Bound"] = _sim.MinimumFaultZone_Bound_get
    if _newclass:Bound = _swig_property(_sim.MinimumFaultZone_Bound_get)
    __swig_getmethods__["CriticalPoint"] = _sim.MinimumFaultZone_CriticalPoint_get
    if _newclass:CriticalPoint = _swig_property(_sim.MinimumFaultZone_CriticalPoint_get)
    __swig_getmethods__["FaultTypeName"] = _sim.MinimumFaultZone_FaultTypeName_get
    if _newclass:FaultTypeName = _swig_property(_sim.MinimumFaultZone_FaultTypeName_get)
    __swig_getmethods__["BackupProtectiveDeviceSectionID"] = _sim.MinimumFaultZone_BackupProtectiveDeviceSectionID_get
    if _newclass:BackupProtectiveDeviceSectionID = _swig_property(_sim.MinimumFaultZone_BackupProtectiveDeviceSectionID_get)
    __swig_getmethods__["BackupProtectiveDeviceNumber"] = _sim.MinimumFaultZone_BackupProtectiveDeviceNumber_get
    if _newclass:BackupProtectiveDeviceNumber = _swig_property(_sim.MinimumFaultZone_BackupProtectiveDeviceNumber_get)
    __swig_getmethods__["BackupProtectiveDeviceType"] = _sim.MinimumFaultZone_BackupProtectiveDeviceType_get
    if _newclass:BackupProtectiveDeviceType = _swig_property(_sim.MinimumFaultZone_BackupProtectiveDeviceType_get)
    __swig_getmethods__["MinimFault"] = _sim.MinimumFaultZone_MinimFault_get
    if _newclass:MinimFault = _swig_property(_sim.MinimumFaultZone_MinimFault_get)
    __swig_getmethods__["ProtectiveDeviceSetting"] = _sim.MinimumFaultZone_ProtectiveDeviceSetting_get
    if _newclass:ProtectiveDeviceSetting = _swig_property(_sim.MinimumFaultZone_ProtectiveDeviceSetting_get)
    __swig_getmethods__["MinimFaultWithRatio"] = _sim.MinimumFaultZone_MinimFaultWithRatio_get
    if _newclass:MinimFaultWithRatio = _swig_property(_sim.MinimumFaultZone_MinimFaultWithRatio_get)
    __swig_getmethods__["FromEquipmentType"] = _sim.MinimumFaultZone_FromEquipmentType_get
    if _newclass:FromEquipmentType = _swig_property(_sim.MinimumFaultZone_FromEquipmentType_get)
    __swig_getmethods__["ToEquipmentType"] = _sim.MinimumFaultZone_ToEquipmentType_get
    if _newclass:ToEquipmentType = _swig_property(_sim.MinimumFaultZone_ToEquipmentType_get)
    __swig_getmethods__["WorseCaseEquipmentType"] = _sim.MinimumFaultZone_WorseCaseEquipmentType_get
    if _newclass:WorseCaseEquipmentType = _swig_property(_sim.MinimumFaultZone_WorseCaseEquipmentType_get)
    __swig_getmethods__["SwitchDevEquipmentType"] = _sim.MinimumFaultZone_SwitchDevEquipmentType_get
    if _newclass:SwitchDevEquipmentType = _swig_property(_sim.MinimumFaultZone_SwitchDevEquipmentType_get)
    __swig_getmethods__["FromPhase"] = _sim.MinimumFaultZone_FromPhase_get
    if _newclass:FromPhase = _swig_property(_sim.MinimumFaultZone_FromPhase_get)
    __swig_getmethods__["ToPhase"] = _sim.MinimumFaultZone_ToPhase_get
    if _newclass:ToPhase = _swig_property(_sim.MinimumFaultZone_ToPhase_get)
    __swig_getmethods__["WorseCasePhase"] = _sim.MinimumFaultZone_WorseCasePhase_get
    if _newclass:WorseCasePhase = _swig_property(_sim.MinimumFaultZone_WorseCasePhase_get)
    __swig_getmethods__["SwitchDevPhase"] = _sim.MinimumFaultZone_SwitchDevPhase_get
    if _newclass:SwitchDevPhase = _swig_property(_sim.MinimumFaultZone_SwitchDevPhase_get)
    __swig_getmethods__["FaultType"] = _sim.MinimumFaultZone_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.MinimumFaultZone_FaultType_get)
    __swig_getmethods__["IsProtected"] = _sim.MinimumFaultZone_IsProtected_get
    if _newclass:IsProtected = _swig_property(_sim.MinimumFaultZone_IsProtected_get)
    __swig_getmethods__["IsBackupProtected"] = _sim.MinimumFaultZone_IsBackupProtected_get
    if _newclass:IsBackupProtected = _swig_property(_sim.MinimumFaultZone_IsBackupProtected_get)
    __swig_getmethods__["IsException"] = _sim.MinimumFaultZone_IsException_get
    if _newclass:IsException = _swig_property(_sim.MinimumFaultZone_IsException_get)
MinimumFaultZone_swigregister = _sim.MinimumFaultZone_swigregister
MinimumFaultZone_swigregister(MinimumFaultZone)

class DistributionStateEstimator(Simulation):
    """Proxy of C++ DistributionStateEstimator class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DistributionStateEstimator, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DistributionStateEstimator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DistributionStateEstimator self) -> DistributionStateEstimator"""
        this = _sim.new_DistributionStateEstimator()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DistributionStateEstimator
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(DistributionStateEstimator self)
        Run(DistributionStateEstimator self, std::list< CYMString > Networks)
        """
        return _sim.DistributionStateEstimator_Run(self, *args)

DistributionStateEstimator_swigregister = _sim.DistributionStateEstimator_swigregister
DistributionStateEstimator_swigregister(DistributionStateEstimator)

class ShortCircuitIEC61363(Simulation):
    """Proxy of C++ ShortCircuitIEC61363 class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortCircuitIEC61363, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShortCircuitIEC61363, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ShortCircuitIEC61363 self) -> ShortCircuitIEC61363"""
        this = _sim.new_ShortCircuitIEC61363()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ShortCircuitIEC61363
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(ShortCircuitIEC61363 self)
        Run(ShortCircuitIEC61363 self, std::list< CYMString > Networks)
        """
        return _sim.ShortCircuitIEC61363_Run(self, *args)

ShortCircuitIEC61363_swigregister = _sim.ShortCircuitIEC61363_swigregister
ShortCircuitIEC61363_swigregister(ShortCircuitIEC61363)

class VoltageSag(Simulation):
    """Proxy of C++ VoltageSag class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoltageSag, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VoltageSag, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(VoltageSag self) -> VoltageSag"""
        this = _sim.new_VoltageSag()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_VoltageSag
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """Run(VoltageSag self, CYMString NodeID)"""
        return _sim.VoltageSag_Run(self, *args)

    def GetLocations(self) -> "std::list< VoltageSagLocation >" :
        """GetLocations(VoltageSag self) -> std::list< VoltageSagLocation >"""
        return _sim.VoltageSag_GetLocations(self)

VoltageSag_swigregister = _sim.VoltageSag_swigregister
VoltageSag_swigregister(VoltageSag)

class VoltageSagLocation(_object):
    """Proxy of C++ VoltageSagLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VoltageSagLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VoltageSagLocation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_VoltageSagLocation
    __del__ = lambda self : None;
    __str__ = lambda self: "(NetworkID: '" + self.NetworkID + "', FaultedItemID: '" + self.FaultedItemID + "', FaultType: '" + str(self.FaultType) + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __swig_getmethods__["FaultedItemID"] = _sim.VoltageSagLocation_FaultedItemID_get
    if _newclass:FaultedItemID = _swig_property(_sim.VoltageSagLocation_FaultedItemID_get)
    __swig_getmethods__["NetworkID"] = _sim.VoltageSagLocation_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.VoltageSagLocation_NetworkID_get)
    __swig_getmethods__["DelimiterDeviceNumber"] = _sim.VoltageSagLocation_DelimiterDeviceNumber_get
    if _newclass:DelimiterDeviceNumber = _swig_property(_sim.VoltageSagLocation_DelimiterDeviceNumber_get)
    __swig_getmethods__["FaultType"] = _sim.VoltageSagLocation_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.VoltageSagLocation_FaultType_get)
    __swig_getmethods__["ItemType"] = _sim.VoltageSagLocation_ItemType_get
    if _newclass:ItemType = _swig_property(_sim.VoltageSagLocation_ItemType_get)
    __swig_getmethods__["DelimiterDeviceType"] = _sim.VoltageSagLocation_DelimiterDeviceType_get
    if _newclass:DelimiterDeviceType = _swig_property(_sim.VoltageSagLocation_DelimiterDeviceType_get)
    __swig_getmethods__["Vmin"] = _sim.VoltageSagLocation_Vmin_get
    if _newclass:Vmin = _swig_property(_sim.VoltageSagLocation_Vmin_get)
    __swig_getmethods__["FaultedItemDistance"] = _sim.VoltageSagLocation_FaultedItemDistance_get
    if _newclass:FaultedItemDistance = _swig_property(_sim.VoltageSagLocation_FaultedItemDistance_get)
    __swig_getmethods__["Frequency"] = _sim.VoltageSagLocation_Frequency_get
    if _newclass:Frequency = _swig_property(_sim.VoltageSagLocation_Frequency_get)
    __swig_getmethods__["SagVoltageMin"] = _sim.VoltageSagLocation_SagVoltageMin_get
    if _newclass:SagVoltageMin = _swig_property(_sim.VoltageSagLocation_SagVoltageMin_get)
    __swig_getmethods__["SagVoltageMax"] = _sim.VoltageSagLocation_SagVoltageMax_get
    if _newclass:SagVoltageMax = _swig_property(_sim.VoltageSagLocation_SagVoltageMax_get)
    __swig_getmethods__["SagDuration"] = _sim.VoltageSagLocation_SagDuration_get
    if _newclass:SagDuration = _swig_property(_sim.VoltageSagLocation_SagDuration_get)
    __swig_getmethods__["DelimiterIMax"] = _sim.VoltageSagLocation_DelimiterIMax_get
    if _newclass:DelimiterIMax = _swig_property(_sim.VoltageSagLocation_DelimiterIMax_get)
VoltageSagLocation_swigregister = _sim.VoltageSagLocation_swigregister
VoltageSagLocation_swigregister(VoltageSagLocation)

class DCShortCircuit(Simulation):
    """Proxy of C++ DCShortCircuit class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCShortCircuit, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DCShortCircuit, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DCShortCircuit self) -> DCShortCircuit"""
        this = _sim.new_DCShortCircuit()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DCShortCircuit
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(DCShortCircuit self)"""
        return _sim.DCShortCircuit_Run(self)

DCShortCircuit_swigregister = _sim.DCShortCircuit_swigregister
DCShortCircuit_swigregister(DCShortCircuit)

class DCLoadFlow(Simulation):
    """Proxy of C++ DCLoadFlow class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DCLoadFlow, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DCLoadFlow, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DCLoadFlow self) -> DCLoadFlow"""
        this = _sim.new_DCLoadFlow()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DCLoadFlow
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(DCLoadFlow self)"""
        return _sim.DCLoadFlow_Run(self)

DCLoadFlow_swigregister = _sim.DCLoadFlow_swigregister
DCLoadFlow_swigregister(DCLoadFlow)

class NetworkConfigurationOptimization(Simulation):
    """Proxy of C++ NetworkConfigurationOptimization class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkConfigurationOptimization, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkConfigurationOptimization, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(NetworkConfigurationOptimization self) -> NetworkConfigurationOptimization"""
        this = _sim.new_NetworkConfigurationOptimization()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_NetworkConfigurationOptimization
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(NetworkConfigurationOptimization self)
        Run(NetworkConfigurationOptimization self, std::list< CYMString > Networks)
        """
        return _sim.NetworkConfigurationOptimization_Run(self, *args)

    def GetSwitchingPlan(self) -> "std::list< SwitchingOperation >" :
        """GetSwitchingPlan(NetworkConfigurationOptimization self) -> std::list< SwitchingOperation >"""
        return _sim.NetworkConfigurationOptimization_GetSwitchingPlan(self)

    def GetFeederStatus(self) -> "std::list< NetworkConfigurationOptimizationFeederStatus >" :
        """GetFeederStatus(NetworkConfigurationOptimization self) -> std::list< NetworkConfigurationOptimizationFeederStatus >"""
        return _sim.NetworkConfigurationOptimization_GetFeederStatus(self)

NetworkConfigurationOptimization_swigregister = _sim.NetworkConfigurationOptimization_swigregister
NetworkConfigurationOptimization_swigregister(NetworkConfigurationOptimization)

class NetworkConfigurationOptimizationFeederStatus(_object):
    """Proxy of C++ NetworkConfigurationOptimizationFeederStatus class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkConfigurationOptimizationFeederStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkConfigurationOptimizationFeederStatus, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_NetworkConfigurationOptimizationFeederStatus
    __del__ = lambda self : None;
    __swig_getmethods__["NetworkID"] = _sim.NetworkConfigurationOptimizationFeederStatus_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_NetworkID_get)
    __swig_getmethods__["Capacity"] = _sim.NetworkConfigurationOptimizationFeederStatus_Capacity_get
    if _newclass:Capacity = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_Capacity_get)
    __swig_getmethods__["InitialKVA"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialKVA_get
    if _newclass:InitialKVA = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialKVA_get)
    __swig_getmethods__["FinalKVA"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalKVA_get
    if _newclass:FinalKVA = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalKVA_get)
    __swig_getmethods__["InitialLength"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialLength_get
    if _newclass:InitialLength = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialLength_get)
    __swig_getmethods__["FinalLength"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalLength_get
    if _newclass:FinalLength = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalLength_get)
    __swig_getmethods__["InitialOverload"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialOverload_get
    if _newclass:InitialOverload = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialOverload_get)
    __swig_getmethods__["FinalOverload"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalOverload_get
    if _newclass:FinalOverload = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalOverload_get)
    __swig_getmethods__["WorstInitialOverload"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialOverload_get
    if _newclass:WorstInitialOverload = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialOverload_get)
    __swig_getmethods__["WorstFinalOverload"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalOverload_get
    if _newclass:WorstFinalOverload = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalOverload_get)
    __swig_getmethods__["InitialLowVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialLowVoltage_get
    if _newclass:InitialLowVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialLowVoltage_get)
    __swig_getmethods__["FinalLowVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalLowVoltage_get
    if _newclass:FinalLowVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalLowVoltage_get)
    __swig_getmethods__["WorstInitialLowVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialLowVoltage_get
    if _newclass:WorstInitialLowVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialLowVoltage_get)
    __swig_getmethods__["WorstFinalLowVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalLowVoltage_get
    if _newclass:WorstFinalLowVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalLowVoltage_get)
    __swig_getmethods__["InitialHighVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialHighVoltage_get
    if _newclass:InitialHighVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialHighVoltage_get)
    __swig_getmethods__["FinalHighVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalHighVoltage_get
    if _newclass:FinalHighVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalHighVoltage_get)
    __swig_getmethods__["WorstInitialHighVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialHighVoltage_get
    if _newclass:WorstInitialHighVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstInitialHighVoltage_get)
    __swig_getmethods__["WorstFinalHighVoltage"] = _sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalHighVoltage_get
    if _newclass:WorstFinalHighVoltage = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_WorstFinalHighVoltage_get)
    __swig_getmethods__["InitialKWLoss"] = _sim.NetworkConfigurationOptimizationFeederStatus_InitialKWLoss_get
    if _newclass:InitialKWLoss = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_InitialKWLoss_get)
    __swig_getmethods__["FinalKWLoss"] = _sim.NetworkConfigurationOptimizationFeederStatus_FinalKWLoss_get
    if _newclass:FinalKWLoss = _swig_property(_sim.NetworkConfigurationOptimizationFeederStatus_FinalKWLoss_get)
NetworkConfigurationOptimizationFeederStatus_swigregister = _sim.NetworkConfigurationOptimizationFeederStatus_swigregister
NetworkConfigurationOptimizationFeederStatus_swigregister(NetworkConfigurationOptimizationFeederStatus)

class SwitchingOperation(_object):
    """Proxy of C++ SwitchingOperation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchingOperation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchingOperation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_SwitchingOperation
    __del__ = lambda self : None;
    __swig_getmethods__["DeviceNumber"] = _sim.SwitchingOperation_DeviceNumber_get
    if _newclass:DeviceNumber = _swig_property(_sim.SwitchingOperation_DeviceNumber_get)
    __swig_getmethods__["DeviceType"] = _sim.SwitchingOperation_DeviceType_get
    if _newclass:DeviceType = _swig_property(_sim.SwitchingOperation_DeviceType_get)
    __swig_getmethods__["Action"] = _sim.SwitchingOperation_Action_get
    if _newclass:Action = _swig_property(_sim.SwitchingOperation_Action_get)
    __swig_getmethods__["Reason"] = _sim.SwitchingOperation_Reason_get
    if _newclass:Reason = _swig_property(_sim.SwitchingOperation_Reason_get)
    __swig_getmethods__["Stage"] = _sim.SwitchingOperation_Stage_get
    if _newclass:Stage = _swig_property(_sim.SwitchingOperation_Stage_get)
    __swig_getmethods__["Load"] = _sim.SwitchingOperation_Load_get
    if _newclass:Load = _swig_property(_sim.SwitchingOperation_Load_get)
    __swig_getmethods__["Losses"] = _sim.SwitchingOperation_Losses_get
    if _newclass:Losses = _swig_property(_sim.SwitchingOperation_Losses_get)
    __swig_getmethods__["Customers"] = _sim.SwitchingOperation_Customers_get
    if _newclass:Customers = _swig_property(_sim.SwitchingOperation_Customers_get)
    __swig_getmethods__["New"] = _sim.SwitchingOperation_New_get
    if _newclass:New = _swig_property(_sim.SwitchingOperation_New_get)
SwitchingOperation_swigregister = _sim.SwitchingOperation_swigregister
SwitchingOperation_swigregister(SwitchingOperation)

class SimultaneousFault(Simulation):
    """Proxy of C++ SimultaneousFault class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimultaneousFault, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimultaneousFault, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(SimultaneousFault self) -> SimultaneousFault"""
        this = _sim.new_SimultaneousFault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_SimultaneousFault
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(SimultaneousFault self)"""
        return _sim.SimultaneousFault_Run(self)

    def AddFault(self, *args) -> "void" :
        """AddFault(SimultaneousFault self, FaultLocation Fault)"""
        return _sim.SimultaneousFault_AddFault(self, *args)

    def RemoveFault(self, *args) -> "void" :
        """RemoveFault(SimultaneousFault self, int Index)"""
        return _sim.SimultaneousFault_RemoveFault(self, *args)

    def GetFaults(self) -> "std::list< FaultLocation * >" :
        """GetFaults(SimultaneousFault self) -> std::list< FaultLocation * >"""
        return _sim.SimultaneousFault_GetFaults(self)

SimultaneousFault_swigregister = _sim.SimultaneousFault_swigregister
SimultaneousFault_swigregister(SimultaneousFault)

class FaultLocation(_object):
    """Proxy of C++ FaultLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaultLocation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_FaultLocation
    __del__ = lambda self : None;
    def GetType(self) -> "FaultLocationType::FaultLocationTypeEnum" :
        """GetType(FaultLocation self) -> FaultLocationType::FaultLocationTypeEnum"""
        return _sim.FaultLocation_GetType(self)

FaultLocation_swigregister = _sim.FaultLocation_swigregister
FaultLocation_swigregister(FaultLocation)

class ShuntFault(FaultLocation):
    """Proxy of C++ ShuntFault class"""
    __swig_setmethods__ = {}
    for _s in [FaultLocation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShuntFault, name, value)
    __swig_getmethods__ = {}
    for _s in [FaultLocation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShuntFault, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(ShuntFault self) -> ShuntFault"""
        this = _sim.new_ShuntFault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_ShuntFault
    __del__ = lambda self : None;
    __str__ = lambda self: "(FaultType: " + str(self.FaultType) + ", ItemType: " + str(self.ItemType) + ", DeviceID: '" + self.DeviceID + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __swig_setmethods__["DeviceID"] = _sim.ShuntFault_DeviceID_set
    __swig_getmethods__["DeviceID"] = _sim.ShuntFault_DeviceID_get
    if _newclass:DeviceID = _swig_property(_sim.ShuntFault_DeviceID_get, _sim.ShuntFault_DeviceID_set)
    __swig_setmethods__["ItemType"] = _sim.ShuntFault_ItemType_set
    __swig_getmethods__["ItemType"] = _sim.ShuntFault_ItemType_get
    if _newclass:ItemType = _swig_property(_sim.ShuntFault_ItemType_get, _sim.ShuntFault_ItemType_set)
    __swig_setmethods__["FaultType"] = _sim.ShuntFault_FaultType_set
    __swig_getmethods__["FaultType"] = _sim.ShuntFault_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.ShuntFault_FaultType_get, _sim.ShuntFault_FaultType_set)
    __swig_setmethods__["FaultPhase"] = _sim.ShuntFault_FaultPhase_set
    __swig_getmethods__["FaultPhase"] = _sim.ShuntFault_FaultPhase_get
    if _newclass:FaultPhase = _swig_property(_sim.ShuntFault_FaultPhase_get, _sim.ShuntFault_FaultPhase_set)
    __swig_setmethods__["SlidingPosition"] = _sim.ShuntFault_SlidingPosition_set
    __swig_getmethods__["SlidingPosition"] = _sim.ShuntFault_SlidingPosition_get
    if _newclass:SlidingPosition = _swig_property(_sim.ShuntFault_SlidingPosition_get, _sim.ShuntFault_SlidingPosition_set)
    __swig_setmethods__["ImpedanceIsOHMS"] = _sim.ShuntFault_ImpedanceIsOHMS_set
    __swig_getmethods__["ImpedanceIsOHMS"] = _sim.ShuntFault_ImpedanceIsOHMS_get
    if _newclass:ImpedanceIsOHMS = _swig_property(_sim.ShuntFault_ImpedanceIsOHMS_get, _sim.ShuntFault_ImpedanceIsOHMS_set)
    __swig_setmethods__["Rf_ohms"] = _sim.ShuntFault_Rf_ohms_set
    __swig_getmethods__["Rf_ohms"] = _sim.ShuntFault_Rf_ohms_get
    if _newclass:Rf_ohms = _swig_property(_sim.ShuntFault_Rf_ohms_get, _sim.ShuntFault_Rf_ohms_set)
    __swig_setmethods__["Rg_ohms"] = _sim.ShuntFault_Rg_ohms_set
    __swig_getmethods__["Rg_ohms"] = _sim.ShuntFault_Rg_ohms_get
    if _newclass:Rg_ohms = _swig_property(_sim.ShuntFault_Rg_ohms_get, _sim.ShuntFault_Rg_ohms_set)
    __swig_setmethods__["Xf_ohms"] = _sim.ShuntFault_Xf_ohms_set
    __swig_getmethods__["Xf_ohms"] = _sim.ShuntFault_Xf_ohms_get
    if _newclass:Xf_ohms = _swig_property(_sim.ShuntFault_Xf_ohms_get, _sim.ShuntFault_Xf_ohms_set)
    __swig_setmethods__["Xg_ohms"] = _sim.ShuntFault_Xg_ohms_set
    __swig_getmethods__["Xg_ohms"] = _sim.ShuntFault_Xg_ohms_get
    if _newclass:Xg_ohms = _swig_property(_sim.ShuntFault_Xg_ohms_get, _sim.ShuntFault_Xg_ohms_set)
    __swig_setmethods__["Rf_pu"] = _sim.ShuntFault_Rf_pu_set
    __swig_getmethods__["Rf_pu"] = _sim.ShuntFault_Rf_pu_get
    if _newclass:Rf_pu = _swig_property(_sim.ShuntFault_Rf_pu_get, _sim.ShuntFault_Rf_pu_set)
    __swig_setmethods__["Rg_pu"] = _sim.ShuntFault_Rg_pu_set
    __swig_getmethods__["Rg_pu"] = _sim.ShuntFault_Rg_pu_get
    if _newclass:Rg_pu = _swig_property(_sim.ShuntFault_Rg_pu_get, _sim.ShuntFault_Rg_pu_set)
    __swig_setmethods__["Xf_pu"] = _sim.ShuntFault_Xf_pu_set
    __swig_getmethods__["Xf_pu"] = _sim.ShuntFault_Xf_pu_get
    if _newclass:Xf_pu = _swig_property(_sim.ShuntFault_Xf_pu_get, _sim.ShuntFault_Xf_pu_set)
    __swig_setmethods__["Xg_pu"] = _sim.ShuntFault_Xg_pu_set
    __swig_getmethods__["Xg_pu"] = _sim.ShuntFault_Xg_pu_get
    if _newclass:Xg_pu = _swig_property(_sim.ShuntFault_Xg_pu_get, _sim.ShuntFault_Xg_pu_set)
    def GetType(self) -> "FaultLocationType::FaultLocationTypeEnum" :
        """GetType(ShuntFault self) -> FaultLocationType::FaultLocationTypeEnum"""
        return _sim.ShuntFault_GetType(self)

ShuntFault_swigregister = _sim.ShuntFault_swigregister
ShuntFault_swigregister(ShuntFault)

class SeriesFault(FaultLocation):
    """Proxy of C++ SeriesFault class"""
    __swig_setmethods__ = {}
    for _s in [FaultLocation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SeriesFault, name, value)
    __swig_getmethods__ = {}
    for _s in [FaultLocation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SeriesFault, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(SeriesFault self) -> SeriesFault"""
        this = _sim.new_SeriesFault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_SeriesFault
    __del__ = lambda self : None;
    __str__ = lambda self: "(FaultType: " + str(self.FaultType) + ", ItemType: " + str(self.ItemType) + ", DeviceID: '" + self.DeviceID + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __swig_setmethods__["DeviceID"] = _sim.SeriesFault_DeviceID_set
    __swig_getmethods__["DeviceID"] = _sim.SeriesFault_DeviceID_get
    if _newclass:DeviceID = _swig_property(_sim.SeriesFault_DeviceID_get, _sim.SeriesFault_DeviceID_set)
    __swig_setmethods__["ItemType"] = _sim.SeriesFault_ItemType_set
    __swig_getmethods__["ItemType"] = _sim.SeriesFault_ItemType_get
    if _newclass:ItemType = _swig_property(_sim.SeriesFault_ItemType_get, _sim.SeriesFault_ItemType_set)
    __swig_setmethods__["FaultType"] = _sim.SeriesFault_FaultType_set
    __swig_getmethods__["FaultType"] = _sim.SeriesFault_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.SeriesFault_FaultType_get, _sim.SeriesFault_FaultType_set)
    __swig_setmethods__["FaultPhase"] = _sim.SeriesFault_FaultPhase_set
    __swig_getmethods__["FaultPhase"] = _sim.SeriesFault_FaultPhase_get
    if _newclass:FaultPhase = _swig_property(_sim.SeriesFault_FaultPhase_get, _sim.SeriesFault_FaultPhase_set)
    __swig_setmethods__["SlidingPosition"] = _sim.SeriesFault_SlidingPosition_set
    __swig_getmethods__["SlidingPosition"] = _sim.SeriesFault_SlidingPosition_get
    if _newclass:SlidingPosition = _swig_property(_sim.SeriesFault_SlidingPosition_get, _sim.SeriesFault_SlidingPosition_set)
    __swig_setmethods__["ImpedanceIsOHMS"] = _sim.SeriesFault_ImpedanceIsOHMS_set
    __swig_getmethods__["ImpedanceIsOHMS"] = _sim.SeriesFault_ImpedanceIsOHMS_get
    if _newclass:ImpedanceIsOHMS = _swig_property(_sim.SeriesFault_ImpedanceIsOHMS_get, _sim.SeriesFault_ImpedanceIsOHMS_set)
    __swig_setmethods__["Ra_ohms"] = _sim.SeriesFault_Ra_ohms_set
    __swig_getmethods__["Ra_ohms"] = _sim.SeriesFault_Ra_ohms_get
    if _newclass:Ra_ohms = _swig_property(_sim.SeriesFault_Ra_ohms_get, _sim.SeriesFault_Ra_ohms_set)
    __swig_setmethods__["Rb_ohms"] = _sim.SeriesFault_Rb_ohms_set
    __swig_getmethods__["Rb_ohms"] = _sim.SeriesFault_Rb_ohms_get
    if _newclass:Rb_ohms = _swig_property(_sim.SeriesFault_Rb_ohms_get, _sim.SeriesFault_Rb_ohms_set)
    __swig_setmethods__["Rc_ohms"] = _sim.SeriesFault_Rc_ohms_set
    __swig_getmethods__["Rc_ohms"] = _sim.SeriesFault_Rc_ohms_get
    if _newclass:Rc_ohms = _swig_property(_sim.SeriesFault_Rc_ohms_get, _sim.SeriesFault_Rc_ohms_set)
    __swig_setmethods__["Xa_ohms"] = _sim.SeriesFault_Xa_ohms_set
    __swig_getmethods__["Xa_ohms"] = _sim.SeriesFault_Xa_ohms_get
    if _newclass:Xa_ohms = _swig_property(_sim.SeriesFault_Xa_ohms_get, _sim.SeriesFault_Xa_ohms_set)
    __swig_setmethods__["Xb_ohms"] = _sim.SeriesFault_Xb_ohms_set
    __swig_getmethods__["Xb_ohms"] = _sim.SeriesFault_Xb_ohms_get
    if _newclass:Xb_ohms = _swig_property(_sim.SeriesFault_Xb_ohms_get, _sim.SeriesFault_Xb_ohms_set)
    __swig_setmethods__["Xc_ohms"] = _sim.SeriesFault_Xc_ohms_set
    __swig_getmethods__["Xc_ohms"] = _sim.SeriesFault_Xc_ohms_get
    if _newclass:Xc_ohms = _swig_property(_sim.SeriesFault_Xc_ohms_get, _sim.SeriesFault_Xc_ohms_set)
    __swig_setmethods__["Ra_pu"] = _sim.SeriesFault_Ra_pu_set
    __swig_getmethods__["Ra_pu"] = _sim.SeriesFault_Ra_pu_get
    if _newclass:Ra_pu = _swig_property(_sim.SeriesFault_Ra_pu_get, _sim.SeriesFault_Ra_pu_set)
    __swig_setmethods__["Rb_pu"] = _sim.SeriesFault_Rb_pu_set
    __swig_getmethods__["Rb_pu"] = _sim.SeriesFault_Rb_pu_get
    if _newclass:Rb_pu = _swig_property(_sim.SeriesFault_Rb_pu_get, _sim.SeriesFault_Rb_pu_set)
    __swig_setmethods__["Rc_pu"] = _sim.SeriesFault_Rc_pu_set
    __swig_getmethods__["Rc_pu"] = _sim.SeriesFault_Rc_pu_get
    if _newclass:Rc_pu = _swig_property(_sim.SeriesFault_Rc_pu_get, _sim.SeriesFault_Rc_pu_set)
    __swig_setmethods__["Xa_pu"] = _sim.SeriesFault_Xa_pu_set
    __swig_getmethods__["Xa_pu"] = _sim.SeriesFault_Xa_pu_get
    if _newclass:Xa_pu = _swig_property(_sim.SeriesFault_Xa_pu_get, _sim.SeriesFault_Xa_pu_set)
    __swig_setmethods__["Xb_pu"] = _sim.SeriesFault_Xb_pu_set
    __swig_getmethods__["Xb_pu"] = _sim.SeriesFault_Xb_pu_get
    if _newclass:Xb_pu = _swig_property(_sim.SeriesFault_Xb_pu_get, _sim.SeriesFault_Xb_pu_set)
    __swig_setmethods__["Xc_pu"] = _sim.SeriesFault_Xc_pu_set
    __swig_getmethods__["Xc_pu"] = _sim.SeriesFault_Xc_pu_get
    if _newclass:Xc_pu = _swig_property(_sim.SeriesFault_Xc_pu_get, _sim.SeriesFault_Xc_pu_set)
    def GetType(self) -> "FaultLocationType::FaultLocationTypeEnum" :
        """GetType(SeriesFault self) -> FaultLocationType::FaultLocationTypeEnum"""
        return _sim.SeriesFault_GetType(self)

SeriesFault_swigregister = _sim.SeriesFault_swigregister
SeriesFault_swigregister(SeriesFault)

class InterCircuitFault(FaultLocation):
    """Proxy of C++ InterCircuitFault class"""
    __swig_setmethods__ = {}
    for _s in [FaultLocation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterCircuitFault, name, value)
    __swig_getmethods__ = {}
    for _s in [FaultLocation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterCircuitFault, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(InterCircuitFault self) -> InterCircuitFault"""
        this = _sim.new_InterCircuitFault()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_InterCircuitFault
    __del__ = lambda self : None;
    __str__ = lambda self: "(FaultType_1: " + str(self.FaultType_1) + ", ItemType_1: " + str(self.ItemType_1) + ", DeviceID_1: '" + self.DeviceID_1 + "')"
    __repr__ = lambda self: str(self.__class__) + '; ' + self.__str__()
    __swig_setmethods__["DeviceID_1"] = _sim.InterCircuitFault_DeviceID_1_set
    __swig_getmethods__["DeviceID_1"] = _sim.InterCircuitFault_DeviceID_1_get
    if _newclass:DeviceID_1 = _swig_property(_sim.InterCircuitFault_DeviceID_1_get, _sim.InterCircuitFault_DeviceID_1_set)
    __swig_setmethods__["ItemType_1"] = _sim.InterCircuitFault_ItemType_1_set
    __swig_getmethods__["ItemType_1"] = _sim.InterCircuitFault_ItemType_1_get
    if _newclass:ItemType_1 = _swig_property(_sim.InterCircuitFault_ItemType_1_get, _sim.InterCircuitFault_ItemType_1_set)
    __swig_setmethods__["FaultType_1"] = _sim.InterCircuitFault_FaultType_1_set
    __swig_getmethods__["FaultType_1"] = _sim.InterCircuitFault_FaultType_1_get
    if _newclass:FaultType_1 = _swig_property(_sim.InterCircuitFault_FaultType_1_get, _sim.InterCircuitFault_FaultType_1_set)
    __swig_setmethods__["FaultPhase_1"] = _sim.InterCircuitFault_FaultPhase_1_set
    __swig_getmethods__["FaultPhase_1"] = _sim.InterCircuitFault_FaultPhase_1_get
    if _newclass:FaultPhase_1 = _swig_property(_sim.InterCircuitFault_FaultPhase_1_get, _sim.InterCircuitFault_FaultPhase_1_set)
    __swig_setmethods__["SlidingPosition_1"] = _sim.InterCircuitFault_SlidingPosition_1_set
    __swig_getmethods__["SlidingPosition_1"] = _sim.InterCircuitFault_SlidingPosition_1_get
    if _newclass:SlidingPosition_1 = _swig_property(_sim.InterCircuitFault_SlidingPosition_1_get, _sim.InterCircuitFault_SlidingPosition_1_set)
    __swig_setmethods__["DeviceID_2"] = _sim.InterCircuitFault_DeviceID_2_set
    __swig_getmethods__["DeviceID_2"] = _sim.InterCircuitFault_DeviceID_2_get
    if _newclass:DeviceID_2 = _swig_property(_sim.InterCircuitFault_DeviceID_2_get, _sim.InterCircuitFault_DeviceID_2_set)
    __swig_setmethods__["ItemType_2"] = _sim.InterCircuitFault_ItemType_2_set
    __swig_getmethods__["ItemType_2"] = _sim.InterCircuitFault_ItemType_2_get
    if _newclass:ItemType_2 = _swig_property(_sim.InterCircuitFault_ItemType_2_get, _sim.InterCircuitFault_ItemType_2_set)
    __swig_setmethods__["FaultType_2"] = _sim.InterCircuitFault_FaultType_2_set
    __swig_getmethods__["FaultType_2"] = _sim.InterCircuitFault_FaultType_2_get
    if _newclass:FaultType_2 = _swig_property(_sim.InterCircuitFault_FaultType_2_get, _sim.InterCircuitFault_FaultType_2_set)
    __swig_setmethods__["FaultPhase_2"] = _sim.InterCircuitFault_FaultPhase_2_set
    __swig_getmethods__["FaultPhase_2"] = _sim.InterCircuitFault_FaultPhase_2_get
    if _newclass:FaultPhase_2 = _swig_property(_sim.InterCircuitFault_FaultPhase_2_get, _sim.InterCircuitFault_FaultPhase_2_set)
    __swig_setmethods__["SlidingPosition_2"] = _sim.InterCircuitFault_SlidingPosition_2_set
    __swig_getmethods__["SlidingPosition_2"] = _sim.InterCircuitFault_SlidingPosition_2_get
    if _newclass:SlidingPosition_2 = _swig_property(_sim.InterCircuitFault_SlidingPosition_2_get, _sim.InterCircuitFault_SlidingPosition_2_set)
    def GetType(self) -> "FaultLocationType::FaultLocationTypeEnum" :
        """GetType(InterCircuitFault self) -> FaultLocationType::FaultLocationTypeEnum"""
        return _sim.InterCircuitFault_GetType(self)

InterCircuitFault_swigregister = _sim.InterCircuitFault_swigregister
InterCircuitFault_swigregister(InterCircuitFault)

class TCCCoordinationResult(_object):
    """Proxy of C++ TCCCoordinationResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TCCCoordinationResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TCCCoordinationResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_TCCCoordinationResult
    __del__ = lambda self : None;
    __swig_getmethods__["NetworkID"] = _sim.TCCCoordinationResult_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.TCCCoordinationResult_NetworkID_get)
    __swig_getmethods__["UpstreamDeviceNumber"] = _sim.TCCCoordinationResult_UpstreamDeviceNumber_get
    if _newclass:UpstreamDeviceNumber = _swig_property(_sim.TCCCoordinationResult_UpstreamDeviceNumber_get)
    __swig_getmethods__["UpstreamDeviceType"] = _sim.TCCCoordinationResult_UpstreamDeviceType_get
    if _newclass:UpstreamDeviceType = _swig_property(_sim.TCCCoordinationResult_UpstreamDeviceType_get)
    __swig_getmethods__["ProtectionType"] = _sim.TCCCoordinationResult_ProtectionType_get
    if _newclass:ProtectionType = _swig_property(_sim.TCCCoordinationResult_ProtectionType_get)
    __swig_getmethods__["UpstreamCurveRating"] = _sim.TCCCoordinationResult_UpstreamCurveRating_get
    if _newclass:UpstreamCurveRating = _swig_property(_sim.TCCCoordinationResult_UpstreamCurveRating_get)
    __swig_getmethods__["CustomersBetweenDevices"] = _sim.TCCCoordinationResult_CustomersBetweenDevices_get
    if _newclass:CustomersBetweenDevices = _swig_property(_sim.TCCCoordinationResult_CustomersBetweenDevices_get)
    __swig_getmethods__["DownstreamDeviceNumber"] = _sim.TCCCoordinationResult_DownstreamDeviceNumber_get
    if _newclass:DownstreamDeviceNumber = _swig_property(_sim.TCCCoordinationResult_DownstreamDeviceNumber_get)
    __swig_getmethods__["DownstreamDeviceType"] = _sim.TCCCoordinationResult_DownstreamDeviceType_get
    if _newclass:DownstreamDeviceType = _swig_property(_sim.TCCCoordinationResult_DownstreamDeviceType_get)
    __swig_getmethods__["DownstreamCurveRating"] = _sim.TCCCoordinationResult_DownstreamCurveRating_get
    if _newclass:DownstreamCurveRating = _swig_property(_sim.TCCCoordinationResult_DownstreamCurveRating_get)
    __swig_getmethods__["ProtectionRangeMin_Amp"] = _sim.TCCCoordinationResult_ProtectionRangeMin_Amp_get
    if _newclass:ProtectionRangeMin_Amp = _swig_property(_sim.TCCCoordinationResult_ProtectionRangeMin_Amp_get)
    __swig_getmethods__["ProtectionRangeMax_Amp"] = _sim.TCCCoordinationResult_ProtectionRangeMax_Amp_get
    if _newclass:ProtectionRangeMax_Amp = _swig_property(_sim.TCCCoordinationResult_ProtectionRangeMax_Amp_get)
    __swig_getmethods__["NonCoordinationPoint_Amp"] = _sim.TCCCoordinationResult_NonCoordinationPoint_Amp_get
    if _newclass:NonCoordinationPoint_Amp = _swig_property(_sim.TCCCoordinationResult_NonCoordinationPoint_Amp_get)
    __swig_getmethods__["ErrorCode"] = _sim.TCCCoordinationResult_ErrorCode_get
    if _newclass:ErrorCode = _swig_property(_sim.TCCCoordinationResult_ErrorCode_get)
    __swig_getmethods__["IsCoordination"] = _sim.TCCCoordinationResult_IsCoordination_get
    if _newclass:IsCoordination = _swig_property(_sim.TCCCoordinationResult_IsCoordination_get)
TCCCoordinationResult_swigregister = _sim.TCCCoordinationResult_swigregister
TCCCoordinationResult_swigregister(TCCCoordinationResult)

class InstantaneousProtection(Simulation):
    """Proxy of C++ InstantaneousProtection class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstantaneousProtection, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InstantaneousProtection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(InstantaneousProtection self) -> InstantaneousProtection"""
        this = _sim.new_InstantaneousProtection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_InstantaneousProtection
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(InstantaneousProtection self, std::list< CYMString > Networks)
        Run(InstantaneousProtection self)
        """
        return _sim.InstantaneousProtection_Run(self, *args)

    def GetResults(self) -> "std::list< InstantaneousProtectionResult >" :
        """GetResults(InstantaneousProtection self) -> std::list< InstantaneousProtectionResult >"""
        return _sim.InstantaneousProtection_GetResults(self)

InstantaneousProtection_swigregister = _sim.InstantaneousProtection_swigregister
InstantaneousProtection_swigregister(InstantaneousProtection)

class InstantaneousProtectionResult(_object):
    """Proxy of C++ InstantaneousProtectionResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InstantaneousProtectionResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InstantaneousProtectionResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_InstantaneousProtectionResult
    __del__ = lambda self : None;
    __swig_getmethods__["NetworkID"] = _sim.InstantaneousProtectionResult_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.InstantaneousProtectionResult_NetworkID_get)
    __swig_getmethods__["ProtectiveDeviceNumber"] = _sim.InstantaneousProtectionResult_ProtectiveDeviceNumber_get
    if _newclass:ProtectiveDeviceNumber = _swig_property(_sim.InstantaneousProtectionResult_ProtectiveDeviceNumber_get)
    __swig_getmethods__["AnalysisPoint"] = _sim.InstantaneousProtectionResult_AnalysisPoint_get
    if _newclass:AnalysisPoint = _swig_property(_sim.InstantaneousProtectionResult_AnalysisPoint_get)
    __swig_getmethods__["IsAnalysisPointNode"] = _sim.InstantaneousProtectionResult_IsAnalysisPointNode_get
    if _newclass:IsAnalysisPointNode = _swig_property(_sim.InstantaneousProtectionResult_IsAnalysisPointNode_get)
    __swig_getmethods__["SensitivityIndexPhase"] = _sim.InstantaneousProtectionResult_SensitivityIndexPhase_get
    if _newclass:SensitivityIndexPhase = _swig_property(_sim.InstantaneousProtectionResult_SensitivityIndexPhase_get)
    __swig_getmethods__["InstantPickupPhase_Amp"] = _sim.InstantaneousProtectionResult_InstantPickupPhase_Amp_get
    if _newclass:InstantPickupPhase_Amp = _swig_property(_sim.InstantaneousProtectionResult_InstantPickupPhase_Amp_get)
    __swig_getmethods__["MinInstantPickupPhase_Amp"] = _sim.InstantaneousProtectionResult_MinInstantPickupPhase_Amp_get
    if _newclass:MinInstantPickupPhase_Amp = _swig_property(_sim.InstantaneousProtectionResult_MinInstantPickupPhase_Amp_get)
    __swig_getmethods__["MaxInstantPickupPhase_Amp"] = _sim.InstantaneousProtectionResult_MaxInstantPickupPhase_Amp_get
    if _newclass:MaxInstantPickupPhase_Amp = _swig_property(_sim.InstantaneousProtectionResult_MaxInstantPickupPhase_Amp_get)
    __swig_getmethods__["SensitivityIndexGround"] = _sim.InstantaneousProtectionResult_SensitivityIndexGround_get
    if _newclass:SensitivityIndexGround = _swig_property(_sim.InstantaneousProtectionResult_SensitivityIndexGround_get)
    __swig_getmethods__["InstantPickupGround_Amp"] = _sim.InstantaneousProtectionResult_InstantPickupGround_Amp_get
    if _newclass:InstantPickupGround_Amp = _swig_property(_sim.InstantaneousProtectionResult_InstantPickupGround_Amp_get)
    __swig_getmethods__["MinInstantPickupGround_Amp"] = _sim.InstantaneousProtectionResult_MinInstantPickupGround_Amp_get
    if _newclass:MinInstantPickupGround_Amp = _swig_property(_sim.InstantaneousProtectionResult_MinInstantPickupGround_Amp_get)
    __swig_getmethods__["MaxInstantPickupGround_Amp"] = _sim.InstantaneousProtectionResult_MaxInstantPickupGround_Amp_get
    if _newclass:MaxInstantPickupGround_Amp = _swig_property(_sim.InstantaneousProtectionResult_MaxInstantPickupGround_Amp_get)
InstantaneousProtectionResult_swigregister = _sim.InstantaneousProtectionResult_swigregister
InstantaneousProtectionResult_swigregister(InstantaneousProtectionResult)

class EnergyConfinement(Simulation):
    """Proxy of C++ EnergyConfinement class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyConfinement, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyConfinement, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(EnergyConfinement self) -> EnergyConfinement"""
        this = _sim.new_EnergyConfinement()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_EnergyConfinement
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(EnergyConfinement self)
        Run(EnergyConfinement self, std::list< CYMString > Networks)
        """
        return _sim.EnergyConfinement_Run(self, *args)

    def GetSwitchesResultsGrouped(self) -> "std::list< EnergyConfinementResult >" :
        """GetSwitchesResultsGrouped(EnergyConfinement self) -> std::list< EnergyConfinementResult >"""
        return _sim.EnergyConfinement_GetSwitchesResultsGrouped(self)

    def getKevlarResults(self) -> "std::list< EnergyConfinementResult >" :
        """getKevlarResults(EnergyConfinement self) -> std::list< EnergyConfinementResult >"""
        return _sim.EnergyConfinement_getKevlarResults(self)

    def getGroundingSetResults(self) -> "std::list< EnergyConfinementResult >" :
        """getGroundingSetResults(EnergyConfinement self) -> std::list< EnergyConfinementResult >"""
        return _sim.EnergyConfinement_getGroundingSetResults(self)

EnergyConfinement_swigregister = _sim.EnergyConfinement_swigregister
EnergyConfinement_swigregister(EnergyConfinement)

class EnergyConfinementResult(_object):
    """Proxy of C++ EnergyConfinementResult class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EnergyConfinementResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EnergyConfinementResult, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim.delete_EnergyConfinementResult
    __del__ = lambda self : None;
    __swig_getmethods__["NetworkID"] = _sim.EnergyConfinementResult_NetworkID_get
    if _newclass:NetworkID = _swig_property(_sim.EnergyConfinementResult_NetworkID_get)
    __swig_getmethods__["Type"] = _sim.EnergyConfinementResult_Type_get
    if _newclass:Type = _swig_property(_sim.EnergyConfinementResult_Type_get)
    __swig_getmethods__["Grouping"] = _sim.EnergyConfinementResult_Grouping_get
    if _newclass:Grouping = _swig_property(_sim.EnergyConfinementResult_Grouping_get)
    __swig_getmethods__["ItemNumber"] = _sim.EnergyConfinementResult_ItemNumber_get
    if _newclass:ItemNumber = _swig_property(_sim.EnergyConfinementResult_ItemNumber_get)
    __swig_getmethods__["FaultType"] = _sim.EnergyConfinementResult_FaultType_get
    if _newclass:FaultType = _swig_property(_sim.EnergyConfinementResult_FaultType_get)
    __swig_getmethods__["SecurityFactor"] = _sim.EnergyConfinementResult_SecurityFactor_get
    if _newclass:SecurityFactor = _swig_property(_sim.EnergyConfinementResult_SecurityFactor_get)
    __swig_getmethods__["EnergyLimit"] = _sim.EnergyConfinementResult_EnergyLimit_get
    if _newclass:EnergyLimit = _swig_property(_sim.EnergyConfinementResult_EnergyLimit_get)
    __swig_getmethods__["ConfinedEnergy"] = _sim.EnergyConfinementResult_ConfinedEnergy_get
    if _newclass:ConfinedEnergy = _swig_property(_sim.EnergyConfinementResult_ConfinedEnergy_get)
    __swig_getmethods__["IsFaultCleared"] = _sim.EnergyConfinementResult_IsFaultCleared_get
    if _newclass:IsFaultCleared = _swig_property(_sim.EnergyConfinementResult_IsFaultCleared_get)
    __swig_getmethods__["BackupedFeederID"] = _sim.EnergyConfinementResult_BackupedFeederID_get
    if _newclass:BackupedFeederID = _swig_property(_sim.EnergyConfinementResult_BackupedFeederID_get)
    __swig_getmethods__["StrategicBlockHeadID"] = _sim.EnergyConfinementResult_StrategicBlockHeadID_get
    if _newclass:StrategicBlockHeadID = _swig_property(_sim.EnergyConfinementResult_StrategicBlockHeadID_get)
EnergyConfinementResult_swigregister = _sim.EnergyConfinementResult_swigregister
EnergyConfinementResult_swigregister(EnergyConfinementResult)

class TransientStability(Simulation):
    """Proxy of C++ TransientStability class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransientStability, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransientStability, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(TransientStability self) -> TransientStability"""
        this = _sim.new_TransientStability()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_TransientStability
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(TransientStability self)"""
        return _sim.TransientStability_Run(self)

TransientStability_swigregister = _sim.TransientStability_swigregister
TransientStability_swigregister(TransientStability)

class IntegrationCapacityAnalysis(Simulation):
    """Proxy of C++ IntegrationCapacityAnalysis class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationCapacityAnalysis, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationCapacityAnalysis, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(IntegrationCapacityAnalysis self) -> IntegrationCapacityAnalysis"""
        this = _sim.new_IntegrationCapacityAnalysis()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_IntegrationCapacityAnalysis
    __del__ = lambda self : None;
    def Run(self, *args) -> "void" :
        """
        Run(IntegrationCapacityAnalysis self)
        Run(IntegrationCapacityAnalysis self, std::list< CYMString > Networks)
        """
        return _sim.IntegrationCapacityAnalysis_Run(self, *args)

IntegrationCapacityAnalysis_swigregister = _sim.IntegrationCapacityAnalysis_swigregister
IntegrationCapacityAnalysis_swigregister(IntegrationCapacityAnalysis)

class DERImpactEvaluation(Simulation):
    """Proxy of C++ DERImpactEvaluation class"""
    __swig_setmethods__ = {}
    for _s in [Simulation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DERImpactEvaluation, name, value)
    __swig_getmethods__ = {}
    for _s in [Simulation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DERImpactEvaluation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(DERImpactEvaluation self) -> DERImpactEvaluation"""
        this = _sim.new_DERImpactEvaluation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _sim.delete_DERImpactEvaluation
    __del__ = lambda self : None;
    def Run(self) -> "void" :
        """Run(DERImpactEvaluation self)"""
        return _sim.DERImpactEvaluation_Run(self)

DERImpactEvaluation_swigregister = _sim.DERImpactEvaluation_swigregister
DERImpactEvaluation_swigregister(DERImpactEvaluation)

# This file is compatible with both classic and new-style classes.


